include "TriggerLibs/NativeLib"

include "LibARMP_h"

//--------------------------------------------------------------------------------------------------
// Library: All Races
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libARMP_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libARMP_InitVariables_completed = false;

void libARMP_InitVariables () {
    if (libARMP_InitVariables_completed) {
        return;
    }

    libARMP_InitVariables_completed = true;

    libARMP_gv_startMinerals = 50;
    libARMP_gv_resourceType = libARMP_ge_PreplacedResourceType_Default;
    libARMP_gv_supplyCap = 200;
}

// Presets
// Functions
string libARMP_gf_GetUnitUserData (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoE13F2D06_ae;
    int autoE13F2D06_var;

    // Variable Initialization

    // Implementation
    autoE13F2D06_ae = UserDataInstanceCount("UnitData");
    autoE13F2D06_var = 1;
    for ( ; autoE13F2D06_var <= autoE13F2D06_ae; autoE13F2D06_var += 1 ) {
        lv_instance = UserDataInstance("UnitData", autoE13F2D06_var);
        if ((UserDataGetUnit("UnitData", lv_instance, "Unit", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return null;
}

string libARMP_gf_GetResourceUserData (string lp_unit) {
    // Variable Declarations
    string lv_instance;

    // Automatic Variable Declarations
    int autoEC5B4BC9_ae;
    int autoEC5B4BC9_var;

    // Variable Initialization

    // Implementation
    autoEC5B4BC9_ae = UserDataInstanceCount("ResourcesData");
    autoEC5B4BC9_var = 1;
    for ( ; autoEC5B4BC9_var <= autoEC5B4BC9_ae; autoEC5B4BC9_var += 1 ) {
        lv_instance = UserDataInstance("ResourcesData", autoEC5B4BC9_var);
        if ((UserDataGetUnit("ResourcesData", lv_instance, "Unit", 1) == lp_unit)) {
            return lv_instance;
        }

    }
    return null;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Offline Game Attributes Initialisation
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_OfflineGameAttributesInitialisation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetSpeedValue(c_gameSpeedFaster);
    TriggerExecute(libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps, true, false);
    TriggerExecute(libARMP_gt_SprayUpgrades, true, false);
    TriggerExecute(libARMP_gt_FactionTriggers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_OfflineGameAttributesInitialisation_Init () {
    libARMP_gt_OfflineGameAttributesInitialisation = TriggerCreate("libARMP_gt_OfflineGameAttributesInitialisation_Func");
    TriggerAddEventMapInit(libARMP_gt_OfflineGameAttributesInitialisation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Online Game Attributes Initialisation
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_OnlineGameAttributesInitialisation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_aG_Supplies;
    string lv_aG_Resources;
    string lv_aG_Money;
    int lv_player;
    string lv_races;

    // Automatic Variable Declarations
    playergroup autoB6F80194_g;
    string auto4D5F20F8_val;
    int auto39EA3E3C_val;
    string auto293EEC22_val;
    string autoA37C9A18_val;
    string auto89A30B7A_val;

    // Variable Initialization
    lv_aG_Supplies = GameAttributeGameValue("2");
    lv_aG_Resources = GameAttributeGameValue("3");
    lv_aG_Money = GameAttributeGameValue("5");
    lv_races = " ";

    // Conditions
    if (testConds) {
        if (!((GameIsTestMap(false) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB6F80194_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB6F80194_g, lv_player);
        if (lv_player < 0) { break; }
        PlayerOptionOverride(lv_player, "simplecommandcard", "0");
        auto4D5F20F8_val = GameAttributePlayerValue("16", lv_player);
        if (auto4D5F20F8_val == "0013") {
            PlayerSetRace(lv_player, "BWPr");
        }
        else if (auto4D5F20F8_val == "0011") {
            PlayerSetRace(lv_player, "BWTe");
        }
        else if (auto4D5F20F8_val == "0012") {
            PlayerSetRace(lv_player, "BWZe");
        }
        else if (auto4D5F20F8_val == "0018") {
            PlayerSetRace(lv_player, "Dragon");
        }
        else if (auto4D5F20F8_val == "0002") {
            PlayerSetRace(lv_player, "Gen");
        }
        else if (auto4D5F20F8_val == "0006") {
            PlayerSetRace(lv_player, "ZHBR");
        }
        else if (auto4D5F20F8_val == "0004") {
            PlayerSetRace(lv_player, "Keir");
        }
        else if (auto4D5F20F8_val == "0016") {
            PlayerSetRace(lv_player, "Prot");
        }
        else if (auto4D5F20F8_val == "0008") {
            PlayerSetRace(lv_player, "Synd");
        }
        else if (auto4D5F20F8_val == "0010") {
            PlayerSetRace(lv_player, "PrTD");
        }
        else if (auto4D5F20F8_val == "0014") {
            PlayerSetRace(lv_player, "Terr");
        }
        else if (auto4D5F20F8_val == "0005") {
            PlayerSetRace(lv_player, "UED");
        }
        else if (auto4D5F20F8_val == "0009") {
            PlayerSetRace(lv_player, "TerU");
        }
        else if (auto4D5F20F8_val == "0007") {
            PlayerSetRace(lv_player, "UPL");
        }
        else if (auto4D5F20F8_val == "0003") {
            PlayerSetRace(lv_player, "Xayi");
        }
        else if (auto4D5F20F8_val == "0015") {
            PlayerSetRace(lv_player, "Zerg");
        }
        else if (auto4D5F20F8_val == "0017") {
            auto39EA3E3C_val = RandomInt(1, 16);
            if (auto39EA3E3C_val == 1) {
                PlayerSetRace(lv_player, "BWPr");
            }
            else if (auto39EA3E3C_val == 2) {
                PlayerSetRace(lv_player, "BWTe");
            }
            else if (auto39EA3E3C_val == 3) {
                PlayerSetRace(lv_player, "BWZe");
            }
            else if (auto39EA3E3C_val == 4) {
                PlayerSetRace(lv_player, "Dragon");
            }
            else if (auto39EA3E3C_val == 5) {
                PlayerSetRace(lv_player, "Gen");
            }
            else if (auto39EA3E3C_val == 6) {
                PlayerSetRace(lv_player, "ZHBR");
            }
            else if (auto39EA3E3C_val == 7) {
                PlayerSetRace(lv_player, "Keir");
            }
            else if (auto39EA3E3C_val == 8) {
                PlayerSetRace(lv_player, "Prot");
            }
            else if (auto39EA3E3C_val == 9) {
                PlayerSetRace(lv_player, "Synd");
            }
            else if (auto39EA3E3C_val == 10) {
                PlayerSetRace(lv_player, "PrTD");
            }
            else if (auto39EA3E3C_val == 11) {
                PlayerSetRace(lv_player, "Terr");
            }
            else if (auto39EA3E3C_val == 12) {
                PlayerSetRace(lv_player, "UED");
            }
            else if (auto39EA3E3C_val == 13) {
                PlayerSetRace(lv_player, "TerU");
            }
            else if (auto39EA3E3C_val == 14) {
                PlayerSetRace(lv_player, "UPL");
            }
            else if (auto39EA3E3C_val == 15) {
                PlayerSetRace(lv_player, "Xayi");
            }
            else if (auto39EA3E3C_val == 16) {
                PlayerSetRace(lv_player, "Zerg");
            }
            else {
            }
        }
        else {
        }
    }
    auto293EEC22_val = lv_aG_Money;
    if (auto293EEC22_val == "0002") {
        libARMP_gv_startMinerals = 5000;
        libARMP_gv_startVespene = 2500;
    }
    else if (auto293EEC22_val == "0003") {
        libARMP_gv_startMinerals = 9999;
        libARMP_gv_startVespene = 9999;
    }
    else {
    }
    autoA37C9A18_val = lv_aG_Resources;
    if (autoA37C9A18_val == "0003") {
        libARMP_gv_resourceType = libARMP_ge_PreplacedResourceType_Rich;
    }
    else if (autoA37C9A18_val == "0002") {
        libARMP_gv_resourceType = libARMP_ge_PreplacedResourceType_BGH;
    }
    else if (autoA37C9A18_val == "0004") {
        libARMP_gv_resourceType = libARMP_ge_PreplacedResourceType_RichBGH;
    }
    else {
    }
    auto89A30B7A_val = lv_aG_Supplies;
    if (auto89A30B7A_val == "0001") {
        libARMP_gv_supplyCap = 100;
    }
    else if (auto89A30B7A_val == "0003") {
        libARMP_gv_supplyCap = 300;
    }
    else if (auto89A30B7A_val == "0005") {
        libARMP_gv_supplyCap = 400;
    }
    else if (auto89A30B7A_val == "0004") {
        libARMP_gv_supplyCap = 500;
    }
    else if (auto89A30B7A_val == "0006") {
        libARMP_gv_supplyCap = 1000;
    }
    else {
    }
    TriggerExecute(libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps, true, false);
    TriggerExecute(libARMP_gt_SprayUpgrades, true, false);
    TriggerExecute(libARMP_gt_ApplyInitialResources, true, false);
    TriggerExecute(libARMP_gt_ApplyHarvestableResources, true, false);
    TriggerExecute(libARMP_gt_ApplySupplyCap, true, false);
    TriggerExecute(libARMP_gt_FactionTriggers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_OnlineGameAttributesInitialisation_Init () {
    libARMP_gt_OnlineGameAttributesInitialisation = TriggerCreate("libARMP_gt_OnlineGameAttributesInitialisation_Func");
    TriggerAddEventMapInit(libARMP_gt_OnlineGameAttributesInitialisation);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Faction Triggers
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_FactionTriggers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_races;

    // Automatic Variable Declarations
    playergroup autoCC589DF4_g;
    int autoCC589DF4_var;

    // Variable Initialization
    lv_races = " ";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerSendEvent("GAME START");
    autoCC589DF4_g = PlayerGroupAll();
    autoCC589DF4_var = -1;
    while (true) {
        autoCC589DF4_var = PlayerGroupNextPlayer(autoCC589DF4_g, autoCC589DF4_var);
        if (autoCC589DF4_var < 0) { break; }
        if ((StringFind(lv_races, (PlayerRace(autoCC589DF4_var)), c_stringCase) < 1)) {
            lv_races = (lv_races + (PlayerRace(autoCC589DF4_var)) + " ");
            TriggerSendEvent(("GAME START " + (PlayerRace(autoCC589DF4_var))));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_FactionTriggers_Init () {
    libARMP_gt_FactionTriggers = TriggerCreate("libARMP_gt_FactionTriggers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Support Worker Only Paths For Some Custom Maps
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_innerRadius;
    string lv_unit;

    // Automatic Variable Declarations
    int auto6AE95095_ae;
    int auto6AE95095_var;
    playergroup autoDF96FEC5_g;
    int autoDF96FEC5_var;

    // Variable Initialization
    lv_innerRadius = libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, "SCV", "InnerRadius", c_playerAny);

    // Actions
    if (!runActions) {
        return true;
    }

    auto6AE95095_ae = CatalogEntryCount(c_gameCatalogUnit);
    auto6AE95095_var = 1;
    for ( ; auto6AE95095_var <= auto6AE95095_ae; auto6AE95095_var += 1 ) {
        lv_unit = CatalogEntryGet(c_gameCatalogUnit, auto6AE95095_var);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unit, "FlagArray[" + IntToString(c_unitFlagWorker) + "]", c_playerAny) == 1)) {
            autoDF96FEC5_g = PlayerGroupAll();
            autoDF96FEC5_var = -1;
            while (true) {
                autoDF96FEC5_var = PlayerGroupNextPlayer(autoDF96FEC5_g, autoDF96FEC5_var);
                if (autoDF96FEC5_var < 0) { break; }
                libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogUnit, lv_unit, "InnerRadius", autoDF96FEC5_var, lv_innerRadius);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps_Init () {
    libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps = TriggerCreate("libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spray Upgrades
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_SprayUpgrades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit;

    // Automatic Variable Declarations
    playergroup auto7CB45438_g;
    int auto7CB45438_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CB45438_g = PlayerGroupAll();
    auto7CB45438_var = -1;
    while (true) {
        auto7CB45438_var = PlayerGroupNextPlayer(auto7CB45438_g, auto7CB45438_var);
        if (auto7CB45438_var < 0) { break; }
        TechTreeUpgradeAddLevel(auto7CB45438_var, "SprayProtoss", 1);
        TechTreeUpgradeAddLevel(auto7CB45438_var, "SprayTerran", 1);
        TechTreeUpgradeAddLevel(auto7CB45438_var, "SprayZerg", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_SprayUpgrades_Init () {
    libARMP_gt_SprayUpgrades = TriggerCreate("libARMP_gt_SprayUpgrades_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Initial Resources
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_ApplyInitialResources_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto0E030966_g;
    int auto0E030966_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.1, c_timeGame);
    auto0E030966_g = PlayerGroupAll();
    auto0E030966_var = -1;
    while (true) {
        auto0E030966_var = PlayerGroupNextPlayer(auto0E030966_g, auto0E030966_var);
        if (auto0E030966_var < 0) { break; }
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropMinerals, c_playerPropOperSetTo, libARMP_gv_startMinerals);
        PlayerModifyPropertyInt(auto0E030966_var, c_playerPropVespene, c_playerPropOperSetTo, libARMP_gv_startVespene);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_ApplyInitialResources_Init () {
    libARMP_gt_ApplyInitialResources = TriggerCreate("libARMP_gt_ApplyInitialResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Harvestable Resources
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_ApplyHarvestableResources_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unitData;
    string lv_replacementUnitType;

    // Automatic Variable Declarations
    unitgroup autoAF6B57F5_g;
    int autoAF6B57F5_u;
    unit autoAF6B57F5_var;
    string auto54832AD7_val;
    string autoCEA67A5D_val;
    unitgroup auto6A446791_g;
    int auto6A446791_u;
    unit auto6A446791_var;
    string auto6A2EC427_val;
    unitgroup auto0308609E_g;
    int auto0308609E_u;
    unit auto0308609E_var;
    unitgroup auto38B0BDBC_g;
    int auto38B0BDBC_u;
    unit auto38B0BDBC_var;
    string autoA8BB282A_val;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_Rich) || (libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_RichBGH))) {
        autoAF6B57F5_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoAF6B57F5_u = UnitGroupCount(autoAF6B57F5_g, c_unitCountAll);
        for (;; autoAF6B57F5_u -= 1) {
            autoAF6B57F5_var = UnitGroupUnitFromEnd(autoAF6B57F5_g, autoAF6B57F5_u);
            if (autoAF6B57F5_var == null) { break; }
            lv_unitData = libARMP_gf_GetResourceUserData(UnitGetType(autoAF6B57F5_var));
            if ((lv_unitData != null)) {
                lv_replacementUnitType = UserDataGetGameLink("ResourcesData", lv_unitData, "RichUnit", 1);
            }
            else {
                lv_replacementUnitType = null;
            }
            if ((lv_replacementUnitType != null)) {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, lv_replacementUnitType, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
                libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichMineralField", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            auto54832AD7_val = UnitGetType(autoAF6B57F5_var);
            {
                autoCEA67A5D_val = UnitBehaviorGet(autoAF6B57F5_var, 1);
                if (autoCEA67A5D_val == "MineralFieldMinerals") {
                }
                else if (autoCEA67A5D_val == "RawVespeneGeyserGas") {
                    libNtve_gf_ReplaceUnit(autoAF6B57F5_var, "RichVespeneGeyser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
                }
                else {
                }
            }
        }
    }

    if (((libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_BGH) || (libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_RichBGH))) {
        auto6A446791_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto6A446791_u = UnitGroupCount(auto6A446791_g, c_unitCountAll);
        for (;; auto6A446791_u -= 1) {
            auto6A446791_var = UnitGroupUnitFromEnd(auto6A446791_g, auto6A446791_u);
            if (auto6A446791_var == null) { break; }
            auto6A2EC427_val = UnitBehaviorGet(auto6A446791_var, 1);
            if (auto6A2EC427_val == "MineralFieldMinerals750") {
                UnitBehaviorRemove(auto6A446791_var, UnitBehaviorGet(auto6A446791_var, 1), 1);
                UnitBehaviorAdd(auto6A446791_var, "MineralFieldMineralsBGH", auto6A446791_var, 1);
            }
            else if (auto6A2EC427_val == "MineralFieldMinerals") {
                UnitBehaviorRemove(auto6A446791_var, UnitBehaviorGet(auto6A446791_var, 1), 1);
                UnitBehaviorAdd(auto6A446791_var, "MineralFieldMineralsBGH", auto6A446791_var, 1);
            }
            else if (auto6A2EC427_val == "HighYieldMineralFieldMinerals750") {
                UnitBehaviorRemove(auto6A446791_var, UnitBehaviorGet(auto6A446791_var, 1), 1);
                UnitBehaviorAdd(auto6A446791_var, "MineralsHighYieldBGH", auto6A446791_var, 1);
            }
            else if (auto6A2EC427_val == "HighYieldMineralFieldMinerals") {
                UnitBehaviorRemove(auto6A446791_var, UnitBehaviorGet(auto6A446791_var, 1), 1);
                UnitBehaviorAdd(auto6A446791_var, "MineralsHighYieldBGH", auto6A446791_var, 1);
            }
            else {
            }
        }
    }

    if ((libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_Rich) && (libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_RichBGH)) {
        auto0308609E_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto0308609E_u = UnitGroupCount(auto0308609E_g, c_unitCountAll);
        for (;; auto0308609E_u -= 1) {
            auto0308609E_var = UnitGroupUnitFromEnd(auto0308609E_g, auto0308609E_u);
            if (auto0308609E_var == null) { break; }
            lv_unitData = libARMP_gf_GetUnitUserData(UnitGetType(auto0308609E_var));
            if ((lv_unitData != null)) {
                lv_replacementUnitType = UserDataGetGameLink("ResourcesData", lv_unitData, "RichUnit", 1);
            }
            else {
                lv_replacementUnitType = null;
            }
            if ((lv_replacementUnitType != null)) {
                libNtve_gf_ReplaceUnit(auto0308609E_var, lv_replacementUnitType, libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
            else {
                libNtve_gf_ReplaceUnit(auto0308609E_var, "RichVespeneGeyser", libNtve_ge_ReplaceUnitOptions_OldUnitsRelative);
            }
        }
    }

    if ((libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_BGH) && (libARMP_gv_resourceType == libARMP_ge_PreplacedResourceType_RichBGH)) {
        auto38B0BDBC_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto38B0BDBC_u = UnitGroupCount(auto38B0BDBC_g, c_unitCountAll);
        for (;; auto38B0BDBC_u -= 1) {
            auto38B0BDBC_var = UnitGroupUnitFromEnd(auto38B0BDBC_g, auto38B0BDBC_u);
            if (auto38B0BDBC_var == null) { break; }
            autoA8BB282A_val = UnitBehaviorGet(auto38B0BDBC_var, 1);
            if (autoA8BB282A_val == "RawRichVespeneGeyserGas") {
                UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
                UnitBehaviorAdd(auto38B0BDBC_var, "GasRawRichVespeneGeyserBGH", auto38B0BDBC_var, 1);
            }
            else if (autoA8BB282A_val == "RawVespeneGeyserGas") {
                UnitBehaviorRemove(auto38B0BDBC_var, UnitBehaviorGet(auto38B0BDBC_var, 1), 1);
                UnitBehaviorAdd(auto38B0BDBC_var, "GasRawVespeneGeyserBGH", auto38B0BDBC_var, 1);
            }
            else {
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_ApplyHarvestableResources_Init () {
    libARMP_gt_ApplyHarvestableResources = TriggerCreate("libARMP_gt_ApplyHarvestableResources_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Supply Cap
//--------------------------------------------------------------------------------------------------
bool libARMP_gt_ApplySupplyCap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoE750B4CE_g;
    int autoE750B4CE_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE750B4CE_g = PlayerGroupAll();
    autoE750B4CE_var = -1;
    while (true) {
        autoE750B4CE_var = PlayerGroupNextPlayer(autoE750B4CE_g, autoE750B4CE_var);
        if (autoE750B4CE_var < 0) { break; }
        PlayerModifyPropertyInt(autoE750B4CE_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, libARMP_gv_supplyCap);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libARMP_gt_ApplySupplyCap_Init () {
    libARMP_gt_ApplySupplyCap = TriggerCreate("libARMP_gt_ApplySupplyCap_Func");
}

void libARMP_InitTriggers () {
    libARMP_gt_OfflineGameAttributesInitialisation_Init();
    libARMP_gt_OnlineGameAttributesInitialisation_Init();
    libARMP_gt_FactionTriggers_Init();
    libARMP_gt_SupportWorkerOnlyPathsForSomeCustomMaps_Init();
    libARMP_gt_SprayUpgrades_Init();
    libARMP_gt_ApplyInitialResources_Init();
    libARMP_gt_ApplyHarvestableResources_Init();
    libARMP_gt_ApplySupplyCap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libARMP_InitLib_completed = false;

void libARMP_InitLib () {
    if (libARMP_InitLib_completed) {
        return;
    }

    libARMP_InitLib_completed = true;

    libARMP_InitLibraries();
    libARMP_InitVariables();
    libARMP_InitTriggers();
}

