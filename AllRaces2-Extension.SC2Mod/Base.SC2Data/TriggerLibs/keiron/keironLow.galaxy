
//--------------------------------------------------------------------------------------------------
//  KeironBasicEconomy
//--------------------------------------------------------------------------------------------------
void KeironBasicEconomy (int player, int tier, int minWorkers) {
    int econMin = AIGetMinPeonCount(player, c_townMax);
    if (minWorkers > econMin) {
        minWorkers = econMin;
    }

    AIDefaultEconomy(player, c_KB_Citadel_Alias, c_KB_Formulator, c_KB_Edifice, c_KU_Converter, minWorkers, c_stockAlways);
}

//--------------------------------------------------------------------------------------------------
//  KeironBasicExpansion
//--------------------------------------------------------------------------------------------------
void KeironBasicExpansion (int player, int tier, int minerals, int gas) {
    AIDefaultExpansion(player, c_KB_Citadel, minerals, gas, c_expandDefault);
}

//--------------------------------------------------------------------------------------------------
//  KeironGeneralBuild
//--------------------------------------------------------------------------------------------------
void KeironGeneralBuild (int player, int tier) {
    if (tier >= c_ldPhaseMid) {
        if (PlayerBeaconIsSet(player, c_beaconDetect)) {
            AISetStock( player, 1, c_KU_Paradox );
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  KeironMacroExpand
//--------------------------------------------------------------------------------------------------
bool KeironMacroExpand (int player) {
    fixed defenseEval = 0;

    if (AITechCount(player, c_KU_Converter, c_techCountQueuedOrBetter) < 14) {
        return false;
    }
    if (AITechCount(player, c_KB_Citadel_Alias, c_techCountQueuedOrBetter) >= 2) {
        return false;
    }
    
    defenseEval = AISelfDefenseThreatEval(c_dtRealSelfThreat, player);
    if (defenseEval >= 120) {
        // don't expand if currently under attack
        return false;
    }

    if (!AIIsExpandingOrHasExpanded(player)) {
        if (!AIHasNearbyOpenExpansion(player)) {
            return false;
        }
        if (!AIHasRes(player,300,0)) {
            AIEnableStock(player);
            return true;
        }

        // we should try to expand
        AIExpand(player, AIGetTownLocation(player, c_townMain), c_KB_Citadel);
    }

    // currently expanding see if we need to save minerals
    if (!AIHasRes(player,500,0)) {
        AIEnableStock(player);
        return true;
    }
    return false; // already saved enough, we're allowed to continue the stock
}

//--------------------------------------------------------------------------------------------------
//  KeironAtEachTown
//--------------------------------------------------------------------------------------------------
void KeironAtEachTown (int player, int tier) {
    int i = 0;
    int town;

    while (i < c_townMax) {
        town = i;
        i = i + 1;

        if (AIGetTownState(player, town) != c_townStateEstablished) {
            continue;
        }

        if (AIGetBuildingCountInTown(player, town, c_KB_Citadel_Alias, c_techCountCompleteOnly) < 1) {
            continue;
        }

        if (AIGetBuildingCountInTown(player, town, c_KB_Stratus, c_techCountCompleteOnly) < 2) {
            AISetStockEx(player, town, 2, c_KB_Stratus, c_makeResourceDefense | c_nearDropoff, 0);
            continue;
        }
        if (AIGetBuildingCountInTown(player, town, c_KB_Nullifier, c_techCountCompleteOnly) < 1) {
            AISetStockEx(player, town, 1, c_KB_Nullifier, c_makeResourceDefense | c_nearDropoff, 0);
            continue;
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  KeironTechUp
//--------------------------------------------------------------------------------------------------
void KeironTechUp (int player, int tier) {
    int diff = AIPlayerDifficulty(player);

    if (diff < c_skirMedium) {
        // don't build extra buildings below medium
        return;
    }

    AISetStock( player, 2, c_KB_Formulator );
    AISetStock( player, 1, c_KB_Edifice );
    AISetStock( player, 1, c_KB_Sanctum );
    AISetStock( player, 1, c_KB_Reliquary );

    if (tier >= c_ldPhaseMid) {
        KeironAtEachTown(player, tier);
        AISetStock( player, 1, c_KB_Foundry );
        AISetStock( player, 1, c_KB_Atrium );
        AISetStock( player, 1, c_KB_Oculus );
        AISetStock( player, 2, c_KB_Reliquary );
        AISetStock( player, 1, c_KB_Conduit );
        AISetStock( player, 1, c_KB_Outlet );
        AISetStock( player, 4, c_KB_Edifice );
        AISetStock( player, 2, c_KB_Sanctum );

        if (tier >= c_ldPhaseLate) {
            AISetStock( player, 1, c_KB_Elysium );
            AISetStock( player, 1, c_KB_Pantheon );
            AISetStock( player, 5, c_KB_Reliquary );
            AISetStock( player, 2, c_KB_Foundry );
            AISetStock( player, 2, c_KB_Empyrean );
            AISetStock( player, 1, c_KB_Zenith );
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  KeironBasicDefenseStock
//--------------------------------------------------------------------------------------------------
void KeironBasicDefenseStock (int player) {
    if (!AINeedsDefending(player)) {
        return;
    }
    
    AISetStockFarms( player, c_KB_Edifice, c_stockNormalFarms);
    AIAddEmergencyDefenseStock(player, 8, c_KU_Volt, false);
    AISetStock( player, 1, c_KB_Formulator);
    AIAddEmergencyDefenseStock(player, 4, c_KU_Aurora, true);
    AIAddEmergencyDefenseStock(player, 4, c_KU_Umbra, true);
    AIAddEmergencyDefenseStock(player, 4, c_KU_Cataract, true);
    AIAddEmergencyDefenseStock(player, 20, c_KU_Converter, true);
  }