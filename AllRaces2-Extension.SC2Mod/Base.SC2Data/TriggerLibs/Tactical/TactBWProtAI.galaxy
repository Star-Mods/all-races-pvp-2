
//--------------------------------------------------------------------------------------------------
//  BW Protoss
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  *** ARBITER ***
//--------------------------------------------------------------------------------------------------

const int c_BWStasisCooldown = c_tactTimerFirst;

//Stasis
order BWStasis (int player, unit aiUnit, marker mark, marker gameMark, unitgroup scanGroup) {
    order ord;
    fixed energy;
    aifilter filter;
    bool groundAllies;
    unitgroup enemyGroup;
    point loc;
    
    if (!AITactCooldownAllow(aiUnit, c_BWStasisCooldown)) {
        return null;
    }

    ord = AICreateOrder(player, c_BWAB_ArbiterSCBWStasisField, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    //  Cast on strongest enemy that can attack our allies
    filter = AIFilter(player);
    AISetFilterBehaviorCount(filter, c_noBehaviorMin, c_noBehaviorMax, c_BWBF_ArbiterSCBWStasisField_AB);
    AISetFilterMarker(filter, c_noMarkersMin, c_noMarkersMax, gameMark);
    enemyGroup = AIGetFilterGroup(filter, scanGroup);

    loc = AIBestTargetPoint(
        AIEffectGroup(player, c_BWEF_ArbiterSCBWStasisField_Search, enemyGroup),
        5, // min hits
        30, // damage base
        3.5, // min score
        AIEffectFixed(player, c_BWEF_ArbiterSCBWStasisField_Search, c_fieldAreaRadius0),
        UnitGetPosition(aiUnit),
        AIUnitFixed(player, c_BWPU_Arbiter, c_fieldSightRange), 
        c_unitAttributeNone
    );
    if (loc == null) {
        return null;
    }
    OrderSetTargetPoint(ord, loc);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }
    return ord;
}

//--------------------------------------------------------------------------------------------------
void AIThinkArbiterSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    marker mark;
    marker gameMark;
    order ord;
    fixed cooldown;

    // Stasis Field
    gameMark = AIMarker(aiUnit, c_BWMK_ArbiterSCBWGameStasisField);
    mark = AIMarker(aiUnit, c_BWMK_ArbiterSCBWStasisField);
    ord = BWStasis(player, aiUnit, mark, gameMark, scanGroup);
    if (ord != null) {
        if (AIIsCampaign(player) && AIPlayerDifficulty(player) < c_campAdvanced) {
            cooldown = 20.0;
        }
        else {
            cooldown = 1.0;
        }
        AICastCooldown(aiUnit, ord, mark, c_castHold, c_BWStasisCooldown, cooldown);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** HIGH TEMPLAR ***
//--------------------------------------------------------------------------------------------------

const int c_BWPsiStormCooldown = c_tactTimerFirst;

//---------------------------------------------------------------------------------------------
bool BWMergeToSurvive (int player, unit aiUnit, unitgroup scanGroup) {
    // only called at low heatlh, try to find a nearby templar to merge with in order to survive
    order ord;
    unitgroup targetGroup;
    unit targetUnit;
    
    if (AIIsCampaign(player)) {
        return false;
    }
    
    // if we're not under attack, don't try to merge
    if (AILastAttack(aiUnit) < (AIGetTime() - 4.0)) {
        return false;
    }
    
    ord = AICreateOrder(player, c_BWAB_ArchonSCBWMerge, 1);
    targetGroup = UnitGroupSearch(c_BWPU_HighTemplar, player, UnitGetPosition(aiUnit), 5.0, UnitFilter((1 << c_targetFilterSelf), 0, 0, 0), c_noMaxCount);
    targetUnit =  OrderGetTargetUnit( AIUnitGroupGetValidOrder(targetGroup, ord, aiUnit, c_forwards) );
    if (targetUnit == null) {
        return false;
    }
    
    // can't use the normal AICast because both units need the order at the same time
    UnitIssueOrder(aiUnit, OrderTargetingUnit(AbilityCommand(c_BWAB_ArchonSCBWMerge, 1), targetUnit), c_orderQueueAddToEnd);
    UnitIssueOrder(targetUnit, OrderTargetingUnit(AbilityCommand(c_BWAB_ArchonSCBWMerge, 1), aiUnit), c_orderQueueAddToEnd);
    AISetUnitScriptControlled(aiUnit, false);
    AISetUnitScriptControlled(targetUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void AIThinkHighTemplarSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    marker mark;
    order ord;
    fixed cooldown;
    bool lowVitality;

    //Psionic Storm
    //AI can now use the Psi Storm in Campaign but requires additional changes
    if (AIPlayerDifficulty(player) >= c_campAdvanced) {
        if (AITactCooldownAllow(aiUnit, c_BWPsiStormCooldown)) {
            
            if (AIEvalTacticalData(aiUnit, null)) {        
                if (AIIsCampaign(player) && AIPlayerDifficulty(player) < c_campExpert) {
                    AISetCooldown(aiUnit, c_BWPsiStormCooldown, 5.0);
                }
                return;
            }
        }
    }

    if (AIIsCampaign(player)) {
        // not using hallucination or merge to survive in campaign
        return;
    }

    //  If we already have a psi storm order, ignore any new orders since psi storm is more important.
    if (UnitOrderHasAbil(aiUnit, c_BWAB_HighTemplarSCBWPsiStorm)) {
        return;
    }
    
    lowVitality = (UnitGetPropertyInt(aiUnit, c_unitPropVitalityPercent, c_unitPropCurrent) < c_HighTemplarLowVitPerc);

    if (lowVitality) {
        if (BWMergeToSurvive(player, aiUnit, scanGroup)) {
            return;
        }
    }
    
    //We're not using hallucination as it doesn't feel right while playing
    //Hallucination might be implemented at a later date
}

//--------------------------------------------------------------------------------------------------
//  *** CORSAIR ***
//--------------------------------------------------------------------------------------------------

const int c_BWDisruptionWebCooldown = c_tactTimerFirst;

//Disruption Web
order BWDisruptionWeb (int player, unit aiUnit, unitgroup scanGroup) {
    // target a clump of ranged ground units
    order ord;
    aifilter filter;
    unitgroup rangedGroup;
    point loc;

    ord = AICreateOrder(player, c_BWAB_CorsairSCBWDisruptionWeb, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }
    
    filter = AIFilter(player);
    AISetFilterMelee(filter, c_onlyRanged);
    AISetFilterPlane(filter, c_planeGround);
    AISetFilterBehaviorCount(filter, c_noBehaviorMin, c_noBehaviorMax, c_BWBF_CorsairSCBWDisruptionWeb_AB);
    rangedGroup = AIGetFilterGroup(filter, scanGroup);

    loc = AIBestTargetPoint(
        AIEffectGroup(player, c_BWEF_CorsairSCBWDisruptionWeb_Search, rangedGroup),
        5, // min hits
        10, // damage base
        4.5, // min score 
        AIEffectFixed(player, c_BWEF_CorsairSCBWDisruptionWeb_Search, c_fieldAreaRadius0),
        UnitGetPosition(aiUnit),
        AIAbilityFixed(player, c_BWAB_CorsairSCBWDisruptionWeb, c_fieldRange0)+3,
        c_unitAttributeNone
    );
    if (loc == null) {
        return null;
    }

    OrderSetTargetPoint(ord, loc);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    return ord;
}

//--------------------------------------------------------------------------------------------------
void AIThinkCorsairSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    fixed cooldown;

    //Cast Disruption Web
    ord = BWDisruptionWeb(player, aiUnit, scanGroup);
    if (ord != null) {
        if (AIIsCampaign(player) && AIPlayerDifficulty(player) < c_campExpert) {
            cooldown = 4.0;
        }
        else {
            cooldown = 1.0;
        }
        AICastCooldown(aiUnit, ord, c_noMarker, c_castHold, c_BWDisruptionWebCooldown, cooldown);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** DARK ARCHON ***
//--------------------------------------------------------------------------------------------------

//Feedback
const int c_maelstromCooldown = c_tactTimerSecond;
const int c_BWFeedbackMinDamageNormal = 100;
const int c_BWFeedbackMinDamageLowVitality = 50;
const fixed c_BWMindControlMinVitality = 125;

//---------------------------------------------------------------------------------------------
order BWFeedback (int player, unit aiUnit, unitgroup scanGroup, marker mark, bool lowVitality) {
    order ord;
    fixed damage;
    aifilter filter;
    int minEnergy;
    unitgroup targetGroup;

    ord = AICreateOrder(player, c_BWAB_DarkArchonSCBWFeedback, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    } 

    if (lowVitality) {
        minEnergy = c_BWFeedbackMinDamageLowVitality;
    }
    else {
        minEnergy = c_BWFeedbackMinDamageNormal;
    }

    filter = AIFilter(player);
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterBits(filter, UnitFilterStr(AIAbilityStr(player, c_BWAB_DarkArchonSCBWFeedback, c_fieldTargetFiltersAB)));
    AISetFilterRange(filter, aiUnit, AIAbilityFixed(player, c_BWAB_DarkArchonSCBWFeedback, c_fieldRange0) + 1);
    AISetFilterMarker(filter, c_noMarkersMin, c_noMarkersMax, mark);
    AISetFilterEnergy(filter, minEnergy, c_noMax);

    //  Pick a valid target
    targetGroup = AIGetFilterGroup(filter, scanGroup);
    if (targetGroup == null) {
        return null;
    }

    return AIUnitGroupGetValidOrder(targetGroup, ord, aiUnit, c_forwards);
}

//---------------------------------------------------------------------------------------------
order BWMindControl (int player, unit aiUnit, unitgroup scanGroup, marker mark, bool lowVitality) {
    order ord;
    aifilter filter;
    unit target;
    unitgroup targetGroup;
    //  vars related to nearby enemies.
    aifilter groundAirFilter;
    unitgroup threatGroup;
    int enemyGroundCount;
    int enemyAirCount;
    
    //  Create order and check validity
    //
    ord = AICreateOrder(player, c_BWAB_DarkArchonSCBWMindControl, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    //  Scan for enemy air and ground units
    //
    enemyGroundCount = 0;
    enemyAirCount = 0;

    groundAirFilter = AIFilter(player);
    AISetFilterAlliance(groundAirFilter, c_playerGroupEnemy);
    AISetFilterPlane(groundAirFilter, c_planeGround);
    enemyGroundCount = UnitGroupCount(AIGetFilterGroup(groundAirFilter, scanGroup), c_unitCountAlive);

    AISetFilterPlane(groundAirFilter, c_planeAir);
    enemyAirCount = UnitGroupCount(AIGetFilterGroup(groundAirFilter, scanGroup), c_unitCountAlive);

    //  Apply filters to enemies
    //
    filter = AIFilter(player);
    AISetFilterAlliance(filter, c_playerGroupEnemy);
    AISetFilterBits(filter, UnitFilterStr(AIAbilityStr(player, c_BWAB_DarkArchonSCBWMindControl, c_fieldTargetFiltersAB)));
    AISetFilterRange(filter, aiUnit, AIAbilityFixed(player, c_BWAB_DarkArchonSCBWMindControl, c_fieldRange0) + 1);
    AISetFilterLife(filter, c_BWMindControlMinVitality, c_noMax);
    AISetFilterMarker(filter, c_noMarkersMin, c_noMarkersMax, mark);
    //AISetFilterCanAttackEnemy(filter, enemyGroundCount, enemyAirCount);
    targetGroup = AIGetFilterGroup(filter, scanGroup);
    if (targetGroup == null) {
        return null;
    }

    //  Return valid target
    //
    return AIUnitGroupGetValidOrder(targetGroup, ord, aiUnit, c_forwards);
}

//---------------------------------------------------------------------------------------------
order BWMaelstrom (int player, unit aiUnit, marker mark, unitgroup scanGroup) {
    order ord;
    fixed energy;
    aifilter filter;
    bool groundAllies;
    unitgroup enemyGroup;
    point loc;
    
    if (!AITactCooldownAllow(aiUnit, c_maelstromCooldown)) {
        return null;
    }

    ord = AICreateOrder(player, c_BWAB_DarkArchonSCBWMaelstrom, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }

    //  Cast on strongest enemy that can attack our allies
    filter = AIFilter(player);
    AISetFilterBehaviorCount(filter, c_noBehaviorMin, c_noBehaviorMax, c_BWBF_DarkArchonSCBWMaelstrom_AB);
    AISetFilterMarker(filter, c_noMarkersMin, c_noMarkersMax, mark);
    enemyGroup = AIGetFilterGroup(filter, scanGroup);

    loc = AIBestTargetPoint(
        AIEffectGroup(player, c_BWEF_DarkArchonSCBWMaelstrom_Search, enemyGroup),
        5, // min hits
        30, // damage base
        3.5, // min score
        AIEffectFixed(player, c_BWEF_DarkArchonSCBWMaelstrom_Search, c_fieldAreaRadius0),
        UnitGetPosition(aiUnit),
        AIUnitFixed(player, c_BWPU_DarkArchon, c_fieldSightRange), 
        c_unitAttributeBiological
    );
    if (loc == null) {
        return null;
    }
    OrderSetTargetPoint(ord, loc);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return null;
    }
    return ord;
}

void AIThinkDarkArchonSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    marker mark;
    order ord;
    bool lowVitality;
    unitfilter f;
    region r;
    unitgroup enemyGroup;
    fixed cooldown;

    lowVitality = (UnitGetPropertyInt(aiUnit, c_unitPropVitalityPercent, c_unitPropCurrent) < c_HighTemplarLowVitPerc);

    // feedback
    mark = AIMarker(aiUnit, c_BWMK_DarkArchonSCBWFeedback);
    ord = BWFeedback(player, aiUnit, scanGroup, mark, lowVitality);
    if (ord != null) {
        AICast(aiUnit, ord, mark, c_castRetreat);
        return;
    }
    
    //Maelstrom
    mark = AIMarker(aiUnit, c_BWMK_DarkArchonSCBWMaelstrom);
    ord = BWMaelstrom(player, aiUnit, mark, scanGroup);
    if (ord != null) {
        if (AIIsCampaign(player) && AIPlayerDifficulty(player) < c_campAdvanced) {
            cooldown = 15.0;
        }
        else {
            cooldown = 2.0;
        }
        AICastCooldown(aiUnit, ord, mark, c_castHold, c_maelstromCooldown, cooldown);
        return;
    }


    // mind control
    mark = AIMarker(aiUnit, c_BWMK_DarkArchonSCBWMindControl);
    ord = BWMindControl(player, aiUnit, scanGroup, mark, lowVitality);
    if (ord != null) {
        AICast(aiUnit, ord, mark, c_castRetreat);
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** CARRIER ***
//--------------------------------------------------------------------------------------------------
void AIThinkCarrierSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Hangar
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** REAVER ***
//--------------------------------------------------------------------------------------------------
void AIThinkReaverSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Hangar
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** NEXUS ***
//--------------------------------------------------------------------------------------------------

void AIThinkNexusSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Rally
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** GATEWAY ***
//--------------------------------------------------------------------------------------------------
void AIThinkGatewaySCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Rally
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** ROBOTICS FACILITY ***
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
void AIThinkRoboticsFacilitySCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Rally
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  *** STARGATE ***
//--------------------------------------------------------------------------------------------------
void AIThinkStargateSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    //Rally
    if (AIEvalTacticalData(aiUnit, null)) {
        return;
    }
}

//--------------------------------------------------------------------------------------------------
//  BW Protoss Upgrade Buildings (Melee)
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  *** FORGE ***
//--------------------------------------------------------------------------------------------------
void AIThinkForgeSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    int groundUnitCount;
    int totalUnitCount;

    if(AIIsCampaign(player)) {
        return;
    }

    // Counts all Combatant Ground Units
    groundUnitCount = 
    TechTreeUnitCount(player, c_BWPU_Zealot, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Dragoon, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_DarkTemplar, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Archon, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Reaver, c_techCountQueuedOrBetter);

    // Counts all Protoss Units Air or Ground
    totalUnitCount = 
    groundUnitCount +
    TechTreeUnitCount(player, c_BWPU_Arbiter, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Scout, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Corsair, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Carrier, c_techCountQueuedOrBetter);


    //Tier 1 Ground Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundWeaponsSCBW_Lvl1, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundWeaponsSCBW, 0);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 4) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 1 Ground Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundArmorsSCBW_Lvl1, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundArmorsSCBW, 0);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 4) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 1 Shields
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossShieldsSCBW_Lvl1, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossShieldsSCBW, 0);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (totalUnitCount >= 5) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 2 Ground Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundWeaponsSCBW_Lvl2, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundWeaponsSCBW, 1);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 6) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 2 Ground Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundArmorsSCBW_Lvl2, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundArmorsSCBW, 1);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 6) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 2 Shields
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossShieldsSCBW_Lvl2, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossShieldsSCBW, 1);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (totalUnitCount >= 7) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 3 Ground Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundWeaponsSCBW_Lvl3, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundWeaponsSCBW, 2);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 8) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 3 Ground Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossGroundArmorsSCBW_Lvl3, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossGroundArmorsSCBW, 2);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (groundUnitCount >= 8) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 3 Shields
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossShieldsSCBW_Lvl3, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossShieldsSCBW, 2);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (totalUnitCount >= 8) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }
}

//--------------------------------------------------------------------------------------------------
//  *** CYBERNETICS CORE ***
//--------------------------------------------------------------------------------------------------
void AIThinkCyberneticsCoreSCBW (int player, unit aiUnit, unitgroup scanGroup) {
    order ord;
    int airUnitCount;
    int totalUnitCount;

    if(AIIsCampaign(player)) {
        return;
    }

    // Counts all Combatant Air Units
    airUnitCount = 
    TechTreeUnitCount(player, c_BWPU_Scout, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Corsair, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Arbiter, c_techCountQueuedOrBetter)+
    TechTreeUnitCount(player, c_BWPU_Carrier, c_techCountQueuedOrBetter);

    //Tier 1 Air Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirWeaponsSCBW_Lvl1, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirWeaponsSCBW, 0);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 4) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 1 Air Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirArmorsSCBW_Lvl1, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirArmorsSCBW, 0);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 4) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 2 Air Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirWeaponsSCBW_Lvl2, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirWeaponsSCBW, 1);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 5) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 2 Air Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirArmorsSCBW_Lvl2, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirArmorsSCBW, 1);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 5) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 3 Air Weapons
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirWeaponsSCBW_Lvl3, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirWeaponsSCBW, 2);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 6) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }

    //Tier 3 Air Armors
    if(TechTreeUpgradeCount(player, c_BWPR_ProtossAirArmorsSCBW_Lvl3, c_techCountQueuedOrBetter) == 0) {
        ord = AICreateOrder(player, c_BWPR_ProtossAirArmorsSCBW, 2);

        if (UnitOrderIsValid(aiUnit, ord)) {
            Wait(1.0, c_timeAI);
            if (airUnitCount >= 6) {
                if (UnitQueueItemTime(aiUnit,c_unitQueueTimeRemaining, 1) <= 0) {
                    AICast(aiUnit, ord, c_noMarker, c_castHold);
                }
            }
        }
    }
}
