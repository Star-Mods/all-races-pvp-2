//==================================================================================================
// 
// Generated Map Script
// 
// Name:   ALL RACES PVP 2 Unit Tester
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library: Tester
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge__UnitDataType_Actor = 0;
const int lib1_ge__UnitDataType_TextTag = 1;
const int lib1_ge__UnitDataType_Point = 2;
const int lib1_ge__UnitDataType_Ping = 3;
const int lib1_ge_SearchMode_Units = 0;
const int lib1_ge_SearchMode_Agressive = 1;
const int lib1_ge_SearchMode_Detection = 2;
const int lib1_ge_SearchMode_Ability = 3;
const int lib1_ge_MonobattleUnitGroup_Disabled = 0;
const int lib1_ge_MonobattleUnitGroup_Pacific = 1;
const int lib1_ge_MonobattleUnitGroup_Danger = 2;
const int lib1_ge_UT_Camera_Keys_Q = 0;
const int lib1_ge_UT_Camera_Keys_W = 1;
const int lib1_ge_UT_Camera_Keys_E = 2;
const int lib1_ge_UT_Camera_Keys_A = 3;
const int lib1_ge_UT_Camera_Keys_S = 4;
const int lib1_ge_UT_Camera_Keys_D = 5;
const int lib1_ge_UT_DevCommandTypes_Visual = 0;
const int lib1_ge_UT_DevCommandTypes_Gamealtering = 1;
const int lib1_ge_UT_DevCommandTypes_No = 2;

// Constants
const int lib1_gv_c_PINGMAXCOUNT = 3;
const fixed lib1_gv_c_PINGRESETTIME = 2.0;
const fixed lib1_gv_c_PINGSUPPRESSIONTIME = 0.25;
const fixed lib1_gv_c_PINGLOCKOUTTIME = 5.0;
const string lib1_gv_starCraftEventsEventTable = "SCEvent_Events";
const int lib1_gv_cAbilityArmMagazine = 5;
const int lib1_gv_cAbilityAttack = 6;
const int lib1_gv_cAbilityAugment = 7;
const int lib1_gv_cAbilityBehavior = 11;
const int lib1_gv_cAbilityBuild = 12;
const int lib1_gv_cAbilityBuildable = 13;
const int lib1_gv_cAbilityEffectInstant = 14;
const int lib1_gv_cAbilityEffectTarget = 15;
const int lib1_gv_cAbilityMerge = 20;
const int lib1_gv_cAbilityMergable = 21;
const int lib1_gv_cAbilityMorph = 22;
const int lib1_gv_cAbilityMove = 24;
const int lib1_gv_cAbilityQueue = 26;
const int lib1_gv_cAbilityRally = 27;
const int lib1_gv_cAbilityStop = 33;
const int lib1_gv_cAbilityTrain = 34;
const int lib1_gv_cAbilityTransport = 35;
const int lib1_gv_cEffectApplyBehavior = 6;
const int lib1_gv_cEffectCreateHealer = 10;
const int lib1_gv_cEffectCreatePersistent = 12;
const int lib1_gv_cEffectCreateUnit = 14;
const int lib1_gv_cEffectDamage = 15;
const int lib1_gv_cEffectSearchArea = 18;
const int lib1_gv_cEffectIssueOrder = 25;
const int lib1_gv_cEffectLaunchMissile = 26;
const int lib1_gv_cEffectModifyUnit = 28;
const int lib1_gv_cEffectSet = 35;
const int lib1_gv_cEffectSwitch = 36;
const int lib1_gv_cEffectTeleport = 37;
const int lib1_gv_cValidatorCombine = 1;
const int lib1_gv_cValidatorPlayerReqirement = 30;
const int lib1_gv_cRequirementEq = 5;
const int lib1_gv_cRequirementOr = 8;
const int lib1_gv_cRequirementGTE = 3;
const int lib1_gv_cRequirementGT = 1;
const int lib1_gv_cBehaviorBuff = 4;
const int lib1_gv_cBehaviorCreep = 7;
const int lib1_gv_cBehaviorSpawn = 13;
const int lib1_gv_cONST_CACHE_SIZE = 1000;
const int lib1_gv_pLAYERS = 15;
const int lib1_gv_uT_HotkeyStoreLength = 10;
const int lib1_gv_uT_TextTagPositionNormal = 6;
const int lib1_gv_uT_TextTagPositionHidden = 7;
const int lib1_gv_uT_MAXEMOTES = 50;
const int lib1_gv_uT_DummyCustomValue = 35;
const int lib1_gv_uT_DPS_MaxUnits = 100;
const int lib1_gv_uT_DPS_CustomValueIndex = 34;
const int lib1_gv_uT_DL_MaxUnits = 50;
const string lib1_gv_uNITTESTERINITIALIZED = "UNIT TESTER INITIALIZED";
const int lib1_gv_tMAXFACTIONS = 90;
const int lib1_gv_const_players = 8;
const int lib1_gv_const_races = 8;
const int lib1_gv_const_card_length = 27;
const int lib1_gv_mAX_FIGHTER_PLAYERS = 2;
const int lib1_gv_placementCardRows = 3;
const int lib1_gv_placementCardColumns = 7;
const int lib1_gv_const_terrains = 9;

// Structures
struct lib1_gs_AutoRevealerData {
    revealer[64] lv_revealers;
    region[64] lv_triggeringRegions;
    int[64] lv_triggeringPlayers;
    int lv_count;
};

struct lib1_gs_UT_DL_DamageFormat {
    fixed lv_real;
    int lv_integer;
    string lv_unitType;
};

struct lib1_gs_DATA_PLAYER {
    bool lv_shift;
    bool lv_ctrl;
    bool[2] lv_player_access;
    bool lv_creator_access;
    int lv_menu_mode;
    int lv_creator_side;
    int[2] lv_creator_race;
    int[2] lv_creator_tech;
    revealer lv_revealer;
};

struct lib1_gs_DATA_TERRAIN {
    region lv_region;
    point[3] lv_spawnPoints;
};

struct lib1_gs_DATA_UNIT {
    string lv_unit;
    string lv_icon;
    text lv_tooltip;
};

struct lib1_gs_DATA_UPGRADE {
    string[5] lv_upgrade;
    string[5] lv_icon;
    text[5] lv_tooltip;
    int lv_levels;
};

// Variable Declarations
bool[16] lib1_gv_unitTransmissionActive;
sound lib1_gv_soundLinkAsMusic;
int lib1_gv_soundLinkAsMusicCurrentlyPlaying;
bool lib1_gv_soundLinkAsMusicLoopForever;
timer[17] lib1_gv_pingResetTimer;
timer[17] lib1_gv_pingSuppressionTimer;
timer[17] lib1_gv_pingLockoutTimer;
int[17] lib1_gv_pingRecentCount;
playergroup lib1_gv_pingValidPlayers;
int lib1_gv_pingPanelMinimapButton;
playergroup lib1_gv_meleeSurrender_PlayersSurrendering;
playergroup[17] lib1_gv_meleeSurrender_PlayersAnswered;
playergroup lib1_gv_meleeSurrender_PlayersTried;
int[33] lib1_gv_meleeSurrender_Dialog;
int[33] lib1_gv_meleeSurrender_BtnYes;
int[33] lib1_gv_meleeSurrender_BtnNo;
int[33] lib1_gv_meleeSurrender_Title;
int lib1_gv_meleeSurrender_FlashingPlayer;
unit lib1_gv_transportUnit_Param;
point lib1_gv_transportTargetPoint_Param;
point lib1_gv_transportDespawnPoint_Param;
lib1_gs_AutoRevealerData lib1_gv_autoRevealers;
int lib1_gv_cRequirementAnd;
int lib1_gv_cRequirementCountUnit;
int lib1_gv_cRequirementCountUpgrade;
string lib1_gv_byPassUnits;
abilcmd lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND;
int lib1_gv_sEARCHMODE;
int lib1_gv_cACHE_TMPEFFECTS_SIZE;
string[1001] lib1_gv_cACHE_TMPEFFECTS;
int lib1_gv_cACHESIZE_WEAPONS;
int lib1_gv_cACHESIZE_UPGRADES;
int lib1_gv_cACHESIZE_EFFECTS;
int lib1_gv_cACHESIZE_BEHAVIORS;
int lib1_gv_cACHESIZE_ABILITIES;
int lib1_gv_cACHESIZE_UNITS;
int lib1_gv_cACHESIZE_REQUIREMENT;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_WEAPONS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_REQUIREMENT;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_UPGRADES;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_BEHAVIORS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_EFFECTS;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_ABILITIES;
string[lib1_gv_cONST_CACHE_SIZE + 1] lib1_gv_cACHE_UNITS;
string lib1_gv_cACHE_DANGER_UNITS;
string lib1_gv_cACHE_DANGER_ABILITIES;
string lib1_gv_cACHE_DANGER_BEHAVIOR;
string lib1_gv_cACHE_SAFE_UNITS;
string lib1_gv_cACHE_SAFE_ABILITIES;
string lib1_gv_cACHE_SAFE_BEHAVIOR;
playergroup lib1_gv_startactiveplayers;
string[lib1_gv_pLAYERS + 1] lib1_gv_unitSelection;
string[lib1_gv_pLAYERS + 1] lib1_gv_mBRules;
playergroup[16] lib1_gv_teams;
int lib1_gv_utilityPlayer;
int lib1_gv_uT_InfoDialog;
int lib1_gv_uT_InfoButton;
playergroup lib1_gv_uT_UI_Hidden;
playergroup lib1_gv_uT_ButtonUsagePlayerGroup;
string[lib1_gv_uT_HotkeyStoreLength + 1][3] lib1_gv_uT_HotkeyToStoreButton;
string[lib1_gv_uT_HotkeyStoreLength + 1][3] lib1_gv_uT_HotkeyToStoreValue;
bool lib1_gv_uT_GodMode;
bool lib1_gv_uT_FastBuildCheat;
bool lib1_gv_uT_EconomyTest;
string[lib1_gv_uT_MAXEMOTES + 1] lib1_gv_uT_SC_Emoticons;
string[lib1_gv_uT_MAXEMOTES + 1] lib1_gv_uT_CS_Emoticons;
int lib1_gv_uT_Emote_Dialog;
int lib1_gv_uT_Emote_CloseButton;
timer lib1_gv_uT_SoundEmoteTimer;
fixed lib1_gv_uT_SoundEmoteCooldownLength;
int lib1_gv_uT_LighIndex;
int lib1_gv_mIssilePlayer;
unitgroup lib1_gv_uT_MissileCreators;
bool lib1_gv_uT_Camera_CameraActive;
bool[7][3] lib1_gv_uT_Camera_ActiveKeys;
fixed[3] lib1_gv_uT_Camera_Rotation;
fixed[3] lib1_gv_uT_Camera_AngleofAttack;
unit[21] lib1_gv_uT_DummyUnits;
unitgroup lib1_gv_uT_Dummies;
fixed[21][2] lib1_gv_uT_DummyDamage;
timer[21][2] lib1_gv_uT_DummyTimer;
unitgroup lib1_gv_uT_DPS_UG;
unitgroup lib1_gv_uT_DPS_UG_Summoned;
unit[lib1_gv_uT_DPS_MaxUnits + 1] lib1_gv_uT_DPS_Units;
fixed[lib1_gv_uT_DPS_MaxUnits + 1][3] lib1_gv_uT_DPS_Damage;
timer[lib1_gv_uT_DPS_MaxUnits + 1][3] lib1_gv_uT_DPS_Timer;
fixed[lib1_gv_uT_DPS_MaxUnits + 1] lib1_gv_uT_DPS_Avg;
revealer lib1_gv_uT_Revealer;
bool lib1_gv_uT_Revealed;
playergroup lib1_gv_uT_PlayersWithNumbers;
playergroup lib1_gv_uT_DL_LoggingPlayers;
int lib1_gv_uT_DL_LogDialog;
int lib1_gv_uT_DL_LogDialogItem;
int[3] lib1_gv_uT_DL_PlayerData;
lib1_gs_UT_DL_DamageFormat[lib1_gv_uT_DL_MaxUnits + 1][2][3] lib1_gv_uT_DL_Data;
int[21] lib1_gv_uT_DevCommands;
bool lib1_gv_uT_CheatUsed;
int[16] lib1_gv_cU_MinimapAllyViewPing;
bool lib1_gv_cU_MinimapAllyViewEnabled;
int lib1_gv_pointsListsCreated;
int lib1_gv_routesListsCreated;
point[16] lib1_gv_playerStartPosition;
string[lib1_gv_pLAYERS + 1] lib1_gv_cACHE_DISARMED;
string[lib1_gv_pLAYERS + 1] lib1_gv_cACHE_ARMED;
string lib1_gv_listTypes;
string lib1_gv_lOG;
lib1_gs_DATA_PLAYER[lib1_gv_const_players + 1] lib1_gv_data_player;
lib1_gs_DATA_TERRAIN[lib1_gv_const_terrains + 1] lib1_gv_data_terrain;
lib1_gs_DATA_TERRAIN lib1_gv_terrain;
lib1_gs_DATA_UNIT[lib1_gv_tMAXFACTIONS + 1][lib1_gv_const_card_length + 1] lib1_gv_data_unit;
lib1_gs_DATA_UPGRADE[lib1_gv_tMAXFACTIONS + 1][lib1_gv_const_card_length + 1] lib1_gv_data_upgrade;
int[2] lib1_gv_side_player;
int lib1_gv_tester_menu;
int lib1_gv_tester_panel;
int lib1_gv_creator_panel;
unit[16] lib1_gv_creatorUnit;
int[lib1_gv_const_players + 1] lib1_gv_chosenSide;
string lib1_gv_unitMorphs;
string lib1_gv_levelUpgrades;
string lib1_gv_levelUpgradesList;
int lib1_gv_menu_mode_settings;
int lib1_gv_menu_mode_creator;
int lib1_gv_menu_creator_panel;
int lib1_gv_menu_creator_mirror;
int lib1_gv_menu_creator_clear;
int lib1_gv_menu_attack_panel;
int lib1_gv_menu_attack_pause;
int lib1_gv_menu_attack_reset;
int lib1_gv_menu_start_attack;
int lib1_gv_menu_stop_attack;
int lib1_gv_menu_attack_attack;
int lib1_gv_menu_side;
bool lib1_gv_attack_mode;
bool lib1_gv_vision;
bool lib1_gv_pause;
timer lib1_gv_test_timer;
int lib1_gv_test_timer_window;
int lib1_gv_settings_panel;
int[4] lib1_gv_settings_upgradebutton;
int[2] lib1_gv_settings_researchbutton;
int[2] lib1_gv_settings_visionbutton;
int[lib1_gv_const_terrains + 1] lib1_gv_settings_terrainbutton;
int[lib1_gv_const_players + 1] lib1_gv_settings_allianceplayerlabel;
int[lib1_gv_const_players + 1][3] lib1_gv_settings_alliancebuttons;
string lib1_gv_factions;
string[lib1_gv_mAX_FIGHTER_PLAYERS + 1] lib1_gv_creator_selectedRace;
int[lib1_gv_tMAXFACTIONS + 1] lib1_gv_creator_racebutton;
int[lib1_gv_tMAXFACTIONS + 1] lib1_gv_creator_raceface;
int[4] lib1_gv_placementCardOffset;
int[3] lib1_gv_creator_bottomButton;
int[3] lib1_gv_creator_upButton;
int[3][lib1_gv_const_card_length + 1] lib1_gv_creator_itembutton;
string[3][lib1_gv_const_card_length + 1] lib1_gv_creator_itemunit;
int[3][lib1_gv_const_card_length + 1] lib1_gv_creator_itemface;
int lib1_gv_leaderboard;
int[3] lib1_gv_leaderboard_minerals;
int[3] lib1_gv_leaderboard_gas;
int lib1_gv_leaderboard_rows;
bool[3][22] lib1_gv_leaderboard_icon_flag;
int lib1_gv_terrain_index;
string lib1_gv_map_structure_storage;
string[3] lib1_gv_unit_storage;

// Function Declarations
playergroup lib1_gf_HumanControllingPlayers (int lp_player);
playergroup lib1_gf_HumanPlayers ();
void lib1_gf_PlayUnitTransmission (string lp_transmission, unit lp_unit);
int lib1_gf_DifficultyValueInt2 (int lp_casual, int lp_normal, int lp_hard, int lp_brutal);
fixed lib1_gf_DifficultyValueFixed2 (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal);
string lib1_gf_DifficultyValueVoidUnitType (string lp_casual, string lp_normal, string lp_hard, string lp_brutal);
bool lib1_gf_DifficultyValueVoidBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal);
int lib1_gf_DifficultyValueInt3 (int lp_easy, int lp_normal, int lp_hard);
fixed lib1_gf_DifficultyValueFixed3 (fixed lp_easy, fixed lp_normal, fixed lp_hard);
string lib1_gf_DifficultyValueSwarmUnitType (string lp_easy, string lp_normal, string lp_hard);
bool lib1_gf_DifficultyValueSwarmBoolean (bool lp_easy, bool lp_normal, bool lp_hard);
void lib1_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter);
void lib1_gf_StopSoundLinkCurrentlyPlayingasMusic ();
string lib1_gf__UnitDataName2 (int lp_type, unit lp_unit, int lp_index);
void lib1_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor);
actor lib1_gf_ActorForUnit (unit lp_unit, int lp_index);
void lib1_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point);
point lib1_gf_PointStoredForUnit (unit lp_unit, int lp_index);
void lib1_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping);
int lib1_gf_PingStoredForUnit (unit lp_unit, int lp_index);
void lib1_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag);
int lib1_gf_TextTagForUnit (unit lp_unit, int lp_index);
void lib1_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner);
void lib1_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser);
void lib1_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player);
void lib1_gf_PingMinimapButtonUpdate ();
void lib1_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players);
void lib1_gf_MeleeSurrender_AIWantToSurrender (int lp_player);
void lib1_gf_MeleeSurrender_UpdateDialogs ();
point lib1_gf_ValidatedPoint (point lp_point);
void lib1_gf_PlayAnnouncerNumberSound (int lp_number, playergroup lp_players, fixed lp_volume);
void lib1_gf_PlayTransmissionCueSound (playergroup lp_playerGroup);
void lib1_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players);
void lib1_gf_OrderWorkerstoGatherNearbyResources (region lp_region, int lp_player);
void lib1_gf_OrderTransporttoUnloadAllthenDespawn (unit lp_transport, point lp_targetPoint, point lp_despawnPoint);
void lib1_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player);
bool lib1_gf_FilterEnemyisExcluded (string lp_filter);
void lib1_gf_ClearCache ();
void lib1_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan);
void lib1_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command);
void lib1_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan);
void lib1_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan);
void lib1_gf_CacheWeapon (int lp_player, string lp_weapon);
void lib1_gf_CacheBehavior (int lp_player, string lp_behavior);
void lib1_gf_CacheEffect (int lp_player, string lp_effect);
void lib1_gf_CacheValidator (int lp_player, string lp_validator);
void lib1_gf_CacheRequirement (int lp_player, string lp_requirement);
void lib1_gf_CacheRequirementNode (int lp_player, string lp_requirementNode);
bool lib1_gf_ByPassBehavior (int lp_player, string lp_behavior);
bool lib1_gf_ByPassEffect (int lp_player, string lp_effect);
bool lib1_gf_ByPassAbility (int lp_player, string lp_ability);
bool lib1_gf_UpgradeIsUsefulForPlayer (int lp_player, string lp_upgrade);
string lib1_gf_GetUpgradeRace (string lp_upgrade);
bool lib1_gf_UnitIsDanger (int lp_player, string lp_unit);
bool lib1_gf_UnitisDetector (int lp_player, string lp_unitType);
bool lib1_gf_AbilityIsDanger (int lp_player, string lp_ability);
bool lib1_gf_AbilityIsDetector (int lp_player, string lp_ability);
bool lib1_gf_BehaviorisDanger (int lp_player, string lp_behavior);
bool lib1_gf_BehaviorisDetector (int lp_player, string lp_behavior);
bool lib1_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil);
bool lib1_gf_Canbebuilton (unit lp_unit, point lp_point);
bool lib1_gf_Canbebuiltonabranch (point lp_point, int lp_number);
void lib1_gf_ResolveUnitAffectedUpgrades (int lp_player);
bool lib1_gf_AbilityIsIgnored (int lp_player, string lp_ability);
text lib1_gf_UTC_NameOfUnitType (string lp_pUnitType);
string lib1_gf_UT_StageToString (int lp_pStage);
void lib1_gf_UT_Rise (unit lp_pUnit);
string lib1_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator);
int lib1_gf_UT_SingleHexToInt (string lp_pString);
void lib1_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers);
int lib1_gf_UT_1StringToInteger (string lp_pLetter);
int lib1_gf_UT_3StringsToInteger (string lp_pString);
string lib1_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision);
text lib1_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber);
string lib1_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol);
text lib1_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds);
color lib1_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps);
color lib1_gf_UT_HexToColor (string lp_pString);
int lib1_gf_UT_HexToInt (string lp_pString);
color lib1_gf_UT_NewColor (int lp_pColorNumber);
playergroup lib1_gf_GetTeamPlayers (int lp_team);
int lib1_gf_GetPlayerTeam (int lp_player);
playergroup lib1_gf_PlayersofRace (string lp_race);
void lib1_gf_ShowUI (playergroup lp_players);
void lib1_gf_HideUI (playergroup lp_players);
bool lib1_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer);
void lib1_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer);
void lib1_gf_UT_UpdateUnitInfo (unit lp_pUnit);
void lib1_gf_UT_RemoveUnitInfo (unit lp_pUnit);
void lib1_gf_EnableFastBuild (int lp_player);
void lib1_gf_DisableFastBuild (int lp_player);
void lib1_gf_UT_PostStringWithIcons (string lp_pString);
void lib1_gf_UT_Init_Emoticons ();
string lib1_gf_UT_ReplaceEmotes (string lp_pString);
void lib1_gf_UT_DL_DialogCreate ();
void lib1_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow);
void lib1_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount);
int lib1_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer);
void lib1_gf_UT_DL_LogClear (int lp_pPlayer);
void lib1_gf_SetCommandsLevelAllowedForPlayer (int lp_player, int lp_level);
bool lib1_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer);
void lib1_gf_UT_Cheat ();
int lib1_gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players);
void lib1_gf_CU_MinimapAllyViewInit ();
void lib1_gf_ToggleAllyMinimapFrustrum (bool lp_enabled);
point lib1_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales);
point lib1_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint);
string lib1_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision);
point lib1_gf_GetPoint (string lp_suffix, int lp_route);
string lib1_gf_PointsSingle (string lp_suffix, int lp_index1);
string lib1_gf_PointsSinglePoint (point lp_point);
string lib1_gf_PointsRange (string lp_suffix, int lp_index1, int lp_index2);
string lib1_gf_PointsAll (string lp_suffix);
string lib1_gf_PointsString (string lp_suffix, string lp_spawns);
string lib1_gf_Points (string lp_spawns);
string lib1_gf_GetRoute (string lp_suffix, int lp_routeIndex);
string lib1_gf_RoutesSingle (string lp_suffix, int lp_index);
string lib1_gf_RoutesRange (string lp_suffix, int lp_index1, int lp_index2);
string lib1_gf_RoutesAll (string lp_suffix);
string lib1_gf_RoutesString (string lp_suffix, string lp_spawns);
string lib1_gf_Routes (string lp_spawns);
point lib1_gf_GetPlayerStartPosition (int lp_player);
void lib1_gf_AddRegionByNameIfExists (region lp_sourceRegion, string lp_targetRegionName);
void lib1_gf_AddRegionIfExists (region lp_sourceRegion, region lp_targetRegion);
void lib1_gf_ClearArmedCache (int lp_player);
void lib1_gf_Armunit (int lp_player, unit lp_unit);
void lib1_gf_Disarmunit (int lp_player, unit lp_unit);
void lib1_gf_ArmUnitType (int lp_player, string lp_unit);
void lib1_gf_Disarmunittype (int lp_player, string lp_unit);
bool lib1_gf_UnitTypeisArmed (int lp_player, string lp_unit);
bool lib1_gf_UnitTypeisDisArmed (int lp_player, string lp_unit);
unitgroup lib1_gf_GetResourcesNearPoint (point lp_point, fixed lp_radius, int lp_type);
bool lib1_gf_CM_Resources_IsSaturated (unit lp_resourceNodeorTownHall);
void lib1_gf_CM_Resources_FindWork (unit lp_worker, unit lp_townHall, fixed lp_workRadius);
bool lib1_gf_UnitIsAntiAir (string lp_unit, int lp_player);
bool lib1_gf_UnitIsAir (string lp_unit, int lp_player);
unitgroup lib1_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region);
fixed lib1_gf_CombinedPropertyofUnitGroup (unitgroup lp_unitGroup, int lp_unitProperty, bool lp_currentDefault);
void lib1_gf_CopyBehaviorToMagazineAmmos (unit lp_unit, string lp_behavior);
bool lib1_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB);
string lib1_gf_GetUnitRace (unit lp_unit);
string lib1_gf_GetUnitRace2 (string lp_unit);
int lib1_gf_GetUnitCargoSize (unit lp_unit);
bool lib1_gf_StructureIsFlying (unit lp_unit);
unit lib1_gf_LowestVitalityUnitfromUnitGroup (unitgroup lp_canidates);
bool lib1_gf_AnyUnitOfPlayerGroupInRegion (playergroup lp_playergroup, region lp_region);
bool lib1_gf_AllUnitsFromUnitGroupInRegion (unitgroup lp_units, region lp_region);
string lib1_gf_GetCardLayoutButtonForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout);
abilcmd lib1_gf_GetCardLayoutAbilityCommandForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout);
bool lib1_gf_IIF13 (int lp_condition);
point lib1_gf_IIF7 (point lp_iF, point lp_eLSE);
region lib1_gf_IIF11 (region lp_iF, region lp_eLSE);
int lib1_gf_IIF8 (int lp_iF, int lp_eLSE);
string lib1_gf_IIF4 (string lp_iF, string lp_eLSE);
unit lib1_gf_IIF6 (unit lp_iF, unit lp_eLSE);
string lib1_gf_IIF5 (string lp_iF, string lp_iF2);
string lib1_gf_IIF12 (bool lp_condition, string lp_iF, string lp_iF2);
string lib1_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE);
string lib1_gf_IIF10 (int lp_condition, string lp_iF, string lp_eLSE);
int lib1_gf_IIF2 (bool lp_condition, int lp_iF, int lp_eLSE);
int lib1_gf_IIF9 (int lp_condition, int lp_iF, int lp_eLSE);
string lib1_gf_IIF3 (bool lp_condition, string lp_iF, string lp_eLSE);
string lib1_gf_ListGetType (string lp_list);
void lib1_gf_ListSetType (string lp_list, string lp_newType);
void lib1_gf_ListDestroy (string lp_list);
void lib1_gf_ListSort (string lp_sortableList, string lp_prriorityList);
void lib1_gf_ListCreate (string lp_list);
void lib1_gf_ListClear (string lp_list);
void lib1_gf_ListPopBack (string lp_list);
int lib1_gf_ListSize (string lp_list);
bool lib1_gf_ListIsEmpty (string lp_list);
string lib1_gf_ListGetDatabaseName (string lp_arrayName, int lp_index);
void lib1_gf_ListCreateIfNotExists (string lp_list);
bool lib1_gf_ListIsExist (string lp_list);
region lib1_gf_ListRegionGet (string lp_list, int lp_index);
int lib1_gf_ListRegionIndexOf (string lp_list, region lp_value);
bool lib1_gf_ListRegionIncludes (string lp_list, region lp_value);
void lib1_gf_ListRegionPush (string lp_list, region lp_value);
void lib1_gf_ListRegionSet (string lp_list, int lp_index, region lp_value);
void lib1_gf_ListRegionInclude (string lp_list, region lp_value);
void lib1_gf_ListRegionInsertAt (string lp_list, int lp_index, region lp_value);
void lib1_gf_ListRegionRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListRegionExclude (string lp_list, region lp_value);
void lib1_gf_MapRegionSet (string lp_unit, string lp_index, region lp_actor);
region lib1_gf_MapRegionGet (string lp_unit, string lp_index);
string lib1_gf_MapRegionIndexes (string lp_unit);
bool lib1_gf_MapRegionIncludes (string lp_unit, string lp_index);
void lib1_gf_MapRevealerSet (string lp_unit, string lp_index, revealer lp_actor);
revealer lib1_gf_MapRevealerGet (string lp_unit, string lp_index);
string lib1_gf_MapRevealerIndexes (string lp_unit);
bool lib1_gf_MapRevealerIncludes (string lp_unit, string lp_index);
string lib1_gf_MapPingIndexes (string lp_unit);
void lib1_gf_MapPingSet (string lp_unit, string lp_index, int lp_actor);
int lib1_gf_MapPingGet (string lp_unit, string lp_index);
bool lib1_gf_MapPingIncludes (string lp_unit, string lp_index);
void lib1_gf_MapActorSet (string lp_unit, string lp_index, actor lp_actor);
actor lib1_gf_MapActorGet (string lp_unit, string lp_index);
string lib1_gf_MapActorIndexes (string lp_unit);
bool lib1_gf_MapActorIncludes (string lp_unit, string lp_index);
void lib1_gf_MapUnitSet (string lp_map, string lp_index, unit lp_actor);
unit lib1_gf_MapUnitGet (string lp_map, string lp_index);
string lib1_gf_MapUnitIndexes (string lp_unit);
bool lib1_gf_MapUnitIncludes (string lp_unit, string lp_index);
unitgroup lib1_gf_ListUnitGroupGet (string lp_list, int lp_index);
int lib1_gf_ListUnitGroupIndexOf (string lp_list, unitgroup lp_value);
bool lib1_gf_ListUnitGroupIncludes (string lp_list, unitgroup lp_value);
void lib1_gf_ListUnitGroupPush (string lp_list, unitgroup lp_value);
void lib1_gf_ListUnitGroupSet (string lp_list, int lp_index, unitgroup lp_value);
void lib1_gf_ListUnitGroupInclude (string lp_list, unitgroup lp_value);
void lib1_gf_ListUnitGroupInsertAt (string lp_list, int lp_index, unitgroup lp_value);
void lib1_gf_ListUnitGroupRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListUnitGroupExclude (string lp_list, unitgroup lp_value);
void lib1_gf_MapUnitGroupSet (string lp_map, string lp_index, unitgroup lp_actor);
unitgroup lib1_gf_MapUnitGroupGet (string lp_map, string lp_index);
string lib1_gf_MapUnitGroupIndexes (string lp_unit);
bool lib1_gf_MapUnitGroupIncludes (string lp_unit, string lp_index);
void lib1_gf_MapTimerSet (string lp_map, string lp_index, timer lp_actor);
timer lib1_gf_MapTimerGet (string lp_map, string lp_index);
string lib1_gf_MapTimerIndexes (string lp_unit);
bool lib1_gf_MapTimerIncludes (string lp_unit, string lp_index);
void lib1_gf_MapTriggerSet (string lp_map, string lp_index, trigger lp_actor);
trigger lib1_gf_MapTriggerGet (string lp_map, string lp_index);
string lib1_gf_MapTriggerIndexes (string lp_unit);
bool lib1_gf_MapTriggerIncludes (string lp_unit, string lp_index);
void lib1_gf_MapObjectiveSet (string lp_map, string lp_index, int lp_actor);
int lib1_gf_MapObjectiveGet (string lp_map, string lp_index);
string lib1_gf_MapObjectiveIndexes (string lp_unit);
bool lib1_gf_MapObjectiveIncludes (string lp_unit, string lp_index);
void lib1_gf_MapTextSet (string lp_map, string lp_index, text lp_actor);
text lib1_gf_MapTextGet (string lp_map, string lp_index);
string lib1_gf_MapTextIndexes (string lp_unit);
bool lib1_gf_MapTextIncludes (string lp_unit, string lp_index);
fixed lib1_gf_ListRealGet (string lp_list, int lp_index);
int lib1_gf_ListRealIndexOf (string lp_list, fixed lp_value);
bool lib1_gf_ListRealIncludes (string lp_list, fixed lp_value);
void lib1_gf_ListRealSet (string lp_list, int lp_index, fixed lp_value);
void lib1_gf_ListRealPush (string lp_list, fixed lp_value);
void lib1_gf_ListRealInclude (string lp_list, fixed lp_value);
void lib1_gf_ListRealInsertAt (string lp_list, int lp_index, fixed lp_value);
void lib1_gf_ListRealRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListRealExclude (string lp_list, fixed lp_value);
void lib1_gf_MapRealSet (string lp_map, string lp_index, fixed lp_actor);
fixed lib1_gf_MapRealGet (string lp_map, string lp_index);
string lib1_gf_MapRealIndexes (string lp_unit);
bool lib1_gf_MapRealIncludes (string lp_unit, string lp_index);
void lib1_gf_ListIntCopy (string lp_source, string lp_target);
int lib1_gf_ListIntGet (string lp_list, int lp_index);
int lib1_gf_ListIntIndexOf (string lp_list, int lp_value);
bool lib1_gf_ListIntIncludes (string lp_list, int lp_value);
void lib1_gf_ListIntSet (string lp_list, int lp_index, int lp_value);
void lib1_gf_ListIntPush (string lp_list, int lp_value);
void lib1_gf_ListIntInclude (string lp_list, int lp_value);
void lib1_gf_ListIntInsertAt (string lp_list, int lp_index, int lp_value);
void lib1_gf_ListIntRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListIntExclude (string lp_list, int lp_value);
void lib1_gf_MapIntSet (string lp_map, string lp_index, int lp_actor);
int lib1_gf_MapIntGet (string lp_map, string lp_index);
string lib1_gf_MapIntIndexes (string lp_unit);
bool lib1_gf_MapIntIncludes (string lp_unit, string lp_index);
text lib1_gf_ListStringtoText (string lp_list);
void lib1_gf_ListStringCopy (string lp_source, string lp_target);
string lib1_gf_ListStringGet (string lp_list, int lp_index);
int lib1_gf_ListStringIndexOf (string lp_list, string lp_value);
bool lib1_gf_ListStringIncludes (string lp_list, string lp_value);
void lib1_gf_ListStringSet (string lp_list, int lp_index, string lp_value);
void lib1_gf_ListStringPush (string lp_list, string lp_addedValue);
void lib1_gf_ListStringInclude (string lp_list, string lp_addedValue);
void lib1_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value);
void lib1_gf_ListStringRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListStringExclude (string lp_list, string lp_value);
void lib1_gf_MapStringSet (string lp_map, string lp_index, string lp_actor);
void lib1_gf_MapStringUnset (string lp_map, string lp_index);
string lib1_gf_MapStringGet (string lp_map, string lp_index);
string lib1_gf_MapStringIndexes (string lp_unit);
bool lib1_gf_MapStringIncludes (string lp_unit, string lp_index);
abilcmd lib1_gf_ListAbilCmdGet (string lp_list, int lp_index);
int lib1_gf_ListAbilCmdIndexOf (string lp_list, abilcmd lp_value);
bool lib1_gf_ListAbilCmdIncludes (string lp_list, abilcmd lp_value);
void lib1_gf_ListAbilCmdSet (string lp_list, int lp_index, abilcmd lp_value);
void lib1_gf_ListAbilCmdPush (string lp_list, abilcmd lp_value);
void lib1_gf_ListAbilCmdInclude (string lp_list, abilcmd lp_value);
void lib1_gf_ListAbilCmdInsertAt (string lp_list, int lp_index, abilcmd lp_value);
void lib1_gf_ListAbilCmdRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListAbilCmdExclude (string lp_list, abilcmd lp_value);
point lib1_gf_ListPointGet (string lp_list, int lp_index);
int lib1_gf_ListPointIndexOf (string lp_list, point lp_value);
bool lib1_gf_ListPointIncludes (string lp_list, point lp_value);
void lib1_gf_ListPointSet (string lp_list, int lp_index, point lp_value);
void lib1_gf_ListPointPush (string lp_list, point lp_addedValue);
void lib1_gf_ListPointInclude (string lp_list, point lp_value);
void lib1_gf_ListPointInsertAt (string lp_list, int lp_index, point lp_value);
void lib1_gf_ListPointRemoveAt (string lp_list, int lp_index);
void lib1_gf_ListPointExclude (string lp_list, point lp_value);
void lib1_gf_MapPointSet (string lp_unit, string lp_index, point lp_actor);
point lib1_gf_MapPointGet (string lp_unit, string lp_index);
string lib1_gf_MapPointIndexes (string lp_unit);
bool lib1_gf_MapPointIncludes (string lp_unit, string lp_index);
void lib1_gf_LOGPoint (point lp_value);
void lib1_gf_LOGString (string lp_value);
void lib1_gf_LOGAbilCmd (abilcmd lp_lOG);
void lib1_gf_LOGInteger (int lp_lOG);
void lib1_gf_LOGUpgrade (string lp_lOG);
void lib1_gf_LOGUnit (string lp_lOG);
void lib1_gf_LOGUnitGroup (unitgroup lp_lOG);
void lib1_gf_LOGReal (fixed lp_lOG);
void lib1_gf_LOGTrigger (trigger lp_lOG);
void lib1_gf_LOGListInt (string lp_list);
void lib1_gf_LOGListString (string lp_list);
void lib1_gf_LOGListAbilCmd (string lp_list);
void lib1_gf_LOGListPoint (string lp_list);
void lib1_gf_PrepareUnitTesterFactions ();
void lib1_gf_ResetUnitSetup ();
void lib1_gf_SetupUnitTesterFactionSmartAllRaces (bool lp_addRestricted);
void lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace (string lp_race, int lp_player, bool lp_addRestricted);
void lib1_gf_SetupUnitTesterFactionAllUnitsSearch (string lp_search);
void lib1_gf_SetActors ();
string lib1_gf_GetFactionImage (string lp_faction);
text lib1_gf_GetFactionTooltip (string lp_faction);
void lib1_gf_ShowUnitTesterTips ();
void lib1_gf_MakeUnitTesterFactionsList ();
void lib1_gf_ActivateBuildAbility ();
void lib1_gf_MakeUnitTesterPlacementCard ();
void lib1_gf_RenderUnitTesterPlacementCard (int lp_player);
bool lib1_gf_TesterLeaderboardValidUnitType (string lp_unitType);
void lib1_gf_TesterLeaderboardSpecialUnitCost (unit lp_unit, string lp_unitType, int lp_column, bool lp_deleteMode);
void lib1_gf_TesterLeaderboardCreate ();
int lib1_gf_TesterLeaderboardAddRow (string lp_unitName);
string lib1_gf_TesterLeaderboardStructureUnitTypeToIcon (string lp_unitType);
void lib1_gf_TesterLeaderboardAddIcon (string lp_unitType, int lp_column, int lp_row);
void lib1_gf_AddTerrainData (string lp_regionString);
void lib1_gf_LoadTerrainData (structref<lib1_gs_DATA_TERRAIN> lp_dataTerrain);
void lib1_gf_PrepareUnitTesterTerrains ();
void lib1_gf_AllresearchesONOFF (bool lp_on);
void lib1_gf_SetLevelledUpgradesValue (int lp_player, int lp_level);
bool lib1_gf_NoUnitsForSide (int lp_side);
int lib1_gf_DialogItemFromLayoutHookup (int lp_type, string lp_name);
void lib1_gf_CreatorAddUnits (int lp_player, int lp_side, string lp_unit);
void lib1_gf_CreatorAddUpgrade2 (int lp_side, string lp_dataUpgrade);
void lib1_gf_DeleteAllTesterUnits ();
void lib1_gf_LoadTesterUnits (string lp_storageString, int lp_owner);
void lib1_gf_SaveTesterUnits ();
void lib1_gf_ResetTesterUnits ();
void lib1_gf_MirrorTesterUnitsByPlayer (int lp_player);
void lib1_gf_RemoveNeutralStructures ();
void lib1_gf_SaveMapStructures ();
void lib1_gf_RestoreMapStructures ();
void lib1_gf_MovePlayerCameras ();
void lib1_gf_ShowGameInterface ();
void lib1_gf_HideGameInterface ();
void lib1_gf_ShowUnitTesterCommonInterface ();
void lib1_gf_PrepareUnitTesterPlacementMode ();
void lib1_gf_PrepareUnitTesterPlayers ();
void lib1_gf_RenderTesterUIForPlayer (int lp_player);
void lib1_gf_RenderTesterUIForAllPlayers ();

// Trigger Declarations
trigger lib1_gt_InitializeUnitTesterInterface;
trigger lib1_gt_PingUsed;
trigger lib1_gt_PingResetTimerExprires;
trigger lib1_gt_PingPanelAutoDisable;
trigger lib1_gt_MeleeSurrender_Surrender;
trigger lib1_gt_MeleeSurrender_SurrenderClickedButton;
trigger lib1_gt_MeleeSurrender_FlashDialog;
trigger lib1_gt_StarCraftEvents;
trigger lib1_gt_TransportController;
trigger lib1_gt_AutoRevealRegionController;
trigger lib1_gt_UT_InfoSave;
trigger lib1_gt_UT_Info;
trigger lib1_gt_UT_InfoButton;
trigger lib1_gt_UT_InfoCreate;
trigger lib1_gt_UT_UI;
trigger lib1_gt_UT_UI_CtrlH;
trigger lib1_gt_UT_ButtonMonitor;
trigger lib1_gt_UT_ButtonUsage;
trigger lib1_gt_UT_HotkeyChange;
trigger lib1_gt_UT_Godmode;
trigger lib1_gt_UT_Godmode_unit_created;
trigger lib1_gt_UT_UnitInfo;
trigger lib1_gt_UT_UnitInfoUpdate;
trigger lib1_gt_UT_FastConstruction;
trigger lib1_gt_UT_FastTrain;
trigger lib1_gt_UT_FastResearch;
trigger lib1_gt_UT_FastArrm;
trigger lib1_gt_UT_FastRevive;
trigger lib1_gt_UT_FastBuild;
trigger lib1_gt_UT_ToggleEco;
trigger lib1_gt_UT_EconomyValue;
trigger lib1_gt_UT_WorkerSaturation;
trigger lib1_gt_UT_ListEmotes;
trigger lib1_gt_UT_Emote_ButtonClicked;
trigger lib1_gt_UpgradeChanged;
trigger lib1_gt_UT_Debug;
trigger lib1_gt_AbilityUsed;
trigger lib1_gt_UnitCreated;
trigger lib1_gt_UnitDied;
trigger lib1_gt_UnitRevived;
trigger lib1_gt_EffectUsed;
trigger lib1_gt_BehaviorChanged;
trigger lib1_gt_EffectDealingDamage;
trigger lib1_gt_UT_Trace;
trigger lib1_gt_UT_Tracing;
trigger lib1_gt_UT_DeTracing;
trigger lib1_gt_UT_CopyPaste;
trigger lib1_gt_UT_CTRLC;
trigger lib1_gt_UT_CTRLV;
trigger lib1_gt_UT_PathCheck;
trigger lib1_gt_UT_PathCheckTAB;
trigger lib1_gt_UT_Light;
trigger lib1_gt_UT_Plus;
trigger lib1_gt_UT_Minus;
trigger lib1_gt_UT_MissileMovers;
trigger lib1_gt_UT_MissileCreated;
trigger lib1_gt_UT_Height;
trigger lib1_gt_UT_AttackSpeed;
trigger lib1_gt_UT_Life;
trigger lib1_gt_UT_Energy;
trigger lib1_gt_UT_MovementSpeed;
trigger lib1_gt_UT_Acceleration;
trigger lib1_gt_UT_Range;
trigger lib1_gt_UT_ARange;
trigger lib1_gt_UT_Armor;
trigger lib1_gt_UT_TintColor;
trigger lib1_gt_UT_Scale;
trigger lib1_gt_UT_TimeScale;
trigger lib1_gt_UT_ActorMsg;
trigger lib1_gt_UT_AirGround;
trigger lib1_gt_UT_Camera_TurnOnOff;
trigger lib1_gt_UT_Camera_Reset;
trigger lib1_gt_UT_Camera_Top;
trigger lib1_gt_UT_Camera_KeyUp;
trigger lib1_gt_UT_Camera_KeyDown;
trigger lib1_gt_UT_Camera_PeriodicUpdate;
trigger lib1_gt_UT_Dummy;
trigger lib1_gt_UT_DummyTakesDamage;
trigger lib1_gt_UT_DummyUpdate;
trigger lib1_gt_UT_DummyDestroyed;
trigger lib1_gt_UT_DPS;
trigger lib1_gt_UT_DPS_Stop;
trigger lib1_gt_UT_DPS_DealsDamage;
trigger lib1_gt_UT_DPS_Summon;
trigger lib1_gt_UT_DPS_Dies;
trigger lib1_gt_UT_DPS_PauseGlobal;
trigger lib1_gt_UT_Vision;
trigger lib1_gt_UT_Numberstoggle;
trigger lib1_gt_UT_NumbersDamage;
trigger lib1_gt_UT_NumbersHeal;
trigger lib1_gt_UT_DL_LogDisplay;
trigger lib1_gt_UT_DL_PeriodicUpdate;
trigger lib1_gt_UT_DL_DamageLogging;
trigger lib1_gt_UT_DL_HealLogging;
trigger lib1_gt_UT_EnableDevCommands;
trigger lib1_gt_UT_DisableDevCommandsforally;
trigger lib1_gt_UT_Rad;
trigger lib1_gt_UT_XP;
trigger lib1_gt_UT_ListDead;
trigger lib1_gt_UT_ListHidden;
trigger lib1_gt_UT_ListMissile;
trigger lib1_gt_UT_ListAll;
trigger lib1_gt_UT_Teleport;
trigger lib1_gt_UT_Restart;
trigger lib1_gt_UT_GetID;
trigger lib1_gt_UT_Restore;
trigger lib1_gt_UT_Pause;
trigger lib1_gt_UT_Money;
trigger lib1_gt_UT_Look;
trigger lib1_gt_UT_sight;
trigger lib1_gt_UT_Kill;
trigger lib1_gt_UT_Remove;
trigger lib1_gt_UT_PauseAI;
trigger lib1_gt_UT_Speed;
trigger lib1_gt_UT_Supply;
trigger lib1_gt_UT_Give;
trigger lib1_gt_UT_SwitchOwner;
trigger lib1_gt_UT_Cost;
trigger lib1_gt_UT_clearscreen;
trigger lib1_gt_UT_ClearEnemy;
trigger lib1_gt_UT_SpawnUnits;
trigger lib1_gt_UT_Control;
trigger lib1_gt_UT_Resource;
trigger lib1_gt_UT_DebugApplySkin;
trigger lib1_gt_UT_DebugMode;
trigger lib1_gt_CU_MinimapAllyViewUpdate;
trigger lib1_gt_CU_MinimapAllyPlayerLeaves;
trigger lib1_gt_CU_MinimapAllyViewCamera;
trigger lib1_gt_allSetupUnitTesterFactionAllUnits;
trigger lib1_gt_searchSetupUnitTesterFactionSearch;
trigger lib1_gt_availableSetupUnitTesterFactionSmartAvailable;
trigger lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted;
trigger lib1_gt_TesterStartButton;
trigger lib1_gt_TesterStopButton;
trigger lib1_gt_TesterAttackButton;
trigger lib1_gt_TesterSideButton;
trigger lib1_gt_TesterClearUnits;
trigger lib1_gt_TesterDeleteUnits;
trigger lib1_gt_TesterPauseUnits;
trigger lib1_gt_TesterResetUnits;
trigger lib1_gt_RaceButtonClicked;
trigger lib1_gt_ArrowButtonClicked;
trigger lib1_gt_CardButtonCliked;
trigger lib1_gt_LeaderboardUnitCreated;
trigger lib1_gt_LeaderboardUnitRemoved;
trigger lib1_gt_TesterResult;
trigger lib1_gt_InstantBuild;
trigger lib1_gt_DisableStructures;
trigger lib1_gt_CreateNeutralStructure;
trigger lib1_gt_CtrlOff;
trigger lib1_gt_CtrlOn;
trigger lib1_gt_ShiftOff;
trigger lib1_gt_ShiftOn;
trigger lib1_gt_DialogItemIsUsed;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: Tester
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib1_gv_pingResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib1_gv_pingSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib1_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    lib1_gv_pingValidPlayers = PlayerGroupEmpty();
    lib1_gv_pingPanelMinimapButton = c_invalidDialogControlId;
    lib1_gv_meleeSurrender_PlayersSurrendering = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        lib1_gv_meleeSurrender_PlayersAnswered[init_i] = PlayerGroupEmpty();
    }
    lib1_gv_meleeSurrender_PlayersTried = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 32; init_i += 1) {
        lib1_gv_meleeSurrender_Dialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        lib1_gv_meleeSurrender_BtnYes[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        lib1_gv_meleeSurrender_BtnNo[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 32; init_i += 1) {
        lib1_gv_meleeSurrender_Title[init_i] = c_invalidDialogControlId;
    }
    lib1_gv_cRequirementAnd = 7;
    lib1_gv_cRequirementCountUnit = 24;
    lib1_gv_cRequirementCountUpgrade = 25;
    lib1_gv_byPassUnits = "ByPassUnitsList";
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    lib1_gv_cACHE_DANGER_UNITS = " ";
    lib1_gv_cACHE_DANGER_ABILITIES = " ";
    lib1_gv_cACHE_DANGER_BEHAVIOR = " ";
    lib1_gv_cACHE_SAFE_UNITS = " ";
    lib1_gv_cACHE_SAFE_ABILITIES = " ";
    lib1_gv_cACHE_SAFE_BEHAVIOR = " ";
    lib1_gv_startactiveplayers = PlayerGroupActive();
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib1_gv_teams[init_i] = PlayerGroupEmpty();
    }
    lib1_gv_uT_InfoDialog = c_invalidDialogId;
    lib1_gv_uT_InfoButton = c_invalidDialogControlId;
    lib1_gv_uT_UI_Hidden = PlayerGroupEmpty();
    lib1_gv_uT_ButtonUsagePlayerGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_HotkeyToStoreButton[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lib1_gv_uT_HotkeyStoreLength; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_HotkeyToStoreValue[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= lib1_gv_uT_MAXEMOTES; init_i += 1) {
        lib1_gv_uT_SC_Emoticons[init_i] = "";
    }
    for (init_i = 0; init_i <= lib1_gv_uT_MAXEMOTES; init_i += 1) {
        lib1_gv_uT_CS_Emoticons[init_i] = "";
    }
    lib1_gv_uT_Emote_Dialog = c_invalidDialogId;
    lib1_gv_uT_Emote_CloseButton = c_invalidDialogControlId;
    lib1_gv_uT_SoundEmoteTimer = TimerCreate();
    lib1_gv_uT_MissileCreators = UnitGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_Camera_Rotation[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_Camera_AngleofAttack[init_i] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    }
    lib1_gv_uT_Dummies = UnitGroupEmpty();
    for (init_i = 0; init_i <= 20; init_i += 1) {
        for (init_j = 0; init_j <= 1; init_j += 1) {
            lib1_gv_uT_DummyTimer[init_i][init_j] = TimerCreate();
        }
    }
    lib1_gv_uT_DPS_UG = UnitGroupEmpty();
    lib1_gv_uT_DPS_UG_Summoned = UnitGroupEmpty();
    for (init_i = 0; init_i <= lib1_gv_uT_DPS_MaxUnits; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_uT_DPS_Timer[init_i][init_j] = TimerCreate();
        }
    }
    lib1_gv_uT_PlayersWithNumbers = PlayerGroupEmpty();
    lib1_gv_uT_DL_LoggingPlayers = PlayerGroupEmpty();
    lib1_gv_uT_DL_LogDialog = c_invalidDialogId;
    lib1_gv_uT_DL_LogDialogItem = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_uT_DL_PlayerData[init_i] = 1;
    }
    for (init_i = 0; init_i <= 20; init_i += 1) {
        lib1_gv_uT_DevCommands[init_i] = lib1_ge_UT_DevCommandTypes_Gamealtering;
    }
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lib1_gv_cU_MinimapAllyViewPing[init_i] = c_invalidPingId;
    }
    lib1_gv_cU_MinimapAllyViewEnabled = true;
    for (init_i = 0; init_i <= lib1_gv_pLAYERS; init_i += 1) {
        lib1_gv_cACHE_DISARMED[init_i] = " ";
    }
    for (init_i = 0; init_i <= lib1_gv_pLAYERS; init_i += 1) {
        lib1_gv_cACHE_ARMED[init_i] = " ";
    }
    lib1_gv_listTypes = "^ListTypesMap";
    lib1_gv_lOG = "";
    lib1_gv_tester_menu = c_invalidDialogControlId;
    lib1_gv_tester_panel = c_invalidDialogControlId;
    lib1_gv_creator_panel = c_invalidDialogControlId;
    lib1_gv_unitMorphs = "^Morphs";
    lib1_gv_levelUpgrades = "^LevelUpgrades";
    lib1_gv_levelUpgradesList = "LevelUpgradesList";
    lib1_gv_menu_mode_settings = c_invalidDialogControlId;
    lib1_gv_menu_mode_creator = c_invalidDialogControlId;
    lib1_gv_menu_creator_panel = c_invalidDialogControlId;
    lib1_gv_menu_creator_mirror = c_invalidDialogControlId;
    lib1_gv_menu_creator_clear = c_invalidDialogControlId;
    lib1_gv_menu_attack_panel = c_invalidDialogControlId;
    lib1_gv_menu_attack_pause = c_invalidDialogControlId;
    lib1_gv_menu_attack_reset = c_invalidDialogControlId;
    lib1_gv_menu_start_attack = c_invalidDialogControlId;
    lib1_gv_menu_stop_attack = c_invalidDialogControlId;
    lib1_gv_menu_attack_attack = c_invalidDialogControlId;
    lib1_gv_menu_side = c_invalidDialogControlId;
    lib1_gv_vision = true;
    lib1_gv_test_timer = TimerCreate();
    lib1_gv_test_timer_window = c_timerWindowNone;
    lib1_gv_settings_panel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lib1_gv_settings_upgradebutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_settings_researchbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        lib1_gv_settings_visionbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_const_terrains; init_i += 1) {
        lib1_gv_settings_terrainbutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_const_players; init_i += 1) {
        lib1_gv_settings_allianceplayerlabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_const_players; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            lib1_gv_settings_alliancebuttons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib1_gv_factions = "^Factions";
    for (init_i = 0; init_i <= lib1_gv_mAX_FIGHTER_PLAYERS; init_i += 1) {
        lib1_gv_creator_selectedRace[init_i] = "Neutral";
    }
    for (init_i = 0; init_i <= lib1_gv_tMAXFACTIONS; init_i += 1) {
        lib1_gv_creator_racebutton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= lib1_gv_tMAXFACTIONS; init_i += 1) {
        lib1_gv_creator_raceface[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_creator_bottomButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_creator_upButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= lib1_gv_const_card_length; init_j += 1) {
            lib1_gv_creator_itembutton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= lib1_gv_const_card_length; init_j += 1) {
            lib1_gv_creator_itemunit[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        for (init_j = 0; init_j <= lib1_gv_const_card_length; init_j += 1) {
            lib1_gv_creator_itemface[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    lib1_gv_leaderboard = c_boardNone;
    lib1_gv_map_structure_storage = "";
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lib1_gv_unit_storage[init_i] = "";
    }
}

// Presets
// Functions
playergroup lib1_gf_HumanControllingPlayers (int lp_player) {
    // Variable Declarations
    int lv_p;
    playergroup lv_result;

    // Automatic Variable Declarations
    playergroup autoE5C690B4_g;

    // Variable Initialization
    lv_result = PlayerGroupEmpty();

    // Implementation
    autoE5C690B4_g = lib1_gf_HumanPlayers();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoE5C690B4_g, lv_p);
        if (lv_p < 0) { break; }
        if (((lv_p == lp_player) || (PlayerGetAlliance(lp_player, c_allianceIdControl, lv_p) == true))) {
            PlayerGroupAdd(lv_result, lv_p);
        }
    }
    return lv_result;
}

playergroup lib1_gf_HumanPlayers () {
    // Variable Declarations
    int lv_p;
    playergroup lv_result;

    // Automatic Variable Declarations
    playergroup autoD59A4282_g;

    // Variable Initialization
    lv_result = PlayerGroupEmpty();

    // Implementation
    autoD59A4282_g = PlayerGroupActive();
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(autoD59A4282_g, lv_p);
        if (lv_p < 0) { break; }
        if ((PlayerType(lv_p) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_result, lv_p);
        }
    }
    return lv_result;
}

void lib1_gf_PlayUnitTransmission (string lp_transmission, unit lp_unit) {
    // Variable Declarations
    int lv_variations;
    int lv_startindex;
    int lv_assetindex;
    string lv_unit;
    int lv_entries;
    int lv_index;
    int lv_reverbBalance;
    int lv_player;
    string lv_asset;
    string lv_readySoundVolume;
    string lv_readySoundPitch;
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto4E12828B_g;
    int auto4E12828B_var;
    int autoD8CAB2D4_ae;
    const int autoD8CAB2D4_ai = 1;

    // Variable Initialization
    lv_unit = (UnitGetType(lp_unit));
    lv_player = UnitGetOwner(lp_unit);
    lv_asset = UserDataGetString("UnitSounds", lv_unit, "ReadySound", 1);
    lv_readySoundVolume = "";
    lv_readySoundPitch = "";
    lv_players = PlayerGroupEmpty();

    // Implementation
    auto4E12828B_g = lib1_gf_HumanPlayers();
    auto4E12828B_var = -1;
    while (true) {
        auto4E12828B_var = PlayerGroupNextPlayer(auto4E12828B_g, auto4E12828B_var);
        if (auto4E12828B_var < 0) { break; }
        if ((UnitGroupUnit(UnitSubgroupSelected(auto4E12828B_var), 1) == EventUnit()) && (lib1_gv_unitTransmissionActive[auto4E12828B_var] == false)) {
            PlayerGroupAdd(lv_players, auto4E12828B_var);
            lib1_gv_unitTransmissionActive[auto4E12828B_var] = true;
        }

    }
    if ((lv_asset == "")) {
        lib1_gf_LOGString(lv_unit);
    }
    lv_readySoundVolume = UserDataGetString("UnitSounds", lv_unit, "ReadyVolume", 1);
    lv_readySoundPitch = UserDataGetString("UnitSounds", lv_unit, "ReadyPitch", 1);
    lv_reverbBalance = UserDataGetInt("UnitSounds", lv_unit, "ReadyReverbBalance", 1);
    autoD8CAB2D4_ae = UserDataFieldValueCount("UnitSounds", "ReadySound");
    lv_index = 1;
    for ( ; ( (autoD8CAB2D4_ai >= 0 && lv_index <= autoD8CAB2D4_ae) || (autoD8CAB2D4_ai < 0 && lv_index >= autoD8CAB2D4_ae) ) ; lv_index += autoD8CAB2D4_ai ) {
        if ((lv_asset == "")) {
            break;
        }
        lv_variations = lv_index;
    }
    lv_assetindex = RandomInt(0, (lv_variations - 1));
    lv_asset = UserDataGetString("UnitSounds", lv_unit, "ReadySound", lv_assetindex);
    libNtve_gf_CatalogFieldValueSetAsReal(c_gameCatalogSound, "TriggerSound", "ReverbBalance.Room", 0, lv_reverbBalance);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].File", 0, lv_asset);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].Volume", 0, lv_readySoundVolume);
    CatalogFieldValueSet(c_gameCatalogSound, "TriggerSound", "AssetArray[" + IntToString(0) + "].Pitch", 0, lv_readySoundPitch);
    SoundPlayOnUnitForPlayer(SoundLink("TriggerSound", 0), 0, lv_players, EventUnitCreatedUnit(), 0.0, 100.0, 0.0);
}

int lib1_gf_DifficultyValueInt2 (int lp_casual, int lp_normal, int lp_hard, int lp_brutal) {
    // Automatic Variable Declarations
    int auto3D8DC270_val;

    // Implementation
    auto3D8DC270_val = PlayerDifficulty(1);
    if (auto3D8DC270_val == 1) {
        return lp_casual;
    }
    else if (auto3D8DC270_val == 2) {
        return lp_normal;
    }
    else if (auto3D8DC270_val == 3) {
        return lp_hard;
    }
    else if (auto3D8DC270_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

fixed lib1_gf_DifficultyValueFixed2 (fixed lp_casual, fixed lp_normal, fixed lp_hard, fixed lp_brutal) {
    // Automatic Variable Declarations
    int auto2F837F03_val;

    // Implementation
    auto2F837F03_val = PlayerDifficulty(1);
    if (auto2F837F03_val == 1) {
        return lp_casual;
    }
    else if (auto2F837F03_val == 2) {
        return lp_normal;
    }
    else if (auto2F837F03_val == 3) {
        return lp_hard;
    }
    else if (auto2F837F03_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

string lib1_gf_DifficultyValueVoidUnitType (string lp_casual, string lp_normal, string lp_hard, string lp_brutal) {
    // Automatic Variable Declarations
    int auto9DFB57FF_val;

    // Implementation
    auto9DFB57FF_val = PlayerDifficulty(1);
    if (auto9DFB57FF_val == 1) {
        return lp_casual;
    }
    else if (auto9DFB57FF_val == 2) {
        return lp_normal;
    }
    else if (auto9DFB57FF_val == 3) {
        return lp_hard;
    }
    else if (auto9DFB57FF_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

bool lib1_gf_DifficultyValueVoidBoolean (bool lp_casual, bool lp_normal, bool lp_hard, bool lp_brutal) {
    // Automatic Variable Declarations
    int auto63C59B27_val;

    // Implementation
    auto63C59B27_val = PlayerDifficulty(1);
    if (auto63C59B27_val == 1) {
        return lp_casual;
    }
    else if (auto63C59B27_val == 2) {
        return lp_normal;
    }
    else if (auto63C59B27_val == 3) {
        return lp_hard;
    }
    else if (auto63C59B27_val == 4) {
        return lp_brutal;
    }
    else {
        return lp_normal;
    }
}

int lib1_gf_DifficultyValueInt3 (int lp_easy, int lp_normal, int lp_hard) {
    // Automatic Variable Declarations
    int auto0B3A790D_val;

    // Implementation
    auto0B3A790D_val = PlayerDifficulty(1);
    if (auto0B3A790D_val == 1) {
        return lp_easy;
    }
    else if (auto0B3A790D_val == 2) {
        return lp_normal;
    }
    else if (auto0B3A790D_val == 3) {
        return lp_hard;
    }
    else if (auto0B3A790D_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

fixed lib1_gf_DifficultyValueFixed3 (fixed lp_easy, fixed lp_normal, fixed lp_hard) {
    // Automatic Variable Declarations
    int autoEE4F918D_val;

    // Implementation
    autoEE4F918D_val = PlayerDifficulty(1);
    if (autoEE4F918D_val == 1) {
        return lp_easy;
    }
    else if (autoEE4F918D_val == 2) {
        return lp_normal;
    }
    else if (autoEE4F918D_val == 3) {
        return lp_hard;
    }
    else if (autoEE4F918D_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

string lib1_gf_DifficultyValueSwarmUnitType (string lp_easy, string lp_normal, string lp_hard) {
    // Automatic Variable Declarations
    int auto1C0BC570_val;

    // Implementation
    auto1C0BC570_val = PlayerDifficulty(1);
    if (auto1C0BC570_val == 1) {
        return lp_easy;
    }
    else if (auto1C0BC570_val == 2) {
        return lp_normal;
    }
    else if (auto1C0BC570_val == 3) {
        return lp_hard;
    }
    else if (auto1C0BC570_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

bool lib1_gf_DifficultyValueSwarmBoolean (bool lp_easy, bool lp_normal, bool lp_hard) {
    // Automatic Variable Declarations
    int autoD31B11E8_val;

    // Implementation
    autoD31B11E8_val = PlayerDifficulty(1);
    if (autoD31B11E8_val == 1) {
        return lp_easy;
    }
    else if (autoD31B11E8_val == 2) {
        return lp_normal;
    }
    else if (autoD31B11E8_val == 3) {
        return lp_hard;
    }
    else if (autoD31B11E8_val == 4) {
        return lp_hard;
    }
    else {
        return lp_normal;
    }
}

trigger auto_lib1_gf_PlaySoundLinkasMusic_Trigger = null;
soundlink auto_lib1_gf_PlaySoundLinkasMusic_lp_soundLink;
bool auto_lib1_gf_PlaySoundLinkasMusic_lp_loopForever;
bool auto_lib1_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

void lib1_gf_PlaySoundLinkasMusic (soundlink lp_soundLink, bool lp_loopForever, bool lp_unpauseSountrackAfter) {
    auto_lib1_gf_PlaySoundLinkasMusic_lp_soundLink = lp_soundLink;
    auto_lib1_gf_PlaySoundLinkasMusic_lp_loopForever = lp_loopForever;
    auto_lib1_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter = lp_unpauseSountrackAfter;

    if (auto_lib1_gf_PlaySoundLinkasMusic_Trigger == null) {
        auto_lib1_gf_PlaySoundLinkasMusic_Trigger = TriggerCreate("auto_lib1_gf_PlaySoundLinkasMusic_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_PlaySoundLinkasMusic_Trigger, false, false);
}

bool auto_lib1_gf_PlaySoundLinkasMusic_TriggerFunc (bool testConds, bool runActions) {
    soundlink lp_soundLink = auto_lib1_gf_PlaySoundLinkasMusic_lp_soundLink;
    bool lp_loopForever = auto_lib1_gf_PlaySoundLinkasMusic_lp_loopForever;
    bool lp_unpauseSountrackAfter = auto_lib1_gf_PlaySoundLinkasMusic_lp_unpauseSountrackAfter;

    // Automatic Variable Declarations
    // Implementation
    lib1_gv_soundLinkAsMusicCurrentlyPlaying += 1;
    lib1_gv_soundLinkAsMusicLoopForever = lp_loopForever;
    SoundStop(lib1_gv_soundLinkAsMusic, true);
    SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, true, true);
    SoundPlay(lp_soundLink, PlayerGroupAll(), 100.0, 0.0);
    lib1_gv_soundLinkAsMusic = SoundLastPlayed();
    SoundWait(SoundLastPlayed(), 0.0, c_soundOffsetEnd);
    lib1_gv_soundLinkAsMusicCurrentlyPlaying -= 1;
    if ((lib1_gv_soundLinkAsMusicCurrentlyPlaying == 0)) {
        if ((lib1_gv_soundLinkAsMusicLoopForever == true)) {
            lib1_gf_PlaySoundLinkasMusic(lp_soundLink, true, true);
        }
        else {
            if ((lp_unpauseSountrackAfter == true)) {
                SoundtrackPause(PlayerGroupAll(), c_soundtrackCategoryMusic, false, true);
            }

        }
    }

    return true;
}

void lib1_gf_StopSoundLinkCurrentlyPlayingasMusic () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_soundLinkAsMusicLoopForever = false;
    SoundStop(lib1_gv_soundLinkAsMusic, true);
}

string lib1_gf__UnitDataName2 (int lp_type, unit lp_unit, int lp_index) {
    // Variable Declarations
    string lv_name;

    // Automatic Variable Declarations
    int auto32B261AD_val;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto32B261AD_val = lp_type;
    if (auto32B261AD_val == lib1_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto32B261AD_val == lib1_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto32B261AD_val == lib1_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto32B261AD_val == lib1_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void lib1_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor lib1_gf_ActorForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void lib1_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point lib1_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Point, lp_unit, lp_index));
}

void lib1_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int lib1_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void lib1_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int lib1_gf_TextTagForUnit (unit lp_unit, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, lib1_gf__UnitDataName2(lib1_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void lib1_gf_PingPlay (int lp_pingType, int lp_player, point lp_pingLocation, int lp_gameUser, string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    unit lv_pingUnit;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;
    int lv_gameUserIndex;

    // Automatic Variable Declarations
    int autoA1FC3EBC_val;

    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    lv_gameUserIndex = ((lp_gameUser)-999);
    if (((lv_gameUserIndex < 0) || (lv_gameUserIndex > 16))) {
        return ;
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((TimerGetRemaining(lib1_gv_pingSuppressionTimer[lv_gameUserIndex]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(lib1_gv_pingLockoutTimer[lv_gameUserIndex]) > 0.0)) {
        GameUserDisplayMessage(lp_gameUser, c_messageAreaChat, StringExternal("Param/Value/lib_1_08B61BBA"));
        return ;
    }

    lib1_gv_pingRecentCount[lv_gameUserIndex] += 1;
    TimerStart(lib1_gv_pingSuppressionTimer[lv_gameUserIndex], lib1_gv_c_PINGSUPPRESSIONTIME, false, c_timeGame);
    TimerStart(lib1_gv_pingResetTimer[lv_gameUserIndex], lib1_gv_c_PINGRESETTIME, false, c_timeGame);
    if ((lib1_gv_pingRecentCount[lv_gameUserIndex] >= lib1_gv_c_PINGMAXCOUNT)) {
        TimerStart(lib1_gv_pingLockoutTimer[lv_gameUserIndex], lib1_gv_c_PINGLOCKOUTTIME, false, c_timeGame);
    }

    autoA1FC3EBC_val = lp_pingType;
    if (autoA1FC3EBC_val == 0) {
        TextExpressionSetToken("Param/Expression/lib_1_134CEECC", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_134CEECC", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_134CEECC"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_1_22406E19");
    }
    else if (autoA1FC3EBC_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_1_3B6FB432", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_3B6FB432", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_3B6FB432"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_1_6053374D");
    }
    else if (autoA1FC3EBC_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_1_DE5D7AAE", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_DE5D7AAE", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_DE5D7AAE"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Retreat", -1);
        lv_pingMinimapModel = "PingPanelPingRetreat";
        lv_pingEffect = "PingPanelBeaconRetreat";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_1_924E5FFB");
    }
    else if (autoA1FC3EBC_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_1_78404E9E", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_78404E9E", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_78404E9E"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        lv_tooltipLabel = StringExternal("Param/Value/lib_1_9BAA14E4");
    }
    else {
        if ((lp_pingTargetType != null)) {
            lib1_gf_PingPlayUnit(lp_pingTargetType, lp_pingTargetPosition, lp_pingTargetOwner, lp_player, lp_gameUser);
            return ;
        }

        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        lib1_gf_PingBeaconAdd(lv_pingEffect, lp_pingLocation, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingLocation, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    if (((lv_tooltipLabel != null) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1_D27098B1", "A", PlayerName(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_D27098B1", "B", lv_tooltipLabel);
        PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_1_D27098B1"));
    }
    else {
        PingSetTooltip(PingLastCreated(), PlayerName(lp_player));
    }
}

void lib1_gf_PingPlayUnit (string lp_pingTargetType, point lp_pingTargetPosition, int lp_pingTargetOwner, int lp_player, int lp_gameUser) {
    // Variable Declarations
    string lv_pingMinimapModel;
    string lv_pingEffect;
    soundlink lv_pingSound;
    fixed lv_pingScale;
    text lv_tooltipLabel;
    playergroup lv_pingPlayers;
    int lv_indexPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pingSound = SoundLink("EditorDefaultSound", -1);
    lv_pingScale = 1.0;
    lv_pingPlayers = PlayerGroupEmpty();

    // Implementation
    libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAlliance(c_playerGroupAlly, lp_player), lv_pingPlayers);
    PlayerGroupAdd(lv_pingPlayers, lp_player);
    if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Enemy) == true)) {
        if ((EventPingUnitIsUnderConstruction() == true) && (VisIsVisibleForPlayer(lp_player, lp_pingTargetPosition) == false)) {
            TextExpressionSetToken("Param/Expression/lib_1_BDB58250", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_1_BDB58250", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_1_BDB58250", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_1_BDB58250", "ENEMY", PlayerName(lp_pingTargetOwner));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_BDB58250"));
            lv_tooltipLabel = StringExternal("Param/Value/lib_1_6E6C6D7C");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_A1BE99DF", "ID", IntToText(lp_player));
            TextExpressionSetToken("Param/Expression/lib_1_A1BE99DF", "PLAYER", GameUserName(lp_gameUser));
            TextExpressionSetToken("Param/Expression/lib_1_A1BE99DF", "ENEMYID", IntToText(lp_pingTargetOwner));
            TextExpressionSetToken("Param/Expression/lib_1_A1BE99DF", "ENEMY", UnitTypeGetName(lp_pingTargetType));
            UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_A1BE99DF"));
            TextExpressionSetToken("Param/Expression/lib_1_1E541B03", "A", UnitTypeGetName(lp_pingTargetType));
            lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_1_1E541B03");
        }
        lv_pingSound = SoundLink("UI_PingAdvanced_Attack", -1);
        lv_pingMinimapModel = "PingPanelPingAttack";
        lv_pingEffect = "PingPanelBeaconAttack";
        lv_pingScale = 0.6;
    }
    else if ((libNtve_gf_PlayerIsEnemy(lp_player, lp_pingTargetOwner, libNtve_ge_PlayerRelation_Ally) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1_BAAF0138", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_BAAF0138", "PLAYER", GameUserName(lp_gameUser));
        TextExpressionSetToken("Param/Expression/lib_1_BAAF0138", "ENEMYID", IntToText(lp_pingTargetOwner));
        TextExpressionSetToken("Param/Expression/lib_1_BAAF0138", "ENEMY", UnitTypeGetName(lp_pingTargetType));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_BAAF0138"));
        lv_pingSound = SoundLink("UI_PingAdvanced_Defend", -1);
        lv_pingMinimapModel = "PingPanelPingDefend";
        lv_pingEffect = "PingPanelBeaconDefend";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_1_C3CDCF9F", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_1_C3CDCF9F");
    }
    else if ((CatalogFieldValueGet(c_gameCatalogUnit, lp_pingTargetType, "ResourceState", c_playerAny) != "Unknown")) {
        TextExpressionSetToken("Param/Expression/lib_1_06CDF8B1", "ID", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_1_06CDF8B1", "PLAYER", GameUserName(lp_gameUser));
        UIDisplayMessage(lv_pingPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_06CDF8B1"));
        lv_pingSound = SoundLink("UI_PingAdvanced_OnMyWay", -1);
        lv_pingMinimapModel = "PingPanelPingOnMyWay";
        lv_pingEffect = "PingPanelBeaconOnMyWay";
        lv_pingScale = 0.6;
        TextExpressionSetToken("Param/Expression/lib_1_80B9714F", "A", UnitTypeGetName(lp_pingTargetType));
        lv_tooltipLabel = TextExpressionAssemble("Param/Expression/lib_1_80B9714F");
    }
    else if (true) {
        lv_pingSound = SoundLink("UI_MiniMapPing", -1);
        lv_pingMinimapModel = "MinimapPing";
    }
    if ((lv_pingEffect != null)) {
        lib1_gf_PingBeaconAdd(lv_pingEffect, lp_pingTargetPosition, lp_player);
    }

    libNtve_gf_CreatePingFacingAngle(lv_pingPlayers, lv_pingMinimapModel, lp_pingTargetPosition, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false)), 5.0, 270.0);
    PingSetScale(PingLastCreated(), lv_pingScale);
    SoundPlayForPlayer(lv_pingSound, c_maxPlayers, lv_pingPlayers, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_1_ABBE3822", "A", PlayerName(lp_player));
    TextExpressionSetToken("Param/Expression/lib_1_ABBE3822", "B", lv_tooltipLabel);
    PingSetTooltip(PingLastCreated(), TextExpressionAssemble("Param/Expression/lib_1_ABBE3822"));
}

void lib1_gf_PingBeaconAdd (string lp_beaconEffect, point lp_location, int lp_player) {
    // Variable Declarations
    int lv_beaconIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    PlayerCreateEffectPoint(lp_player, lp_beaconEffect, lp_location);
}

void lib1_gf_PingMinimapButtonUpdate () {
    // Variable Declarations
    playergroup lv_standardPlayers;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_standardPlayers = PlayerGroupEmpty();

    // Implementation
    if ((lib1_gv_pingPanelMinimapButton == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
        lib1_gv_pingPanelMinimapButton = DialogControlLastCreated();
    }

    lv_standardPlayers = PlayerGroupAll();
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lib1_gv_pingValidPlayers, lv_standardPlayers);
    if ((PlayerGroupCount(lv_standardPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib1_gv_pingPanelMinimapButton, StringExternal("UI/PingTip"), PlayerGroupAll());
    }

    if ((PlayerGroupCount(lib1_gv_pingValidPlayers) > 0)) {
        libNtve_gf_SetDialogItemTooltip(lib1_gv_pingPanelMinimapButton, StringExternal("UI/AdvancedPingTip"), PlayerGroupAll());
    }

}

void lib1_gf_EnableDisablePingPanel (bool lp_enableDisable, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_enableDisable == true)) {
        libNtve_gf_AddPlayerGroupToPlayerGroup(lp_players, lib1_gv_pingValidPlayers);
        PingSetPlayerPingsShown(lp_players, false);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, true);
        TriggerEnable(lib1_gt_PingUsed, true);
    }
    else {
        PingSetPlayerPingsShown(lp_players, true);
        libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_players, lib1_gv_pingValidPlayers);
        UISetFrameVisible(lp_players, c_syncFrameTypePingPanel, false);
        if ((PlayerGroupCount(lib1_gv_pingValidPlayers) == 0)) {
            TriggerEnable(lib1_gt_PingUsed, false);
        }

    }
    lib1_gf_PingMinimapButtonUpdate();
}

void lib1_gf_MeleeSurrender_AIWantToSurrender (int lp_player) {
    // Variable Declarations
    int lv_dialogPlayer;
    playergroup lv_dialogPlayerGroup;

    // Automatic Variable Declarations
    playergroup autoB84BA955_g;

    // Variable Initialization
    lv_dialogPlayerGroup = PlayerGroupEmpty();

    // Implementation
    autoB84BA955_g = PlayerGroupAll();
    lv_dialogPlayer = -1;
    while (true) {
        lv_dialogPlayer = PlayerGroupNextPlayer(autoB84BA955_g, lv_dialogPlayer);
        if (lv_dialogPlayer < 0) { break; }
        if ((PlayerType(lv_dialogPlayer) == c_playerTypeUser) && (PlayerStatus(lv_dialogPlayer) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_dialogPlayerGroup, lv_dialogPlayer);
        }

    }
    PlayerGroupAdd(lib1_gv_meleeSurrender_PlayersSurrendering, lp_player);
    DialogCreate(460, 200, c_anchorTopRight, 40, 80, false);
    lib1_gv_meleeSurrender_Dialog[lp_player] = DialogLastCreated();
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    lib1_gv_meleeSurrender_Title[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (TextWithColor(PlayerName(lp_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lp_player, false))) + StringExternal("Param/Value/lib_1_535DF71F")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 45);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeLabel);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/lib_1_ACC632BF")), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 360, 50);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTop, 0, 85);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    lib1_gv_meleeSurrender_BtnYes[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_1_6D14FD39"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, -85, 35);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeButton);
    lib1_gv_meleeSurrender_BtnNo[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_1_4161ABCF"), PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 160, 45);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, 85, 35);
    DialogSetVisible(DialogLastCreated(), lv_dialogPlayerGroup, true);
    lib1_gf_MeleeSurrender_UpdateDialogs();
    lib1_gv_meleeSurrender_FlashingPlayer = lp_player;
    TriggerExecute(lib1_gt_MeleeSurrender_FlashDialog, true, false);
}

void lib1_gf_MeleeSurrender_UpdateDialogs () {
    // Variable Declarations
    int lv_y;
    int lv_humanPlayer;
    int lv_computerPlayer;

    // Automatic Variable Declarations
    playergroup auto55D42A93_g;
    playergroup auto7545DA9D_g;

    // Variable Initialization

    // Implementation
    auto55D42A93_g = PlayerGroupAll();
    lv_humanPlayer = -1;
    while (true) {
        lv_humanPlayer = PlayerGroupNextPlayer(auto55D42A93_g, lv_humanPlayer);
        if (lv_humanPlayer < 0) { break; }
        lv_y = 40;
        auto7545DA9D_g = lib1_gv_meleeSurrender_PlayersSurrendering;
        lv_computerPlayer = -1;
        while (true) {
            lv_computerPlayer = PlayerGroupNextPlayer(auto7545DA9D_g, lv_computerPlayer);
            if (lv_computerPlayer < 0) { break; }
            if ((PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersAnswered[lv_humanPlayer], lv_computerPlayer) == false)) {
                DialogSetPosition(lib1_gv_meleeSurrender_Dialog[lv_computerPlayer], c_anchorTopRight, 10, lv_y);
                lv_y += 200;
            }
            else {
                DialogSetVisible(lib1_gv_meleeSurrender_Dialog[lv_computerPlayer], PlayerGroupSingle(lv_humanPlayer), false);
            }
        }
    }
}

point lib1_gf_ValidatedPoint (point lp_point) {
    // Variable Declarations
    fixed lv_boundsWest;
    fixed lv_boundsEast;
    fixed lv_boundsNorth;
    fixed lv_boundsSouth;
    fixed lv_returnX;
    fixed lv_returnY;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_boundsWest = (PointGetX(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsEast = (PointGetX(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_WidthOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsNorth = (PointGetY(RegionGetCenter(RegionPlayableMap())) + (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    lv_boundsSouth = (PointGetY(RegionGetCenter(RegionPlayableMap())) - (libNtve_gf_HeightOfRegion(RegionPlayableMap()) / 2.0));
    if ((PointGetX(lp_point) < lv_boundsWest)) {
        lv_returnX = lv_boundsWest;
    }
    else {
        if ((PointGetX(lp_point) > lv_boundsEast)) {
            lv_returnX = lv_boundsEast;
        }
        else {
            lv_returnX = PointGetX(lp_point);
        }
    }
    if ((PointGetY(lp_point) < lv_boundsSouth)) {
        lv_returnY = lv_boundsSouth;
    }
    else {
        if ((PointGetY(lp_point) > lv_boundsNorth)) {
            lv_returnY = lv_boundsNorth;
        }
        else {
            lv_returnY = PointGetY(lp_point);
        }
    }
    return Point(lv_returnX, lv_returnY);
}

void lib1_gf_PlayAnnouncerNumberSound (int lp_number, playergroup lp_players, fixed lp_volume) {
    int init_i;

    // Variable Declarations
    soundlink[20] lv_soundReferenceArray119;
    soundlink[10] lv_soundReferenceArrayTens;
    int lv_i;
    string lv_soundIDString;
    int lv_numberLength;
    int lv_positionFromRight;
    int lv_placeValue;
    int lv_onesPlace;
    int lv_tensPlace;
    int lv_numberOfSoundsToPlay;
    soundlink[15] lv_soundsToPlay;

    // Automatic Variable Declarations
    const int autoA9CF0A10_ae = 19;
    const int autoA9CF0A10_ai = 1;
    const int autoDF3A1B61_ae = 9;
    const int autoDF3A1B61_ai = 1;
    int autoC636578C_ae;
    const int autoC636578C_ai = 1;
    int auto01A54912_ae;
    const int auto01A54912_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 19; init_i += 1) {
        lv_soundReferenceArray119[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_soundReferenceArrayTens[init_i] = SoundLink("EditorDefaultSound", -1);
    }
    lv_soundIDString = "";
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_soundsToPlay[init_i] = SoundLink("EditorDefaultSound", -1);
    }

    // Implementation
    if (((lp_number < 0) || (lp_number > 999999999))) {
        return ;
    }

    lv_i = 1;
    for ( ; ( (autoA9CF0A10_ai >= 0 && lv_i <= autoA9CF0A10_ae) || (autoA9CF0A10_ai < 0 && lv_i >= autoA9CF0A10_ae) ) ; lv_i += autoA9CF0A10_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 15)));
        lv_soundReferenceArray119[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    lv_i = 2;
    for ( ; ( (autoDF3A1B61_ai >= 0 && lv_i <= autoDF3A1B61_ae) || (autoDF3A1B61_ai < 0 && lv_i >= autoDF3A1B61_ae) ) ; lv_i += autoDF3A1B61_ai ) {
        lv_soundIDString = ("ModUtilityVoiceModUtilityVoice000" + IntToString((lv_i + 33)));
        lv_soundReferenceArrayTens[lv_i] = SoundLink(lv_soundIDString, 0);
    }
    if ((lp_number == 0)) {
        SoundPlay(SoundLink("ModUtilityVoiceModUtilityVoice00015", 0), lp_players, lp_volume, 0.0);
        return ;
    }

    if ((lp_number < 10)) {
        SoundPlay(lv_soundReferenceArray119[lp_number], lp_players, lp_volume, 0.0);
        return ;
    }

    lv_numberLength = StringLength(IntToString(lp_number));
    autoC636578C_ae = lv_numberLength;
    lv_i = 1;
    for ( ; ( (autoC636578C_ai >= 0 && lv_i <= autoC636578C_ae) || (autoC636578C_ai < 0 && lv_i >= autoC636578C_ae) ) ; lv_i += autoC636578C_ai ) {
        lv_positionFromRight = ((lv_numberLength + 1) - lv_i);
        if ((ModI(lv_positionFromRight, 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_placeValue != 0)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00043", -1);
            }

        }

        if ((ModI((lv_positionFromRight + 1), 3) == 0)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, (lv_i + 1)));
            if ((lv_placeValue > 0)) {
                if ((lv_placeValue < 20)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
                }
                else {
                    lv_tensPlace = StringToInt(StringSub(IntToString(lv_placeValue), 1, 1));
                    lv_onesPlace = StringToInt(StringSub(IntToString(lv_placeValue), 2, 2));
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArrayTens[lv_tensPlace];
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_onesPlace];
                }
            }

        }

        if ((lv_positionFromRight == 4)) {
            lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
            if ((lv_numberLength == 4)) {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), 2, 4));
                if ((lv_placeValue > 0)) {
                    lv_numberOfSoundsToPlay += 1;
                    lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
                }

            }
            else {
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00044", -1);
            }
        }

        if ((lv_positionFromRight == 7)) {
            if ((lv_numberLength == 7)) {
                lv_placeValue = StringToInt(StringSub(IntToString(lp_number), lv_i, lv_i));
                lv_numberOfSoundsToPlay += 1;
                lv_soundsToPlay[lv_numberOfSoundsToPlay] = lv_soundReferenceArray119[lv_placeValue];
            }

            lv_numberOfSoundsToPlay += 1;
            lv_soundsToPlay[lv_numberOfSoundsToPlay] = SoundLink("ModUtilityVoiceModUtilityVoice00045", -1);
        }

    }
    auto01A54912_ae = lv_numberOfSoundsToPlay;
    lv_i = 1;
    for ( ; ( (auto01A54912_ai >= 0 && lv_i <= auto01A54912_ae) || (auto01A54912_ai < 0 && lv_i >= auto01A54912_ae) ) ; lv_i += auto01A54912_ai ) {
        SoundPlay(lv_soundsToPlay[lv_i], lp_players, lp_volume, 0.0);
        SoundWait(SoundLastPlayed(), 0.25, c_soundOffsetEnd);
    }
}

void lib1_gf_PlayTransmissionCueSound (playergroup lp_playerGroup) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Dialogue_TransmissionStart", 0), lp_playerGroup, 100.0, 0.0);
    Wait(0.25, c_timeReal);
}

void lib1_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 2.5);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 1.0);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 0.0, 0.25);
    }
}

void lib1_gf_OrderWorkerstoGatherNearbyResources (region lp_region, int lp_player) {
    // Variable Declarations
    unit lv_indexWorker;
    unitgroup lv_resourceGroup;
    unit lv_indexResource;

    // Automatic Variable Declarations
    unitgroup auto4C048E49_g;
    int auto4C048E49_u;
    unitgroup autoD2401288_g;
    int autoD2401288_u;

    // Variable Initialization
    lv_resourceGroup = UnitGroupEmpty();

    // Implementation
    auto4C048E49_g = UnitGroup(null, lp_player, lp_region, UnitFilter((1 << c_targetFilterWorker), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4C048E49_u = UnitGroupCount(auto4C048E49_g, c_unitCountAll);
    for (;; auto4C048E49_u -= 1) {
        lv_indexWorker = UnitGroupUnitFromEnd(auto4C048E49_g, auto4C048E49_u);
        if (lv_indexWorker == null) { break; }
        UnitGroupClear(lv_resourceGroup);
        autoD2401288_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_indexWorker), 6.0), UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD2401288_u = UnitGroupCount(autoD2401288_g, c_unitCountAll);
        for (;; autoD2401288_u -= 1) {
            lv_indexResource = UnitGroupUnitFromEnd(autoD2401288_g, autoD2401288_u);
            if (lv_indexResource == null) { break; }
            if ((true) && ((UnitGetOwner(lv_indexResource) == 0) || (UnitGetOwner(lv_indexResource) == lp_player))) {
                UnitGroupAdd(lv_resourceGroup, lv_indexResource);
            }

        }
        if ((UnitGroupCount(lv_resourceGroup, c_unitCountAlive) > 0)) {
            UnitIssueOrder(lv_indexWorker, OrderTargetingUnit(null, UnitGroupClosestToPoint(lv_resourceGroup, UnitGetPosition(lv_indexWorker))), c_orderQueueReplace);
        }

    }
}

void lib1_gf_OrderTransporttoUnloadAllthenDespawn (unit lp_transport, point lp_targetPoint, point lp_despawnPoint) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_transportUnit_Param = lp_transport;
    lib1_gv_transportTargetPoint_Param = lp_targetPoint;
    lib1_gv_transportDespawnPoint_Param = lp_despawnPoint;
    TriggerExecute(lib1_gt_TransportController, true, false);
}

void lib1_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }

    VisRevealerCreate(lp_player, lp_visibilityRegion);
    lib1_gv_autoRevealers.lv_revealers[lib1_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), false);
    lib1_gv_autoRevealers.lv_triggeringRegions[lib1_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    lib1_gv_autoRevealers.lv_triggeringPlayers[lib1_gv_autoRevealers.lv_count] = lp_player;
    lib1_gv_autoRevealers.lv_count += 1;
    TriggerExecute(lib1_gt_AutoRevealRegionController, true, false);
}

bool lib1_gf_FilterEnemyisExcluded (string lp_filter) {
    // Variable Declarations
    string lv_excludedString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_excludedString = "";

    // Implementation
    lv_excludedString = StringWord(StringReplaceWord(lp_filter, ";", " ", c_stringReplaceAll, c_stringCase), 2);
    if ((StringFind(lv_excludedString, "Enemy", c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ClearCache () {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    int auto37578A89_ae;
    const int auto37578A89_ai = 1;
    int autoC111ACDB_ae;
    const int autoC111ACDB_ai = 1;
    int autoE6AB35BE_ae;
    const int autoE6AB35BE_ai = 1;
    int auto099D42E4_ae;
    const int auto099D42E4_ai = 1;
    int auto84A2E769_ae;
    const int auto84A2E769_ai = 1;
    int auto992702D1_ae;
    const int auto992702D1_ai = 1;
    int auto36D2EBC0_ae;
    const int auto36D2EBC0_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_ListClear(lib1_gv_byPassUnits);
    auto37578A89_ae = lib1_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto37578A89_ai >= 0 && lv_i <= auto37578A89_ae) || (auto37578A89_ai < 0 && lv_i >= auto37578A89_ae) ) ; lv_i += auto37578A89_ai ) {
        lib1_gv_cACHE_REQUIREMENT[lv_i] = null;
    }
    lib1_gv_cACHESIZE_REQUIREMENT = 0;
    autoC111ACDB_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoC111ACDB_ai >= 0 && lv_i <= autoC111ACDB_ae) || (autoC111ACDB_ai < 0 && lv_i >= autoC111ACDB_ae) ) ; lv_i += autoC111ACDB_ai ) {
        lib1_gv_cACHE_UPGRADES[lv_i] = null;
    }
    lib1_gv_cACHESIZE_UPGRADES = 0;
    autoE6AB35BE_ae = lib1_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (autoE6AB35BE_ai >= 0 && lv_i <= autoE6AB35BE_ae) || (autoE6AB35BE_ai < 0 && lv_i >= autoE6AB35BE_ae) ) ; lv_i += autoE6AB35BE_ai ) {
        lib1_gv_cACHE_UNITS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_UNITS = 0;
    auto099D42E4_ae = lib1_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (auto099D42E4_ai >= 0 && lv_i <= auto099D42E4_ae) || (auto099D42E4_ai < 0 && lv_i >= auto099D42E4_ae) ) ; lv_i += auto099D42E4_ai ) {
        lib1_gv_cACHE_BEHAVIORS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_BEHAVIORS = 0;
    auto84A2E769_ae = lib1_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto84A2E769_ai >= 0 && lv_i <= auto84A2E769_ae) || (auto84A2E769_ai < 0 && lv_i >= auto84A2E769_ae) ) ; lv_i += auto84A2E769_ai ) {
        lib1_gv_cACHE_ABILITIES[lv_i] = null;
    }
    lib1_gv_cACHESIZE_ABILITIES = 0;
    auto992702D1_ae = lib1_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (auto992702D1_ai >= 0 && lv_i <= auto992702D1_ae) || (auto992702D1_ai < 0 && lv_i >= auto992702D1_ae) ) ; lv_i += auto992702D1_ai ) {
        lib1_gv_cACHE_EFFECTS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_EFFECTS = 0;
    auto36D2EBC0_ae = lib1_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (auto36D2EBC0_ai >= 0 && lv_i <= auto36D2EBC0_ae) || (auto36D2EBC0_ai < 0 && lv_i >= auto36D2EBC0_ae) ) ; lv_i += auto36D2EBC0_ai ) {
        lib1_gv_cACHE_WEAPONS[lv_i] = null;
    }
    lib1_gv_cACHESIZE_WEAPONS = 0;
}

void lib1_gf_CacheUnit (int lp_player, string lp_unit, bool lp_scan) {
    // Variable Declarations
    string lv_aBILITY;
    string lv_bEHAVIOR;
    string lv_uNIT;
    string lv_requirement;
    int lv_unitsCount;
    int lv_i;
    string lv_upgradeEntry;
    int lv_affectedUnitIndex;
    bool lv_hasDangerAbilities;
    bool lv_isDangerAbility;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;
    string lv_vinxbgfihrsggwxk;

    // Automatic Variable Declarations
    int autoF361119F_ae;
    const int autoF361119F_ai = 1;
    int auto6A679349_ae;
    const int auto6A679349_ai = 1;
    int autoBF1D4B09_ae;
    const int autoBF1D4B09_ai = 1;
    int autoCC289159_ae;
    const int autoCC289159_ai = 1;
    int auto4E1C57F2_ae;
    const int auto4E1C57F2_ai = 1;
    int autoFA5F7FB9_ae;
    const int autoFA5F7FB9_ai = 1;
    int auto6561918B_catalog;
    int auto6561918B_i;
    int auto97AC0753_ae;
    const int auto97AC0753_ai = 1;
    int auto9016D083_ae;
    const int auto9016D083_ai = 1;
    int auto7CAEA127_ae;
    const int auto7CAEA127_ai = 1;
    int auto6CE1CDC4_catalog;
    int auto6CE1CDC4_i;
    int autoE9FBF64E_ae;
    const int autoE9FBF64E_ai = 1;
    int autoA8585580_catalog;
    int autoA8585580_i;
    int autoBB720C68_ae;
    const int autoBB720C68_ai = 1;

    // Variable Initialization
    lv_hasDangerAbilities = lib1_gf_UnitTypeisArmed(lp_player, lp_unit);
    lv_vinxbgfihrsggwxk = ("Race:" + UserDataGetString("Rules", lib1_gv_mBRules[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return ;
    }

    autoF361119F_ae = lib1_gv_cACHESIZE_UNITS;
    lv_i = 1;
    for ( ; ( (autoF361119F_ai >= 0 && lv_i <= autoF361119F_ae) || (autoF361119F_ai < 0 && lv_i >= autoF361119F_ae) ) ; lv_i += autoF361119F_ai ) {
        if ((lib1_gv_cACHE_UNITS[lv_i] == lp_unit)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_UNITS += 1;
    lib1_gv_cACHE_UNITS[lib1_gv_cACHESIZE_UNITS] = lp_unit;
    TechTreeUnitAllow(lp_player, lp_unit, true);
    if ((lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        auto6A679349_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "EquipmentArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto6A679349_ai >= 0 && lv_i <= auto6A679349_ae) || (auto6A679349_ai < 0 && lv_i >= auto6A679349_ae) ) ; lv_i += auto6A679349_ai ) {
            lib1_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Weapon", lp_player)));
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "EquipmentArray[" + IntToString(lv_i) + "].Effect", lp_player)));
        }
        autoBF1D4B09_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoBF1D4B09_ai >= 0 && lv_i <= autoBF1D4B09_ae) || (autoBF1D4B09_ai < 0 && lv_i >= autoBF1D4B09_ae) ) ; lv_i += autoBF1D4B09_ai ) {
            lib1_gf_CacheWeapon(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player)));
        }
    }
    else {
        lib1_gf_Disarmunittype(lp_player, lp_unit);
    }
    autoCC289159_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoCC289159_ai >= 0 && lv_i <= autoCC289159_ae) || (autoCC289159_ai < 0 && lv_i >= autoCC289159_ae) ) ; lv_i += autoCC289159_ai ) {
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player)));
    }
    auto4E1C57F2_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto4E1C57F2_ai >= 0 && lv_i <= auto4E1C57F2_ae) || (auto4E1C57F2_ai < 0 && lv_i >= auto4E1C57F2_ae) ) ; lv_i += auto4E1C57F2_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_aBILITY) == false)) {
            continue;
        }
        else {
            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) && (lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
                lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                if ((lv_unitsCount > 0)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                    lib1_gf_ArmUnitType(lp_player, lv_uNIT);
                }

            }

            if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilArmMagazine, "") == true)) {
                if ((lv_hasDangerAbilities == true)) {
                    autoFA5F7FB9_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (autoFA5F7FB9_ai >= 0 && lv_i <= autoFA5F7FB9_ae) || (autoFA5F7FB9_ai < 0 && lv_i >= autoFA5F7FB9_ae) ) ; lv_i += autoFA5F7FB9_ai ) {
                        lib1_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)));
                        lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
                    }
                }
                else {
                    continue;
                }
            }

            if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true) || (libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMergeable, "") == true))) {
                continue;
            }

            lv_isDangerAbility = lib1_gf_AbilityIsDanger(lp_player, lv_aBILITY);
            if (((lv_hasDangerAbilities == true) || (lv_isDangerAbility == false))) {
                lib1_gf_CacheAbility(lp_player, lv_aBILITY, false);
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectInstant, "") == true)) {
                    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                }
            }

        }
    }
    if ((lp_scan == true)) {
        auto6561918B_catalog = c_gameCatalogAbil;
        auto6561918B_i = 1;
        for ( ; auto6561918B_i <= CatalogEntryCount(c_gameCatalogAbil) ; auto6561918B_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(auto6561918B_catalog, auto6561918B_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_vinxbgfihrsggwxk, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if (((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilTrain, "") == true))) {
                    auto97AC0753_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto97AC0753_ai >= 0 && lv_i <= auto97AC0753_ae) || (auto97AC0753_ai < 0 && lv_i >= auto97AC0753_ae) ) ; lv_i += auto97AC0753_ai ) {
                        lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player);
                        if ((lv_unitsCount > 0)) {
                            lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit[" + IntToString(0) + "]", lp_player));
                            if ((lv_uNIT == lp_unit)) {
                                lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                                lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                                break;
                            }

                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilWarpTrain, "") == true)) {
                    auto9016D083_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto9016D083_ai >= 0 && lv_i <= auto9016D083_ae) || (auto9016D083_ai < 0 && lv_i >= auto9016D083_ae) ) ; lv_i += auto9016D083_ai ) {
                        if ((lp_unit == (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)))) {
                            lib1_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_i);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilBuild, "") == true)) {
                    auto7CAEA127_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_i = 0;
                    for ( ; ( (auto7CAEA127_ai >= 0 && lv_i <= auto7CAEA127_ae) || (auto7CAEA127_ai < 0 && lv_i >= auto7CAEA127_ae) ) ; lv_i += auto7CAEA127_ai ) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
                            lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                            break;
                        }

                    }
                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMorph, "") == true)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString((lv_unitsCount - 1)) + "].Unit", lp_player));
                        if ((lv_uNIT == lp_unit)) {
                            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
                            lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                        }

                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilMerge, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "Info.Unit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
                else if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilEffectTarget, "") == true)) {
                    lv_uNIT = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "PlaceUnit", lp_player));
                    if ((lv_uNIT == lp_unit)) {
                        lib1_gf_CacheAbility(lp_player, lv_aBILITY, true);
                    }

                }
            }
        }
        auto6CE1CDC4_catalog = c_gameCatalogBehavior;
        auto6CE1CDC4_i = 1;
        for ( ; auto6CE1CDC4_i <= CatalogEntryCount(c_gameCatalogBehavior) ; auto6CE1CDC4_i += 1 ) {
            lv_bEHAVIOR = CatalogEntryGet(auto6CE1CDC4_catalog, auto6CE1CDC4_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "EditorCategories", lp_player), lv_vinxbgfihrsggwxk, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((CatalogEntryClass(c_gameCatalogBehavior, lv_bEHAVIOR) == lib1_gv_cBehaviorSpawn)) {
                    lv_unitsCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray", lp_player);
                    if ((lv_unitsCount > 0)) {
                        autoE9FBF64E_ae = (lv_unitsCount - 1);
                        lv_i = 0;
                        for ( ; ( (autoE9FBF64E_ai >= 0 && lv_i <= autoE9FBF64E_ae) || (autoE9FBF64E_ai < 0 && lv_i >= autoE9FBF64E_ae) ) ; lv_i += autoE9FBF64E_ai ) {
                            if (((CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)) == lp_unit)) {
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "Requirements", lp_player));
                                lib1_gf_CacheRequirement(lp_player, lv_requirement);
                                lv_requirement = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_bEHAVIOR, "InfoArray[" + IntToString(lv_i) + "].Requirements", lp_player));
                                lib1_gf_CacheRequirement(lp_player, lv_requirement);
                                lib1_gf_CacheBehavior(lp_player, lv_bEHAVIOR);
                                autoA8585580_catalog = c_gameCatalogUnit;
                                autoA8585580_i = 1;
                                for ( ; autoA8585580_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoA8585580_i += 1 ) {
                                    lv_uNIT = CatalogEntryGet(autoA8585580_catalog, autoA8585580_i);
                                    if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                                        continue;
                                    }

                                    autoBB720C68_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                                    lv_k = 0;
                                    for ( ; ( (autoBB720C68_ai >= 0 && lv_k <= autoBB720C68_ae) || (autoBB720C68_ai < 0 && lv_k >= autoBB720C68_ae) ) ; lv_k += autoBB720C68_ai ) {
                                        if ((lv_bEHAVIOR == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_k) + "].Link", c_playerAny)))) {
                                            lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                                        }

                                    }
                                }
                                break;
                            }

                        }
                    }

                }

            }
        }
    }

}

void lib1_gf_CheckAbilityCommand (int lp_player, string lp_ability, int lp_command) {
    // Variable Declarations
    string lv_bEHAVIOR;
    string lv_uNIT;
    int lv_k;
    int lv_b;
    int lv_cl;
    int lv_lb;

    // Automatic Variable Declarations
    int autoD330A7B9_catalog;
    int autoD330A7B9_i;
    int autoD0BB7C8E_ae;
    const int autoD0BB7C8E_ai = 1;
    int autoACD8D27F_ae;
    const int autoACD8D27F_ai = 1;
    int auto8EC6F23B_ae;
    const int auto8EC6F23B_ai = 1;
    int autoD45E5157_ae;
    const int autoD45E5157_ai = 1;

    // Variable Initialization

    // Implementation
    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_command) + "].Button.Requirements", lp_player)));
    lib1_gf_CacheAbility(lp_player, lp_ability, false);
    autoD330A7B9_catalog = c_gameCatalogUnit;
    autoD330A7B9_i = 1;
    for ( ; autoD330A7B9_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoD330A7B9_i += 1 ) {
        lv_uNIT = CatalogEntryGet(autoD330A7B9_catalog, autoD330A7B9_i);
        if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
            continue;
        }

        autoD0BB7C8E_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
        lv_k = 0;
        for ( ; ( (autoD0BB7C8E_ai >= 0 && lv_k <= autoD0BB7C8E_ae) || (autoD0BB7C8E_ai < 0 && lv_k >= autoD0BB7C8E_ae) ) ; lv_k += autoD0BB7C8E_ai ) {
            if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_k) + "].Link", lp_player)))) {
                autoACD8D27F_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "BehaviorArray", lp_player) - 1);
                lv_b = 0;
                for ( ; ( (autoACD8D27F_ai >= 0 && lv_b <= autoACD8D27F_ae) || (autoACD8D27F_ai < 0 && lv_b >= autoACD8D27F_ae) ) ; lv_b += autoACD8D27F_ai ) {
                    lv_bEHAVIOR = (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "BehaviorArray[" + IntToString(lv_b) + "].Link", lp_player));
                    if ((lib1_gf_BehaviorUsesAbilityCommand(lp_player, lv_bEHAVIOR, AbilityCommand(lp_ability, lp_command)) == true)) {
                        lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                        break;
                    }

                }
                auto8EC6F23B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts", lp_player) - 1);
                lv_cl = 0;
                for ( ; ( (auto8EC6F23B_ai >= 0 && lv_cl <= auto8EC6F23B_ae) || (auto8EC6F23B_ai < 0 && lv_cl >= auto8EC6F23B_ae) ) ; lv_cl += auto8EC6F23B_ai ) {
                    autoD45E5157_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons", lp_player) - 1);
                    lv_lb = 0;
                    for ( ; ( (autoD45E5157_ai >= 0 && lv_lb <= autoD45E5157_ae) || (autoD45E5157_ai < 0 && lv_lb >= autoD45E5157_ae) ) ; lv_lb += autoD45E5157_ai ) {
                        if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "CardLayouts[" + IntToString(lv_cl) + "].LayoutButtons[" + IntToString(lv_lb) + "].AbilCmd", lp_player)) == AbilityCommand(lp_ability, lp_command))) {
                            lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                            break;
                        }

                    }
                }
            }

        }
    }
}

void lib1_gf_CacheUpgrade (int lp_player, string lp_upgrade, bool lp_scan) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    int lv_affectedUnitIndex;
    string lv_abilityIter;
    int lv_abilityIndex;
    string lv_aBILITY;
    string lv_uPGRADE;
    string lv_upgradeIter;
    int lv_abilityCommandIndex;
    int lv_effectArrayIndex;
    string lv_effeectArrayReference;
    string lv_mBRules;

    // Automatic Variable Declarations
    int auto289BDBDD_ae;
    const int auto289BDBDD_ai = 1;
    int auto055CB6A8_catalog;
    int auto055CB6A8_i;
    int auto014BF02B_ae;
    const int auto014BF02B_ai = 1;

    // Variable Initialization
    lv_effeectArrayReference = "";
    lv_mBRules = ("Race:" + UserDataGetString("Rules", lib1_gv_mBRules[lp_player], "Category", 1));

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lp_upgrade) == false)) {
        return ;
    }

    auto289BDBDD_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (auto289BDBDD_ai >= 0 && lv_i <= auto289BDBDD_ae) || (auto289BDBDD_ai < 0 && lv_i >= auto289BDBDD_ae) ) ; lv_i += auto289BDBDD_ai ) {
        if ((lib1_gv_cACHE_UPGRADES[lv_i] == lp_upgrade)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_UPGRADES += 1;
    lib1_gv_cACHE_UPGRADES[lib1_gv_cACHESIZE_UPGRADES] = lp_upgrade;
    TechTreeUpgradeAllow(lp_player, lp_upgrade, true);
    if ((lp_scan == true)) {
        auto055CB6A8_catalog = c_gameCatalogAbil;
        auto055CB6A8_i = 1;
        for ( ; auto055CB6A8_i <= CatalogEntryCount(c_gameCatalogAbil) ; auto055CB6A8_i += 1 ) {
            lv_aBILITY = CatalogEntryGet(auto055CB6A8_catalog, auto055CB6A8_i);
            if ((PlayerRace(lp_player) != "Neut") && (StringFind(CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "EditorCategories", lp_player), lv_mBRules, c_stringNoCase) == -1)) {
                continue;
            }
            else {
                if ((libNtve_gf_AbilityMatchesFilters(lv_aBILITY, lp_player, c_classIdCAbilResearch, "") == true)) {
                    auto014BF02B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_aBILITY, "InfoArray", lp_player) - 1);
                    lv_abilityCommandIndex = 0;
                    for ( ; ( (auto014BF02B_ai >= 0 && lv_abilityCommandIndex <= auto014BF02B_ae) || (auto014BF02B_ai < 0 && lv_abilityCommandIndex >= auto014BF02B_ae) ) ; lv_abilityCommandIndex += auto014BF02B_ai ) {
                        lv_upgradeIter = (CatalogFieldValueGet(c_gameCatalogAbil, lv_aBILITY, "InfoArray[" + IntToString(lv_abilityCommandIndex) + "].Upgrade", lp_player));
                        if ((lv_upgradeIter == lp_upgrade)) {
                            lib1_gf_CheckAbilityCommand(lp_player, lv_aBILITY, lv_abilityCommandIndex);
                            break;
                        }

                    }
                }

            }
        }
    }

}

void lib1_gf_CacheAbility (int lp_player, string lp_ability, bool lp_scan) {
    // Variable Declarations
    string lv_uNIT;
    int lv_i;

    // Automatic Variable Declarations
    int auto14BD1603_ae;
    const int auto14BD1603_ai = 1;
    int autoF5A132B8_catalog;
    int autoF5A132B8_i;
    int auto041F13F3_ae;
    const int auto041F13F3_ai = 1;
    int autoD9E83455_val;
    int auto2A128C4D_ae;
    const int auto2A128C4D_ai = 1;
    int autoE9405DFB_ae;
    const int autoE9405DFB_ai = 1;
    int autoA58EC292_ae;
    const int autoA58EC292_ai = 1;
    int autoE1619157_ae;
    const int autoE1619157_ai = 1;
    int auto93133DB7_ae;
    const int auto93133DB7_ai = 1;
    int autoD6BE33D8_ae;
    const int autoD6BE33D8_ai = 1;
    int autoDE548FF2_ae;
    const int autoDE548FF2_ai = 1;
    int auto01FAF5C4_ae;
    const int auto01FAF5C4_ai = 1;
    int auto33D20F4B_ae;
    const int auto33D20F4B_ai = 1;
    int autoEF20716D_ae;
    const int autoEF20716D_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return ;
    }

    auto14BD1603_ae = lib1_gv_cACHESIZE_ABILITIES;
    lv_i = 1;
    for ( ; ( (auto14BD1603_ai >= 0 && lv_i <= auto14BD1603_ae) || (auto14BD1603_ai < 0 && lv_i >= auto14BD1603_ae) ) ; lv_i += auto14BD1603_ai ) {
        if ((lib1_gv_cACHE_ABILITIES[lv_i] == lp_ability)) {
            return ;
        }

    }
    if (((libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilRally, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilBuildable, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilStop, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilAttack, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilMove, "") == true) || (libNtve_gf_AbilityMatchesFilters(lp_ability, lp_player, c_classIdCAbilQueue, "") == true))) {
        return ;
    }

    lib1_gv_cACHESIZE_ABILITIES += 1;
    lib1_gv_cACHE_ABILITIES[lib1_gv_cACHESIZE_ABILITIES] = lp_ability;
    if ((lp_scan == true)) {
        autoF5A132B8_catalog = c_gameCatalogUnit;
        autoF5A132B8_i = 1;
        for ( ; autoF5A132B8_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoF5A132B8_i += 1 ) {
            lv_uNIT = CatalogEntryGet(autoF5A132B8_catalog, autoF5A132B8_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            auto041F13F3_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "AbilArray", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto041F13F3_ai >= 0 && lv_i <= auto041F13F3_ae) || (auto041F13F3_ai < 0 && lv_i >= auto041F13F3_ae) ) ; lv_i += auto041F13F3_ai ) {
                if ((lp_ability == (CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny)))) {
                    lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                }

            }
        }
    }

    autoD9E83455_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (autoD9E83455_val == lib1_gv_cAbilityAugment) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player)));
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityArmMagazine) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        auto2A128C4D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto2A128C4D_ai >= 0 && lv_i <= auto2A128C4D_ae) || (auto2A128C4D_ai < 0 && lv_i >= auto2A128C4D_ae) ) ; lv_i += auto2A128C4D_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
        autoE9405DFB_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "InfoArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE9405DFB_ai >= 0 && lv_i <= autoE9405DFB_ae) || (autoE9405DFB_ai < 0 && lv_i >= autoE9405DFB_ae) ) ; lv_i += autoE9405DFB_ai ) {
            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Button.Requirements", lp_player)));
            lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lv_i) + "].Unit", lp_player)), false);
        }
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityBehavior) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        autoA58EC292_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoA58EC292_ai >= 0 && lv_i <= autoA58EC292_ae) || (autoA58EC292_ai < 0 && lv_i >= autoA58EC292_ae) ) ; lv_i += autoA58EC292_ai ) {
            lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityBuild) {
        lib1_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BuildMorphAbil", lp_player)), false);
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityEffectInstant) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoE1619157_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE1619157_ai >= 0 && lv_i <= autoE1619157_ae) || (autoE1619157_ai < 0 && lv_i >= autoE1619157_ae) ) ; lv_i += autoE1619157_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto93133DB7_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto93133DB7_ai >= 0 && lv_i <= auto93133DB7_ae) || (auto93133DB7_ai < 0 && lv_i >= auto93133DB7_ae) ) ; lv_i += auto93133DB7_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        autoD6BE33D8_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoD6BE33D8_ai >= 0 && lv_i <= autoD6BE33D8_ae) || (autoD6BE33D8_ai < 0 && lv_i >= autoD6BE33D8_ae) ) ; lv_i += autoD6BE33D8_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityEffectTarget) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player)));
        autoDE548FF2_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoDE548FF2_ai >= 0 && lv_i <= autoDE548FF2_ae) || (autoDE548FF2_ai < 0 && lv_i >= autoDE548FF2_ae) ) ; lv_i += autoDE548FF2_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto01FAF5C4_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto01FAF5C4_ai >= 0 && lv_i <= auto01FAF5C4_ae) || (auto01FAF5C4_ai < 0 && lv_i >= auto01FAF5C4_ae) ) ; lv_i += auto01FAF5C4_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player)));
        }
        auto33D20F4B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto33D20F4B_ai >= 0 && lv_i <= auto33D20F4B_ae) || (auto33D20F4B_ai < 0 && lv_i >= auto33D20F4B_ae) ) ; lv_i += auto33D20F4B_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player)));
        }
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player)));
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityMorph) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(0) + "].Requirements", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOn", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorOff", lp_player)));
    }
    else if (autoD9E83455_val == lib1_gv_cAbilityTransport) {
        autoEF20716D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CmdButtonArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoEF20716D_ai >= 0 && lv_i <= autoEF20716D_ae) || (autoEF20716D_ai < 0 && lv_i >= autoEF20716D_ae) ) ; lv_i += autoEF20716D_ai ) {
            lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CmdButtonArray[" + IntToString(lv_i) + "].Requirements", lp_player)));
        }
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadCargoBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "LoadTransportBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadTransportBehavior", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "UnloadCargoBehavior", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheWeapon (int lp_player, string lp_weapon) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoD7F7A79E_ae;
    const int autoD7F7A79E_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogWeapon, lp_weapon) == false)) {
        return ;
    }

    autoD7F7A79E_ae = lib1_gv_cACHESIZE_WEAPONS;
    lv_i = 1;
    for ( ; ( (autoD7F7A79E_ai >= 0 && lv_i <= autoD7F7A79E_ae) || (autoD7F7A79E_ai < 0 && lv_i >= autoD7F7A79E_ae) ) ; lv_i += autoD7F7A79E_ai ) {
        if ((lib1_gv_cACHE_WEAPONS[lv_i] == lp_weapon)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_WEAPONS += 1;
    lib1_gv_cACHE_WEAPONS[lib1_gv_cACHESIZE_WEAPONS] = lp_weapon;
    lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PostEffectBehavior.Behavior", lp_player)));
    lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffectBehavior.Behavior", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "PreEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "Effect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "DisplayEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
    lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogWeapon, lp_weapon, "CriticalEffect", lp_player)));
}

void lib1_gf_CacheBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoBA51004A_ae;
    const int autoBA51004A_ai = 1;
    int autoFF296FC1_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return ;
    }

    autoBA51004A_ae = lib1_gv_cACHESIZE_BEHAVIORS;
    lv_i = 1;
    for ( ; ( (autoBA51004A_ai >= 0 && lv_i <= autoBA51004A_ae) || (autoBA51004A_ai < 0 && lv_i >= autoBA51004A_ae) ) ; lv_i += autoBA51004A_ai ) {
        if ((lib1_gv_cACHE_BEHAVIORS[lv_i] == lp_behavior)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_BEHAVIORS += 1;
    lib1_gv_cACHE_BEHAVIORS[lib1_gv_cACHESIZE_BEHAVIORS] = lp_behavior;
    lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Requirements", lp_player)));
    autoFF296FC1_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (autoFF296FC1_val == lib1_gv_cBehaviorBuff) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto749C7EC4_ae;
    const int auto749C7EC4_ai = 1;
    int auto450BEE8C_ae;
    const int auto450BEE8C_ai = 1;
    int autoE39623A2_val;
    int auto9EC7C1A8_ae;
    const int auto9EC7C1A8_ai = 1;
    int autoFC62F893_ae;
    const int autoFC62F893_ai = 1;
    int auto91993427_ae;
    const int auto91993427_ai = 1;
    int autoE09E8734_ae;
    const int autoE09E8734_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return ;
    }

    auto749C7EC4_ae = lib1_gv_cACHESIZE_EFFECTS;
    lv_i = 1;
    for ( ; ( (auto749C7EC4_ai >= 0 && lv_i <= auto749C7EC4_ae) || (auto749C7EC4_ai < 0 && lv_i >= auto749C7EC4_ae) ) ; lv_i += auto749C7EC4_ai ) {
        if ((lib1_gv_cACHE_EFFECTS[lv_i] == lp_effect)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_EFFECTS += 1;
    lib1_gv_cACHE_EFFECTS[lib1_gv_cACHESIZE_EFFECTS] = lp_effect;
    auto450BEE8C_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "ValidatorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto450BEE8C_ai >= 0 && lv_i <= auto450BEE8C_ae) || (auto450BEE8C_ai < 0 && lv_i >= auto450BEE8C_ae) ) ; lv_i += auto450BEE8C_ai ) {
        lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ValidatorArray[" + IntToString(lv_i) + "]", lp_player)));
    }
    autoE39623A2_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (autoE39623A2_val == lib1_gv_cEffectIssueOrder) {
        lib1_gf_CacheAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player)), false);
    }
    else if (autoE39623A2_val == lib1_gv_cEffectApplyBehavior) {
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectCreateHealer) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectCreatePersistent) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player)));
        auto9EC7C1A8_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto9EC7C1A8_ai >= 0 && lv_i <= auto9EC7C1A8_ae) || (auto9EC7C1A8_ai < 0 && lv_i >= auto9EC7C1A8_ae) ) ; lv_i += auto9EC7C1A8_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoE39623A2_val == lib1_gv_cEffectCreateUnit) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player)));
        autoFC62F893_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoFC62F893_ai >= 0 && lv_i <= autoFC62F893_ae) || (autoFC62F893_ai < 0 && lv_i >= autoFC62F893_ae) ) ; lv_i += autoFC62F893_ai ) {
            lib1_gf_ArmUnitType(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)));
            lib1_gf_CacheUnit(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player)), false);
        }
    }
    else if (autoE39623A2_val == lib1_gv_cEffectDamage) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "DamageInheritEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactLocation.Effect", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectLaunchMissile) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player)));
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player)));
        lib1_gf_CacheBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectSet) {
        auto91993427_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto91993427_ai >= 0 && lv_i <= auto91993427_ae) || (auto91993427_ai < 0 && lv_i >= auto91993427_ae) ) ; lv_i += auto91993427_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (autoE39623A2_val == lib1_gv_cEffectTeleport) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectModifyUnit) {
        lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ModifyTurret.AimCompleteEffect", lp_player)));
    }
    else if (autoE39623A2_val == lib1_gv_cEffectSwitch) {
        autoE09E8734_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "CaseArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoE09E8734_ai >= 0 && lv_i <= autoE09E8734_ae) || (autoE09E8734_ai < 0 && lv_i >= autoE09E8734_ae) ) ; lv_i += autoE09E8734_ai ) {
            lib1_gf_CacheEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Effect", lp_player)));
            lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "CaseArray[" + IntToString(lv_i) + "].Validator", lp_player)));
        }
    }
    else {
    }
}

void lib1_gf_CacheValidator (int lp_player, string lp_validator) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto64F8FD04_val;
    int auto9D1E14B3_ae;
    const int auto9D1E14B3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogValidator, lp_validator) == false)) {
        return ;
    }

    auto64F8FD04_val = CatalogEntryClass(c_gameCatalogValidator, lp_validator);
    if (auto64F8FD04_val == lib1_gv_cValidatorCombine) {
        auto9D1E14B3_ae = (CatalogFieldValueCount(c_gameCatalogValidator, lp_validator, "CombineArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto9D1E14B3_ai >= 0 && lv_i <= auto9D1E14B3_ae) || (auto9D1E14B3_ai < 0 && lv_i >= auto9D1E14B3_ae) ) ; lv_i += auto9D1E14B3_ai ) {
            lib1_gf_CacheValidator(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "CombineArray[" + IntToString(lv_i) + "]", lp_player)));
        }
    }
    else if (auto64F8FD04_val == lib1_gv_cValidatorPlayerReqirement) {
        lib1_gf_CacheRequirement(lp_player, (CatalogFieldValueGet(c_gameCatalogValidator, lp_validator, "Value", lp_player)));
    }
    else {
    }
}

void lib1_gf_CacheRequirement (int lp_player, string lp_requirement) {
    // Variable Declarations
    int lv_i;
    string lv_requirementNode;

    // Automatic Variable Declarations
    int auto1258E7FC_ae;
    const int auto1258E7FC_ai = 1;
    int auto7C576EA3_ae;
    const int auto7C576EA3_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirement, lp_requirement) == false)) {
        return ;
    }

    auto1258E7FC_ae = lib1_gv_cACHESIZE_REQUIREMENT;
    lv_i = 1;
    for ( ; ( (auto1258E7FC_ai >= 0 && lv_i <= auto1258E7FC_ae) || (auto1258E7FC_ai < 0 && lv_i >= auto1258E7FC_ae) ) ; lv_i += auto1258E7FC_ai ) {
        if ((lib1_gv_cACHE_REQUIREMENT[lv_i] == lp_requirement)) {
            return ;
        }

    }
    lib1_gv_cACHESIZE_REQUIREMENT += 1;
    lib1_gv_cACHE_REQUIREMENT[lib1_gv_cACHESIZE_REQUIREMENT] = lp_requirement;
    auto7C576EA3_ae = (CatalogFieldValueCount(c_gameCatalogRequirement, lp_requirement, "NodeArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto7C576EA3_ai >= 0 && lv_i <= auto7C576EA3_ae) || (auto7C576EA3_ai < 0 && lv_i >= auto7C576EA3_ae) ) ; lv_i += auto7C576EA3_ai ) {
        lv_requirementNode = (CatalogFieldValueGet(c_gameCatalogRequirement, lp_requirement, "NodeArray[" + IntToString(lv_i) + "].Link", lp_player));
        lib1_gf_CacheRequirementNode(lp_player, lv_requirementNode);
    }
}

void lib1_gf_CacheRequirementNode (int lp_player, string lp_requirementNode) {
    // Variable Declarations
    string lv_uNIT;
    string lv_uPGRADE;
    string lv_requirementNode;
    string lv_requirementNodeIter;
    string lv_aLIAS;
    string lv_aliasIter;
    int lv_i;

    // Automatic Variable Declarations
    int auto13E5FB70_ae;
    const int auto13E5FB70_ai = 1;
    int autoA9539BCD_catalog;
    int autoA9539BCD_i;
    int autoC01CBCBE_ae;
    const int autoC01CBCBE_ai = 1;
    int auto3A07513D_catalog;
    int auto3A07513D_i;
    int autoDD867FCD_ae;
    const int autoDD867FCD_ai = 1;

    // Variable Initialization
    lv_requirementNode = lp_requirementNode;
    lv_aLIAS = "";
    lv_aliasIter = "";

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogRequirementNode, lp_requirementNode) == false)) {
        return ;
    }

    if (((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementAnd) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementOr) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementEq) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementGT) || (CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementGTE))) {
        auto13E5FB70_ae = (CatalogFieldValueCount(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto13E5FB70_ai >= 0 && lv_i <= auto13E5FB70_ae) || (auto13E5FB70_ai < 0 && lv_i >= auto13E5FB70_ae) ) ; lv_i += auto13E5FB70_ai ) {
            lv_requirementNodeIter = (CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "OperandArray[" + IntToString(lv_i) + "]", lp_player));
            lib1_gf_CacheRequirementNode(lp_player, lv_requirementNodeIter);
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementCountUnit)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        autoA9539BCD_catalog = c_gameCatalogUnit;
        autoA9539BCD_i = 1;
        for ( ; autoA9539BCD_i <= CatalogEntryCount(c_gameCatalogUnit) ; autoA9539BCD_i += 1 ) {
            lv_uNIT = CatalogEntryGet(autoA9539BCD_catalog, autoA9539BCD_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUnitRace2(lv_uNIT) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uNIT) == lv_aLIAS)) {
                lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
            }
            else {
                autoC01CBCBE_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_uNIT, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (autoC01CBCBE_ai >= 0 && lv_i <= autoC01CBCBE_ae) || (autoC01CBCBE_ai < 0 && lv_i >= autoC01CBCBE_ae) ) ; lv_i += autoC01CBCBE_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUnit, lv_uNIT, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        lib1_gf_CacheUnit(lp_player, lv_uNIT, true);
                    }

                }
            }
        }
    }

    if ((CatalogEntryClass(c_gameCatalogRequirementNode, lv_requirementNode) == lib1_gv_cRequirementCountUpgrade)) {
        lv_aLIAS = CatalogFieldValueGet(c_gameCatalogRequirementNode, lv_requirementNode, "Count.Link", lp_player);
        auto3A07513D_catalog = c_gameCatalogUpgrade;
        auto3A07513D_i = 1;
        for ( ; auto3A07513D_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto3A07513D_i += 1 ) {
            lv_uPGRADE = CatalogEntryGet(auto3A07513D_catalog, auto3A07513D_i);
            if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUpgradeRace(lv_uPGRADE) != PlayerRace(lp_player))) {
                continue;
            }

            if (((lv_uPGRADE) == lv_aLIAS)) {
                lib1_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
            }
            else {
                autoDD867FCD_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray", lp_player) - 1);
                lv_i = 0;
                for ( ; ( (autoDD867FCD_ai >= 0 && lv_i <= autoDD867FCD_ae) || (autoDD867FCD_ai < 0 && lv_i >= autoDD867FCD_ae) ) ; lv_i += autoDD867FCD_ai ) {
                    lv_aliasIter = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_uPGRADE, "TechAliasArray[" + IntToString(lv_i) + "]", lp_player);
                    if ((lv_aliasIter == lv_aLIAS)) {
                        lib1_gf_CacheUpgrade(lp_player, lv_uPGRADE, true);
                    }

                }
            }
        }
    }

}

bool lib1_gf_ByPassBehavior (int lp_player, string lp_behavior) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto332D6DF6_val;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogBehavior, lp_behavior) == false)) {
        return false;
    }

    auto332D6DF6_val = CatalogEntryClass(c_gameCatalogBehavior, lp_behavior);
    if (auto332D6DF6_val == lib1_gv_cBehaviorBuff) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Detection)) {
            if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogBehavior, lp_behavior, "Modification.Detect", lp_player) > 0.0)) {
                return true;
            }

        }

        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "InitialEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool lib1_gf_ByPassEffect (int lp_player, string lp_effect) {
    // Variable Declarations
    int lv_unitscount;
    int lv_i;

    // Automatic Variable Declarations
    int auto81D50E28_ae;
    const int auto81D50E28_ai = 1;
    int auto6E648D35_val;
    int auto77A701A5_ae;
    const int auto77A701A5_ai = 1;
    int autoCF29F7A6_ae;
    const int autoCF29F7A6_ai = 1;
    int autoFBD42E2C_ae;
    const int autoFBD42E2C_ai = 1;
    int autoE2EFA82E_ae;
    const int autoE2EFA82E_ai = 1;
    int auto4D2557CE_ae;
    const int auto4D2557CE_ai = 1;
    int auto4300E4FF_ae;
    const int auto4300E4FF_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogEffect, lp_effect) == false)) {
        return false;
    }

    auto81D50E28_ae = lib1_gv_cACHE_TMPEFFECTS_SIZE;
    lv_i = 1;
    for ( ; ( (auto81D50E28_ai >= 0 && lv_i <= auto81D50E28_ae) || (auto81D50E28_ai < 0 && lv_i >= auto81D50E28_ae) ) ; lv_i += auto81D50E28_ai ) {
        if ((lib1_gv_cACHE_TMPEFFECTS[lv_i] == lp_effect)) {
            return false;
        }

    }
    lib1_gv_cACHE_TMPEFFECTS_SIZE += 1;
    lib1_gv_cACHE_TMPEFFECTS[lib1_gv_cACHE_TMPEFFECTS_SIZE] = lp_effect;
    auto6E648D35_val = CatalogEntryClass(c_gameCatalogEffect, lp_effect);
    if (auto6E648D35_val == lib1_gv_cEffectIssueOrder) {
        if ((lib1_gf_ByPassAbility(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Abil", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectApplyBehavior) {
        if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Behavior", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectCreateHealer) {
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectCreatePersistent) {
        auto77A701A5_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto77A701A5_ai >= 0 && lv_i <= auto77A701A5_ae) || (auto77A701A5_ai < 0 && lv_i >= auto77A701A5_ae) ) ; lv_i += auto77A701A5_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ExpireEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinalEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InitialEffect", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectLaunchMissile) {
        if (((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "FinishEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "ImpactEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "InterruptEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "LaunchEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "PeriodicEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchEffect", lp_player))) == true) || (lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchHitArriveEffect", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TransferBehavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectSet) {
        autoCF29F7A6_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoCF29F7A6_ai >= 0 && lv_i <= autoCF29F7A6_ae) || (autoCF29F7A6_ai < 0 && lv_i >= autoCF29F7A6_ae) ) ; lv_i += autoCF29F7A6_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto6E648D35_val == lib1_gv_cEffectTeleport) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "TeleportEffect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectSearchArea) {
        autoFBD42E2C_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "AreaArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoFBD42E2C_ai >= 0 && lv_i <= autoFBD42E2C_ae) || (autoFBD42E2C_ai < 0 && lv_i >= autoFBD42E2C_ae) ) ; lv_i += autoFBD42E2C_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "AreaArray[" + IntToString(lv_i) + "].Effect", lp_player))) == true)) {
                return true;
            }

        }
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if ((lib1_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SearchFilters", lp_player)) == false)) {
                return true;
            }

        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectModifyUnit) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Ability)) {
            autoE2EFA82E_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "Cost", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (autoE2EFA82E_ai >= 0 && lv_i <= autoE2EFA82E_ae) || (autoE2EFA82E_ai < 0 && lv_i >= autoE2EFA82E_ae) ) ; lv_i += autoE2EFA82E_ai ) {
                if ((StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "Cost[" + IntToString(lv_i) + "].Abil", lp_player)) == lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND)) {
                    return true;
                }

            }
        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectDamage) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if (((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Amount", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrent[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(0) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(1) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "VitalFractionCurrentRandom[" + IntToString(2) + "]", lp_player) > 0.0) || (libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogEffect, lp_effect, "Random", lp_player) > 0.0))) {
                return true;
            }

        }

    }
    else if (auto6E648D35_val == lib1_gv_cEffectCreateUnit) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnEffect", lp_player))) == true)) {
            return true;
        }

        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            auto4D2557CE_ae = (CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player) - 1);
            lv_i = 0;
            for ( ; ( (auto4D2557CE_ai >= 0 && lv_i <= auto4D2557CE_ae) || (auto4D2557CE_ai < 0 && lv_i >= auto4D2557CE_ae) ) ; lv_i += auto4D2557CE_ai ) {
                if ((lib1_gf_UnitIsDanger(lp_player, (CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                    return true;
                }

            }
        }

        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Units)) {
            lv_unitscount = CatalogFieldValueCount(c_gameCatalogEffect, lp_effect, "SpawnUnit", lp_player);
            if ((lv_unitscount > 0)) {
                auto4300E4FF_ae = (lv_unitscount - 1);
                lv_i = 0;
                for ( ; ( (auto4300E4FF_ai >= 0 && lv_i <= auto4300E4FF_ae) || (auto4300E4FF_ai < 0 && lv_i >= auto4300E4FF_ae) ) ; lv_i += auto4300E4FF_ai ) {
                    lib1_gf_ListStringInclude(lib1_gv_byPassUnits, CatalogFieldValueGet(c_gameCatalogEffect, lp_effect, "SpawnUnit[" + IntToString(lv_i) + "]", lp_player));
                }
                return true;
            }

        }

    }
    else {
    }
    return false;
}

bool lib1_gf_ByPassAbility (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int auto2174C6F8_val;
    int auto5ED49020_ae;
    const int auto5ED49020_ai = 1;
    int auto4A07C5AF_ae;
    const int auto4A07C5AF_ai = 1;
    int autoC8E18365_ae;
    const int autoC8E18365_ai = 1;
    int auto4B98EEA8_ae;
    const int auto4B98EEA8_ai = 1;
    int autoF9AB6B8B_ae;
    const int autoF9AB6B8B_ai = 1;
    int autoC8FCECA2_ae;
    const int autoC8FCECA2_ai = 1;
    int auto0837961E_ae;
    const int auto0837961E_ai = 1;
    int auto576BD355_ae;
    const int auto576BD355_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    auto2174C6F8_val = CatalogEntryClass(c_gameCatalogAbil, lp_ability);
    if (auto2174C6F8_val == lib1_gv_cAbilityAugment) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect", lp_player))) == true)) {
            return true;
        }

    }
    else if (auto2174C6F8_val == lib1_gv_cAbilityArmMagazine) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true) && (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto5ED49020_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "EffectArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto5ED49020_ai >= 0 && lv_i <= auto5ED49020_ae) || (auto5ED49020_ai < 0 && lv_i >= auto5ED49020_ae) ) ; lv_i += auto5ED49020_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "EffectArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto2174C6F8_val == lib1_gv_cAbilityBehavior) {
        if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true)) {
            return true;
        }

        auto4A07C5AF_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "BehaviorArray", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto4A07C5AF_ai >= 0 && lv_i <= auto4A07C5AF_ae) || (auto4A07C5AF_ai < 0 && lv_i >= auto4A07C5AF_ae) ) ; lv_i += auto4A07C5AF_ai ) {
            if ((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "BehaviorArray[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
    }
    else if (auto2174C6F8_val == lib1_gv_cAbilityEffectInstant) {
        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        autoC8E18365_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoC8E18365_ai >= 0 && lv_i <= autoC8E18365_ae) || (autoC8E18365_ai < 0 && lv_i >= autoC8E18365_ae) ) ; lv_i += autoC8E18365_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto4B98EEA8_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto4B98EEA8_ai >= 0 && lv_i <= auto4B98EEA8_ae) || (auto4B98EEA8_ai < 0 && lv_i >= auto4B98EEA8_ae) ) ; lv_i += auto4B98EEA8_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        autoF9AB6B8B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoF9AB6B8B_ai >= 0 && lv_i <= autoF9AB6B8B_ae) || (autoF9AB6B8B_ai < 0 && lv_i >= autoF9AB6B8B_ae) ) ; lv_i += autoF9AB6B8B_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PostEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else if (auto2174C6F8_val == lib1_gv_cAbilityEffectTarget) {
        if ((lib1_gv_sEARCHMODE == lib1_ge_SearchMode_Agressive)) {
            if ((CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "TargetFilters", lp_player) > 0) && (lib1_gf_FilterEnemyisExcluded(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "TargetFilters[" + IntToString(0) + "]", lp_player)) == false)) {
                return true;
            }

        }

        if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CalldownEffect", lp_player))) == true)) {
            return true;
        }

        autoC8FCECA2_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (autoC8FCECA2_ai >= 0 && lv_i <= autoC8FCECA2_ae) || (autoC8FCECA2_ai < 0 && lv_i >= autoC8FCECA2_ae) ) ; lv_i += autoC8FCECA2_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "CastOutroTimeEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto0837961E_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "Effect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto0837961E_ai >= 0 && lv_i <= auto0837961E_ae) || (auto0837961E_ai < 0 && lv_i >= auto0837961E_ae) ) ; lv_i += auto0837961E_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Effect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        auto576BD355_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lp_ability, "PrepEffect", lp_player) - 1);
        lv_i = 0;
        for ( ; ( (auto576BD355_ai >= 0 && lv_i <= auto576BD355_ae) || (auto576BD355_ai < 0 && lv_i >= auto576BD355_ae) ) ; lv_i += auto576BD355_ai ) {
            if ((lib1_gf_ByPassEffect(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PrepEffect[" + IntToString(lv_i) + "]", lp_player))) == true)) {
                return true;
            }

        }
        if (((lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "StateBehavior", lp_player))) == true) || (lib1_gf_ByPassBehavior(lp_player, (CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "PreEffectBehavior.Behavior", lp_player))) == true))) {
            return true;
        }

    }
    else {
    }
    return false;
}

bool lib1_gf_UpgradeIsUsefulForPlayer (int lp_player, string lp_upgrade) {
    // Variable Declarations
    int lv_i;
    string lv_upgradeEntry;
    string lv_unitEntry;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int autoE5EEE935_ae;
    const int autoE5EEE935_ai = 1;
    int autoE8382671_ae;
    const int autoE8382671_ai = 1;
    string auto89A2DAAC_val;
    int auto17C976C8_ae;
    const int auto17C976C8_ai = 1;
    int auto05072E62_ae;
    const int auto05072E62_ai = 1;
    int autoD6801CAC_ae;
    const int autoD6801CAC_ai = 1;
    int auto868CD0D4_ae;
    const int auto868CD0D4_ai = 1;
    int auto4D1EE2DF_ae;
    const int auto4D1EE2DF_ai = 1;

    // Variable Initialization
    lv_upgradeEntry = lp_upgrade;
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    autoE5EEE935_ae = lib1_gv_cACHESIZE_UPGRADES;
    lv_i = 1;
    for ( ; ( (autoE5EEE935_ai >= 0 && lv_i <= autoE5EEE935_ae) || (autoE5EEE935_ai < 0 && lv_i >= autoE5EEE935_ae) ) ; lv_i += autoE5EEE935_ai ) {
        if ((lib1_gv_cACHE_UPGRADES[lv_i] == lv_upgradeEntry)) {
            return false;
        }

    }
    if ((PlayerRace(lp_player) != "Neut") && (lib1_gf_GetUpgradeRace(lv_upgradeEntry) != PlayerRace(lp_player))) {
        return false;
    }

    autoE8382671_ae = (CatalogFieldValueCount(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray", lp_player) - 1);
    lv_effectArrayIndex = 0;
    for ( ; ( (autoE8382671_ai >= 0 && lv_effectArrayIndex <= autoE8382671_ae) || (autoE8382671_ai < 0 && lv_effectArrayIndex >= autoE8382671_ae) ) ; lv_effectArrayIndex += autoE8382671_ai ) {
        lv_effectArrayReference = StringReplaceWord(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeEntry, "EffectArray[" + IntToString(lv_effectArrayIndex) + "].Reference", lp_player), ",", " ", c_stringReplaceAll, c_stringCase);
        lv_effectArrayType = StringWord(lv_effectArrayReference, 1);
        lv_effectArrayLink = StringWord(lv_effectArrayReference, 2);
        auto89A2DAAC_val = lv_effectArrayType;
        if (auto89A2DAAC_val == "Behavior") {
            auto17C976C8_ae = lib1_gv_cACHESIZE_BEHAVIORS;
            lv_i = 1;
            for ( ; ( (auto17C976C8_ai >= 0 && lv_i <= auto17C976C8_ae) || (auto17C976C8_ai < 0 && lv_i >= auto17C976C8_ae) ) ; lv_i += auto17C976C8_ai ) {
                if ((lib1_gv_cACHE_BEHAVIORS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto89A2DAAC_val == "Abil") {
            auto05072E62_ae = lib1_gv_cACHESIZE_ABILITIES;
            lv_i = 1;
            for ( ; ( (auto05072E62_ai >= 0 && lv_i <= auto05072E62_ae) || (auto05072E62_ai < 0 && lv_i >= auto05072E62_ae) ) ; lv_i += auto05072E62_ai ) {
                if ((lib1_gv_cACHE_ABILITIES[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto89A2DAAC_val == "Effect") {
            autoD6801CAC_ae = lib1_gv_cACHESIZE_EFFECTS;
            lv_i = 1;
            for ( ; ( (autoD6801CAC_ai >= 0 && lv_i <= autoD6801CAC_ae) || (autoD6801CAC_ai < 0 && lv_i >= autoD6801CAC_ae) ) ; lv_i += autoD6801CAC_ai ) {
                if ((lib1_gv_cACHE_EFFECTS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto89A2DAAC_val == "Weapon") {
            auto868CD0D4_ae = lib1_gv_cACHESIZE_WEAPONS;
            lv_i = 1;
            for ( ; ( (auto868CD0D4_ai >= 0 && lv_i <= auto868CD0D4_ae) || (auto868CD0D4_ai < 0 && lv_i >= auto868CD0D4_ae) ) ; lv_i += auto868CD0D4_ai ) {
                if ((lib1_gv_cACHE_WEAPONS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else if (auto89A2DAAC_val == "Unit") {
            auto4D1EE2DF_ae = lib1_gv_cACHESIZE_UNITS;
            lv_i = 1;
            for ( ; ( (auto4D1EE2DF_ai >= 0 && lv_i <= auto4D1EE2DF_ae) || (auto4D1EE2DF_ai < 0 && lv_i >= auto4D1EE2DF_ae) ) ; lv_i += auto4D1EE2DF_ai ) {
                if ((lib1_gv_cACHE_UNITS[lv_i] == (lv_effectArrayLink))) {
                    return true;
                }

            }
        }
        else {
        }
    }
    return false;
}

string lib1_gf_GetUpgradeRace (string lp_upgrade) {
    // Variable Declarations
    string lv_editorCategories;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_editorCategories = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny);

    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny));
}

bool lib1_gf_UnitIsDanger (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_ability;
    string lv_behavior;
    bool lv_isDanger;

    // Automatic Variable Declarations
    int auto5EFDCF6A_ae;
    const int auto5EFDCF6A_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false)) {
        return false;
    }

    if ((StringFind(lib1_gv_cACHE_DANGER_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_UNITS, (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return false;
    }

    if ((CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) > 0)) {
        lib1_gv_cACHE_DANGER_UNITS = (lib1_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
        return true;
    }

    auto5EFDCF6A_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto5EFDCF6A_ai >= 0 && lv_i <= auto5EFDCF6A_ae) || (auto5EFDCF6A_ai < 0 && lv_i >= auto5EFDCF6A_ae) ) ; lv_i += auto5EFDCF6A_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true)) {
            lib1_gv_cACHE_DANGER_UNITS = (lib1_gv_cACHE_DANGER_UNITS + (lp_unit) + " ");
            return true;
        }

    }
    lib1_gv_cACHE_SAFE_UNITS = (lib1_gv_cACHE_SAFE_UNITS + (lp_unit) + " ");
    return false;
}

bool lib1_gf_UnitisDetector (int lp_player, string lp_unitType) {
    // Variable Declarations
    string lv_ability;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoEFA01C04_ae;
    int autoEFA01C04_var;
    int autoF91A7B2C_ae;
    int autoF91A7B2C_var;

    // Variable Initialization

    // Implementation
    autoEFA01C04_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "AbilArray", lp_player) - 1);
    autoEFA01C04_var = 0;
    for ( ; autoEFA01C04_var <= autoEFA01C04_ae; autoEFA01C04_var += 1 ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "AbilArray[" + IntToString(autoEFA01C04_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == true) && (lib1_gf_AbilityIsDetector(lp_player, lv_ability) == true)) {
            continue;
        }

    }
    autoF91A7B2C_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unitType, "BehaviorArray", lp_player) - 1);
    autoF91A7B2C_var = 0;
    for ( ; autoF91A7B2C_var <= autoF91A7B2C_ae; autoF91A7B2C_var += 1 ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unitType, "BehaviorArray[" + IntToString(autoF91A7B2C_var) + "].Link", lp_player));
        if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (lib1_gf_BehaviorisDetector(lp_player, lv_behavior) == true)) {
            return true;
        }

    }
    return false;
}

bool lib1_gf_AbilityIsDanger (int lp_player, string lp_ability) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DANGER_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_ABILITIES, (" " + (lp_ability) + " "), c_stringCase) > 0)) {
        return false;
    }

    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = lib1_gf_ByPassAbility(lp_player, lp_ability);
    if ((lv_isDanger == true)) {
        lib1_gv_cACHE_DANGER_ABILITIES = (lib1_gv_cACHE_DANGER_ABILITIES + (lp_ability) + " ");
    }
    else {
        lib1_gv_cACHE_SAFE_ABILITIES = (lib1_gv_cACHE_SAFE_ABILITIES + (lp_ability) + " ");
    }
    return lv_isDanger;
}

bool lib1_gf_AbilityIsDetector (int lp_player, string lp_ability) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Detection;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return lib1_gf_ByPassAbility(lp_player, lp_ability);
}

bool lib1_gf_BehaviorisDanger (int lp_player, string lp_behavior) {
    // Variable Declarations
    bool lv_isDanger;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DANGER_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return true;
    }

    if ((StringFind(lib1_gv_cACHE_SAFE_BEHAVIOR, (" " + (lp_behavior) + " "), c_stringCase) > 0)) {
        return false;
    }

    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Agressive;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lv_isDanger = lib1_gf_ByPassBehavior(lp_player, lp_behavior);
    if ((lv_isDanger == true)) {
        lib1_gv_cACHE_DANGER_BEHAVIOR = (lib1_gv_cACHE_DANGER_BEHAVIOR + (lp_behavior) + " ");
    }
    else {
        lib1_gv_cACHE_SAFE_BEHAVIOR = (lib1_gv_cACHE_SAFE_BEHAVIOR + (lp_behavior) + " ");
    }
    return lv_isDanger;
}

bool lib1_gf_BehaviorisDetector (int lp_player, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Detection;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    return lib1_gf_ByPassBehavior(lp_player, lp_behavior);
}

bool lib1_gf_BehaviorUsesAbilityCommand (int lp_player, string lp_behavior, abilcmd lp_abil) {
    // Variable Declarations
    bool lv_value;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Ability;
    lib1_gv_cACHE_TMPEFFECTS_SIZE = 0;
    lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND = lp_abil;
    lv_value = lib1_gf_ByPassBehavior(lp_player, lp_behavior);
    lib1_gv_bYPASS_SEARCH_ABILITY_COMMAND = null;
    return lv_value;
}

bool lib1_gf_Canbebuilton (unit lp_unit, point lp_point) {
    int init_i;

    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    fixed lv_r;
    int[16] lv_enemyDefenseBuildingTickCount;

    // Automatic Variable Declarations
    int auto3D392B76_ae;
    const fixed auto3D392B76_ai = 0.5;
    int autoDA044C96_ae;
    const fixed autoDA044C96_ai = 0.5;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_enemyDefenseBuildingTickCount[init_i] = 2;
    }

    // Implementation
    if ((RegionContainsPoint(RegionPlayableMap(), lp_point) == false)) {
        return false;
    }

    auto3D392B76_ae = CeilingI((PointGetX(lp_point) + lv_r));
    lv_x = FloorI((PointGetX(lp_point) - lv_r));
    for ( ; ( (auto3D392B76_ai >= 0 && lv_x <= auto3D392B76_ae) || (auto3D392B76_ai < 0 && lv_x >= auto3D392B76_ae) ) ; lv_x += auto3D392B76_ai ) {
        autoDA044C96_ae = CeilingI((PointGetY(lp_point) + lv_r));
        lv_y = FloorI((PointGetY(lp_point) - lv_r));
        for ( ; ( (autoDA044C96_ai >= 0 && lv_y <= autoDA044C96_ae) || (autoDA044C96_ai < 0 && lv_y >= autoDA044C96_ae) ) ; lv_y += autoDA044C96_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (RegionContainsPoint(RegionCircle(lp_point, lv_r), Point(lv_x, lv_y)) == true) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, lv_y), lv_enemyDefenseBuildingTickCount[UnitGetOwner(lp_unit)]) == true)) {
                return true;
            }

        }
    }
    return false;
}

bool lib1_gf_Canbebuiltonabranch (point lp_point, int lp_number) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    fixed autoC65657C6_ae;
    const fixed autoC65657C6_ai = 0.5;
    fixed autoF91E1EF2_ae;
    const fixed autoF91E1EF2_ai = 0.5;

    // Variable Initialization

    // Implementation
    autoC65657C6_ae = (PointGetX(lp_point) + (lp_number / 2.0));
    lv_x = (PointGetX(lp_point) - (lp_number / 2.0));
    for ( ; ( (autoC65657C6_ai >= 0 && lv_x <= autoC65657C6_ae) || (autoC65657C6_ai < 0 && lv_x >= autoC65657C6_ae) ) ; lv_x += autoC65657C6_ai ) {
        autoF91E1EF2_ae = (PointGetY(lp_point) + (lp_number / 2.0));
        lv_y = (PointGetY(lp_point) - (lp_number / 2.0));
        for ( ; ( (autoF91E1EF2_ai >= 0 && lv_y <= autoF91E1EF2_ae) || (autoF91E1EF2_ai < 0 && lv_y >= autoF91E1EF2_ae) ) ; lv_y += autoF91E1EF2_ai ) {
            if ((RegionContainsPoint(RegionPlayableMap(), Point(lv_x, lv_y)) == true) && (PathingType(Point(lv_x, lv_y)) != c_pathingUnpathable) && (PathingType(Point(lv_x, lv_y)) != c_pathingCliff)) {
            }
            else {
                return false;
            }
        }
    }
    return true;
}

void lib1_gf_ResolveUnitAffectedUpgrades (int lp_player) {
    // Variable Declarations
    int lv_i;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_behavior;
    int lv_affectedUnitIndex;
    int lv_effectArrayIndex;
    string lv_effectArrayReference;
    string lv_effectArrayType;
    string lv_effectArrayLink;

    // Automatic Variable Declarations
    int auto26D4E852_catalog;
    int auto26D4E852_i;

    // Variable Initialization
    lv_effectArrayReference = "";
    lv_effectArrayType = "";
    lv_effectArrayLink = "";

    // Implementation
    auto26D4E852_catalog = c_gameCatalogUpgrade;
    auto26D4E852_i = 1;
    for ( ; auto26D4E852_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; auto26D4E852_i += 1 ) {
        lv_upgrade = CatalogEntryGet(auto26D4E852_catalog, auto26D4E852_i);
        if ((lib1_gf_UpgradeIsUsefulForPlayer(lp_player, lv_upgrade) == true)) {
            lib1_gf_CacheUpgrade(lp_player, lv_upgrade, true);
        }

    }
}

bool lib1_gf_AbilityIsIgnored (int lp_player, string lp_ability) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoC4545905_ae;
    const int autoC4545905_ai = 1;

    // Variable Initialization

    // Implementation
    if ((CatalogEntryIsValid(c_gameCatalogAbil, lp_ability) == false)) {
        return false;
    }

    autoC4545905_ae = UserDataInstanceCount("MonobattlesIgnore");
    lv_i = 1;
    for ( ; ( (autoC4545905_ai >= 0 && lv_i <= autoC4545905_ae) || (autoC4545905_ai < 0 && lv_i >= autoC4545905_ae) ) ; lv_i += autoC4545905_ai ) {
        if ((UserDataGetGameLink("MonobattlesIgnore", UserDataInstance("MonobattlesIgnore", lv_i), "Ability", 1) == lp_ability)) {
            return true;
        }

    }
    return false;
}

text lib1_gf_UTC_NameOfUnitType (string lp_pUnitType) {
    // Variable Declarations
    text lv_vText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_vText = UnitTypeGetName(lp_pUnitType);
    if ((lp_pUnitType == "HHMagneticMineWeapon")) {
        lv_vText = UnitTypeGetName("HHMagneticMine");
    }
    else if ((lp_pUnitType == "HornerAirFleetStrafer")) {
        lv_vText = StringExternal("Button/Name/HornerAirFleet");
    }
    else if ((lp_pUnitType == "SILiberatorCloud")) {
        lv_vText = UnitTypeGetName("SILiberator");
    }
    else if ((lp_pUnitType == "SOAThermalLanceTargeter")) {
        lv_vText = StringExternal("Button/Name/SOAThermalLance");
    }
    else if ((lp_pUnitType == "BroodlingEscortStetmann")) {
        lv_vText = UnitTypeGetName("BroodLordStetmann");
    }
    else if ((lp_pUnitType == "BroodlingEscort")) {
        lv_vText = UnitTypeGetName("BroodLord");
    }
    return lv_vText;
}

string lib1_gf_UT_StageToString (int lp_pStage) {
    // Variable Declarations
    string lv_vStage;

    // Automatic Variable Declarations
    int auto3E615ECB_val;

    // Variable Initialization
    lv_vStage = "";

    // Implementation
    auto3E615ECB_val = lp_pStage;
    if (auto3E615ECB_val == c_unitAbilStageAll) {
        lv_vStage = "Any";
    }
    else if (auto3E615ECB_val == c_unitAbilStageQueue) {
        lv_vStage = "Queue";
    }
    else if (auto3E615ECB_val == c_unitAbilStageExecute) {
        lv_vStage = "Execute";
    }
    else if (auto3E615ECB_val == c_unitAbilStageCancel) {
        lv_vStage = "Cancel";
    }
    else if (auto3E615ECB_val == c_unitAbilStagePreempt) {
        lv_vStage = "Preempt";
    }
    else if (auto3E615ECB_val == c_unitAbilStageComplete) {
        lv_vStage = "Complete";
    }
    else if (auto3E615ECB_val == c_unitAbilStagePause) {
        lv_vStage = "Pause";
    }
    else if (auto3E615ECB_val == c_unitAbilStageUnpause) {
        lv_vStage = "Unpause";
    }
    else {
        lv_vStage = "-";
    }
    return lv_vStage;
}

trigger auto_lib1_gf_UT_Rise_Trigger = null;
unit auto_lib1_gf_UT_Rise_lp_pUnit;

void lib1_gf_UT_Rise (unit lp_pUnit) {
    auto_lib1_gf_UT_Rise_lp_pUnit = lp_pUnit;

    if (auto_lib1_gf_UT_Rise_Trigger == null) {
        auto_lib1_gf_UT_Rise_Trigger = TriggerCreate("auto_lib1_gf_UT_Rise_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UT_Rise_Trigger, false, false);
}

bool auto_lib1_gf_UT_Rise_TriggerFunc (bool testConds, bool runActions) {
    unit lp_pUnit = auto_lib1_gf_UT_Rise_lp_pUnit;

    // Variable Declarations
    int lv_vB;

    // Automatic Variable Declarations
    const int auto1D10540F_n = 10;
    int auto1D10540F_i;

    // Variable Initialization
    lv_vB = 10;

    // Implementation
    for (auto1D10540F_i = 1; auto1D10540F_i <= auto1D10540F_n; auto1D10540F_i += 1) {
        lv_vB -= 1;
        libNtve_gf_SendActorMessageToUnit(lp_pUnit, "SetHeight -0." +IntToString(lv_vB));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

string lib1_gf_UT_SeparatedSubstring (string lp_pString, int lp_pN, string lp_pSeparator) {
    // Variable Declarations
    const string lv_vSEP = "SEP#";
    string lv_vString;
    int lv_vA;

    // Automatic Variable Declarations
    int auto4D0F276E_ae;
    const int auto4D0F276E_ai = 1;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto4D0F276E_ae = lp_pN;
    lv_vA = 1;
    for ( ; ( (auto4D0F276E_ai >= 0 && lv_vA <= auto4D0F276E_ae) || (auto4D0F276E_ai < 0 && lv_vA >= auto4D0F276E_ae) ) ; lv_vA += auto4D0F276E_ai ) {
        lv_vString = StringReplaceWord(lv_vString, lp_pSeparator, (lv_vSEP + IntToString(lv_vA)), 1, c_stringCase);
    }
    if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) > 0)) {
        return StringSub(lv_vString, 1, (StringFind(lv_vString, (lv_vSEP + "1"), c_stringCase)-1));
    }
    else if ((lp_pN == 1) && (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return lv_vString;
    }
    else if ((StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase) == -1)) {
        return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), StringLength(lv_vString));
    }
    return StringSub(lv_vString, (StringFind(lv_vString, (lv_vSEP + IntToString((lp_pN-1))), c_stringCase)+1+StringLength(lv_vSEP)), (StringFind(lv_vString, (lv_vSEP + IntToString(lp_pN)), c_stringCase)-1));
}

int lib1_gf_UT_SingleHexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;

    // Automatic Variable Declarations
    string autoDB7022CA_val;

    // Variable Initialization

    // Implementation
    autoDB7022CA_val = lp_pString;
    if (autoDB7022CA_val == "A") {
        lv_vOutput += 10;
    }
    else if (autoDB7022CA_val == "a") {
        lv_vOutput += 10;
    }
    else if (autoDB7022CA_val == "B") {
        lv_vOutput += 11;
    }
    else if (autoDB7022CA_val == "b") {
        lv_vOutput += 11;
    }
    else if (autoDB7022CA_val == "C") {
        lv_vOutput += 12;
    }
    else if (autoDB7022CA_val == "c") {
        lv_vOutput += 12;
    }
    else if (autoDB7022CA_val == "D") {
        lv_vOutput += 13;
    }
    else if (autoDB7022CA_val == "d") {
        lv_vOutput += 13;
    }
    else if (autoDB7022CA_val == "E") {
        lv_vOutput += 14;
    }
    else if (autoDB7022CA_val == "e") {
        lv_vOutput += 14;
    }
    else if (autoDB7022CA_val == "F") {
        lv_vOutput += 15;
    }
    else if (autoDB7022CA_val == "f") {
        lv_vOutput += 15;
    }
    else {
        lv_vOutput += StringToInt(lp_pString);
    }
    return lv_vOutput;
}

void lib1_gf_UT_DialogCounting (int lp_pFrom, int lp_pTo, fixed lp_pTime, int lp_pDialogLabel, text lp_pTextBefore, text lp_pTextAfter, playergroup lp_pPlayers) {
    // Variable Declarations
    const fixed lv_vTimeInterval = 0.125;
    int lv_vDiff;
    int lv_vCurrent;
    int lv_vSteps;
    int lv_vChange;

    // Automatic Variable Declarations
    int autoD8EA7191_n;
    int autoD8EA7191_i;

    // Variable Initialization
    lv_vDiff = AbsI((lp_pFrom - lp_pTo));
    lv_vCurrent = lp_pFrom;
    lv_vSteps = FixedToInt((lp_pTime / lv_vTimeInterval));
    lv_vChange = (lv_vDiff / lv_vSteps);

    // Implementation
    if ((lp_pTo == lp_pFrom)) {
        return ;
    }

    if ((lp_pTo < lp_pFrom)) {
        lv_vChange *= -1;
    }

    SoundPlayForPlayer(SoundLink("UI_BNet_ProgressionCounter_Loop1", -1), c_maxPlayers, lp_pPlayers, 100.0, 0.0);
    autoD8EA7191_n = lv_vSteps;
    for (autoD8EA7191_i = 1; autoD8EA7191_i <= autoD8EA7191_n; autoD8EA7191_i += 1) {
        Wait(lv_vTimeInterval, c_timeGame);
        lv_vCurrent += lv_vChange;
        TextExpressionSetToken("Param/Expression/lib_1_15CF0020", "A", lp_pTextBefore);
        TextExpressionSetToken("Param/Expression/lib_1_15CF0020", "B", IntToText(lv_vCurrent));
        TextExpressionSetToken("Param/Expression/lib_1_15CF0020", "C", lp_pTextAfter);
        libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_1_15CF0020"), PlayerGroupAll());
    }
    SoundStop(SoundLastPlayed(), false);
    TextExpressionSetToken("Param/Expression/lib_1_7CFEB626", "A", lp_pTextBefore);
    TextExpressionSetToken("Param/Expression/lib_1_7CFEB626", "B", IntToText(lp_pTo));
    TextExpressionSetToken("Param/Expression/lib_1_7CFEB626", "C", lp_pTextAfter);
    libNtve_gf_SetDialogItemText(lp_pDialogLabel, TextExpressionAssemble("Param/Expression/lib_1_7CFEB626"), PlayerGroupAll());
}

int lib1_gf_UT_1StringToInteger (string lp_pLetter) {
    // Automatic Variable Declarations
    string autoC97603F8_val;

    // Implementation
    autoC97603F8_val = lp_pLetter;
    if (autoC97603F8_val == "a") {
        return 10;
    }
    else if (autoC97603F8_val == "b") {
        return 11;
    }
    else if (autoC97603F8_val == "c") {
        return 12;
    }
    else if (autoC97603F8_val == "d") {
        return 13;
    }
    else if (autoC97603F8_val == "e") {
        return 14;
    }
    else if (autoC97603F8_val == "f") {
        return 15;
    }
    else if (autoC97603F8_val == "g") {
        return 16;
    }
    else if (autoC97603F8_val == "h") {
        return 17;
    }
    else if (autoC97603F8_val == "i") {
        return 18;
    }
    else if (autoC97603F8_val == "j") {
        return 19;
    }
    else if (autoC97603F8_val == "k") {
        return 20;
    }
    else if (autoC97603F8_val == "l") {
        return 21;
    }
    else if (autoC97603F8_val == "m") {
        return 22;
    }
    else if (autoC97603F8_val == "n") {
        return 23;
    }
    else if (autoC97603F8_val == "o") {
        return 24;
    }
    else if (autoC97603F8_val == "p") {
        return 25;
    }
    else if (autoC97603F8_val == "q") {
        return 26;
    }
    else if (autoC97603F8_val == "r") {
        return 27;
    }
    else if (autoC97603F8_val == "s") {
        return 28;
    }
    else if (autoC97603F8_val == "t") {
        return 29;
    }
    else if (autoC97603F8_val == "u") {
        return 30;
    }
    else if (autoC97603F8_val == "v") {
        return 31;
    }
    else if (autoC97603F8_val == "w") {
        return 32;
    }
    else if (autoC97603F8_val == "x") {
        return 33;
    }
    else if (autoC97603F8_val == "y") {
        return 34;
    }
    else if (autoC97603F8_val == "z") {
        return 35;
    }
    else {
        return StringToInt(lp_pLetter);
    }
}

int lib1_gf_UT_3StringsToInteger (string lp_pString) {
    // Variable Declarations
    string lv_v1;
    string lv_v2;
    string lv_v3;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_v1 = StringSub(lp_pString, 1, 1);
    lv_v2 = StringSub(lp_pString, 2, 2);
    lv_v3 = StringSub(lp_pString, 3, 3);

    // Implementation
    return (lib1_gf_UT_1StringToInteger(lv_v1)*10000 + lib1_gf_UT_1StringToInteger(lv_v2)*100 + lib1_gf_UT_1StringToInteger(lv_v3));
}

string lib1_gf_UT_AddStringsInfront (int lp_pDigits, string lp_pString, fixed lp_pInputReal, int lp_pPrecision) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto9E383D11_n;
    int auto9E383D11_i;

    // Variable Initialization
    lv_vString = FixedToString(lp_pInputReal, lp_pPrecision);

    // Implementation
    auto9E383D11_n = (lp_pDigits - StringLength(lv_vString));
    for (auto9E383D11_i = 1; auto9E383D11_i <= auto9E383D11_n; auto9E383D11_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return lv_vString;
}

text lib1_gf_UT_AddStringsInfronttext (int lp_pDigits, string lp_pString, int lp_pInputNumber) {
    // Variable Declarations
    string lv_vString;

    // Automatic Variable Declarations
    int auto4BA02030_n;
    int auto4BA02030_i;

    // Variable Initialization
    lv_vString = IntToString(lp_pInputNumber);

    // Implementation
    auto4BA02030_n = (lp_pDigits - StringLength(lv_vString));
    for (auto4BA02030_i = 1; auto4BA02030_i <= auto4BA02030_n; auto4BA02030_i += 1) {
        lv_vString = (lp_pString + lv_vString);
    }
    return StringToText(lv_vString);
}

string lib1_gf_UT_FormatInteger (int lp_pNumber, string lp_pDividingSymbol) {
    int init_i;

    // Variable Declarations
    int lv_vNumber;
    int[4] lv_vINT;
    string[4] lv_vSTRING;
    string lv_vSign;
    string lv_vDivingSymbol;
    int lv_vA;
    bool lv_vFirst;

    // Automatic Variable Declarations
    const int auto009413BD_ae = 3;
    const int auto009413BD_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_vSTRING[init_i] = "";
    }
    lv_vSign = "";
    lv_vDivingSymbol = "";
    lv_vFirst = true;

    // Implementation
    lv_vNumber = AbsI(lp_pNumber);
    if ((lp_pNumber != lv_vNumber)) {
        lv_vSign = "-";
    }

    lv_vINT[0] = (lv_vNumber / 1000000000);
    lv_vNumber -= (lv_vINT[0] * 1000000000);
    lv_vINT[1] = (lv_vNumber / 1000000);
    lv_vNumber -= (lv_vINT[1] * 1000000);
    lv_vINT[2] = (lv_vNumber / 1000);
    lv_vNumber -= (lv_vINT[2] * 1000);
    lv_vINT[3] = lv_vNumber;
    lv_vDivingSymbol = lp_pDividingSymbol;
    lv_vA = 0;
    for ( ; ( (auto009413BD_ai >= 0 && lv_vA <= auto009413BD_ae) || (auto009413BD_ai < 0 && lv_vA >= auto009413BD_ae) ) ; lv_vA += auto009413BD_ai ) {
        if ((lv_vA == 3)) {
            lv_vDivingSymbol = "";
        }

        if ((lv_vINT[lv_vA] != 0) && (lv_vFirst == true)) {
            lv_vFirst = false;
            lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
        }
        else {
            if ((lv_vINT[lv_vA] >= 100)) {
                lv_vSTRING[lv_vA] = (IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
            }
            else {
                if ((lv_vINT[lv_vA] >= 10)) {
                    lv_vSTRING[lv_vA] = ("0" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                }
                else {
                    if ((lv_vINT[lv_vA] == 0) && (lv_vFirst == true)) {
                        lv_vSTRING[lv_vA] = "";
                    }
                    else {
                        lv_vSTRING[lv_vA] = ("00" + IntToString(lv_vINT[lv_vA]) + lv_vDivingSymbol);
                    }
                }
            }
        }
    }
    return (lv_vSign + lv_vSTRING[0] + lv_vSTRING[1] + lv_vSTRING[2] + lv_vSTRING[3]);
}

text lib1_gf_UT_RealSecondsIntoTimeFormat (fixed lp_pTimeSeconds) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_pTimeSeconds >= 3600.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_6210C0FF", "C", IntToText(TruncI((lp_pTimeSeconds/3600))));
        TextExpressionSetToken("Param/Expression/lib_1_6210C0FF", "A", lib1_gf_UT_AddStringsInfronttext(2, "0", TruncI((ModF(lp_pTimeSeconds, 3600.0)/60))));
        TextExpressionSetToken("Param/Expression/lib_1_6210C0FF", "B", lib1_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_1_6210C0FF");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_272924CC", "A", IntToText(TruncI((lp_pTimeSeconds/60))));
        TextExpressionSetToken("Param/Expression/lib_1_272924CC", "B", lib1_gf_UT_AddStringsInfronttext(2, "0", FixedToInt(ModF(lp_pTimeSeconds, 60.0))));
        return TextExpressionAssemble("Param/Expression/lib_1_272924CC");
    }
}

color lib1_gf_ProgressColor (int lp_minValue, int lp_maxValue, int lp_progress, color lp_color1, color lp_color2, color lp_color3, int lp_steps) {
    // Variable Declarations
    int lv_middle;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Automatic Variable Declarations
    int autoA145E63E_val;

    // Variable Initialization

    // Implementation
    autoA145E63E_val = lp_steps;
    if (autoA145E63E_val == 1) {
        return lp_color1;
    }
    else if (autoA145E63E_val == 2) {
        lv_r = (ColorGetComponent(lp_color1, c_colorComponentRed)+(ColorGetComponent(lp_color2, c_colorComponentRed)-ColorGetComponent(lp_color1, c_colorComponentRed))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_g = (ColorGetComponent(lp_color1, c_colorComponentGreen)+(ColorGetComponent(lp_color2, c_colorComponentGreen)-ColorGetComponent(lp_color1, c_colorComponentGreen))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        lv_b = (ColorGetComponent(lp_color1, c_colorComponentBlue)+(ColorGetComponent(lp_color2, c_colorComponentBlue)-ColorGetComponent(lp_color1, c_colorComponentBlue))*(lp_progress - lp_minValue)/(lp_maxValue - lp_minValue));
        return Color(lv_r, lv_g, lv_b);
    }
    else if (autoA145E63E_val == 3) {
        lv_middle = ((lp_minValue+lp_maxValue)/2);
        if ((lp_progress < lv_middle)) {
            return lib1_gf_ProgressColor(lp_minValue, lv_middle, lp_progress, lp_color1, lp_color2, Color(0,0,0), 2);
        }
        else if ((lp_progress == lv_middle)) {
            return lp_color2;
        }
        else if ((lp_progress > lv_middle)) {
            return lib1_gf_ProgressColor(lv_middle, lp_maxValue, lp_progress, lp_color2, lp_color3, Color(0,0,0), 2);
        }
    }
    else {
    }
    return lp_color1;
}

color lib1_gf_UT_HexToColor (string lp_pString) {
    // Automatic Variable Declarations
    // Implementation
    return Color((lib1_gf_UT_HexToInt(StringSub(lp_pString, 2, 3))/2.55), (lib1_gf_UT_HexToInt(StringSub(lp_pString, 4, 5))/2.55), (lib1_gf_UT_HexToInt(StringSub(lp_pString, 6, 7))/2.55));
}

int lib1_gf_UT_HexToInt (string lp_pString) {
    // Variable Declarations
    int lv_vOutput;
    int lv_vMult;
    int lv_vIter;

    // Automatic Variable Declarations
    const int auto911BD007_ae = 1;
    const int auto911BD007_ai = -1;

    // Variable Initialization
    lv_vMult = 1;

    // Implementation
    lv_vIter = StringLength(lp_pString);
    for ( ; ( (auto911BD007_ai >= 0 && lv_vIter <= auto911BD007_ae) || (auto911BD007_ai < 0 && lv_vIter >= auto911BD007_ae) ) ; lv_vIter += auto911BD007_ai ) {
        lv_vOutput += (lib1_gf_UT_SingleHexToInt(StringSub(lp_pString, lv_vIter, lv_vIter))*lv_vMult);
        lv_vMult *= 16;
    }
    return lv_vOutput;
}

color lib1_gf_UT_NewColor (int lp_pColorNumber) {
    int init_i;

    // Variable Declarations
    color[31] lv_vColor;
    int lv_vINT;
    int lv_vA;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 30; init_i += 1) {
        lv_vColor[init_i] = Color(0,0,0);
    }
    lv_vINT = ModI(lp_pColorNumber, 16);

    // Implementation
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#198100");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#4DC32C");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#BEF43D");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#387E73");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#33C199");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#87FF9D");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#2469BA");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#75CFFA");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#BD5DFD");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#891BB0");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#F16391");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#FEADC0");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#C6281C");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#F95A00");
    lv_vA += 1;
    lv_vColor[lv_vA] = lib1_gf_UT_HexToColor("#FF9E32");
    lv_vA += 1;
    lv_vColor[0] = lib1_gf_UT_HexToColor("#FFE07A");
    return lv_vColor[lv_vINT];
}

playergroup lib1_gf_GetTeamPlayers (int lp_team) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_teams[lp_team];
}

int lib1_gf_GetPlayerTeam (int lp_player) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    const int auto338304DB_ae = 15;
    int auto338304DB_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    auto338304DB_var = 0;
    for ( ; auto338304DB_var <= auto338304DB_ae; auto338304DB_var += 1 ) {
        if ((PlayerGroupHasPlayer(lib1_gv_teams[auto338304DB_var], lp_player) == true)) {
            return auto338304DB_var;
        }

    }
    return 16;
}

playergroup lib1_gf_PlayersofRace (string lp_race) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    playergroup auto52FD22BD_g;
    int auto52FD22BD_var;
    unitgroup autoD2754F49_g;
    int autoD2754F49_u;
    unit autoD2754F49_var;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Implementation
    auto52FD22BD_g = PlayerGroupAll();
    auto52FD22BD_var = -1;
    while (true) {
        auto52FD22BD_var = PlayerGroupNextPlayer(auto52FD22BD_g, auto52FD22BD_var);
        if (auto52FD22BD_var < 0) { break; }
        if ((PlayerRace(auto52FD22BD_var) == lp_race)) {
            PlayerGroupAdd(lv_players, auto52FD22BD_var);
        }
        else {
            autoD2754F49_g = UnitGroup(null, auto52FD22BD_var, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoD2754F49_u = UnitGroupCount(autoD2754F49_g, c_unitCountAll);
            for (;; autoD2754F49_u -= 1) {
                autoD2754F49_var = UnitGroupUnitFromEnd(autoD2754F49_g, autoD2754F49_u);
                if (autoD2754F49_var == null) { break; }
                if ((lib1_gf_GetUnitRace(autoD2754F49_var) == lp_race)) {
                    PlayerGroupAdd(lv_players, auto52FD22BD_var);
                    break;
                }
            }
        }
    }
    return lv_players;
}

void lib1_gf_ShowUI (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupRemove(lib1_gv_uT_UI_Hidden, EventPlayer());
    Wait(1.0, c_timeReal);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    DialogControlSetPosition(DialogControlLastCreated(), lp_players, c_anchorTopLeft, 0, 0);
    UISetFrameVisible(lp_players, c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeMenuBar, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, true);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, true);
}

void lib1_gf_HideUI (playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    PlayerGroupAdd(lib1_gv_uT_UI_Hidden, EventPlayer());
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    DialogControlSetPosition(DialogControlLastCreated(), lp_players, c_anchorTopLeft, 0, -3000);
    UISetFrameVisible(lp_players, c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeSupply, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeMenuBar, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(lp_players, c_syncFrameTypeObjectivePanel, false);
}

bool lib1_gf_UT_HotkeyStore (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    int lv_vIdx;
    bool lv_vStored;

    // Automatic Variable Declarations
    const int auto98BB9B72_ae = lib1_gv_uT_HotkeyStoreLength;
    const int auto98BB9B72_ai = 1;

    // Variable Initialization

    // Implementation
    lv_vIdx = 0;
    for ( ; ( (auto98BB9B72_ai >= 0 && lv_vIdx <= auto98BB9B72_ae) || (auto98BB9B72_ai < 0 && lv_vIdx >= auto98BB9B72_ae) ) ; lv_vIdx += auto98BB9B72_ai ) {
        if ((lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] != "")) {
            BankValueSetFromString(lp_pBank, "ModifiedHotkeys", lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer], lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer]);
            lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][lp_pPlayer] = "";
            lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][lp_pPlayer] = "";
            lv_vStored = true;
        }

    }
    return lv_vStored;
}

void lib1_gf_UT_HotkeyLoad (bank lp_pBank, int lp_pPlayer) {
    // Variable Declarations
    string lv_vButtonName;
    string lv_vHotkeyValue;

    // Automatic Variable Declarations
    int auto2073A41B_ae;
    int auto2073A41B_var;

    // Variable Initialization
    lv_vButtonName = "";
    lv_vHotkeyValue = "";

    // Implementation
    auto2073A41B_ae = BankKeyCount(lp_pBank, "ModifiedHotkeys");
    auto2073A41B_var = 1;
    for ( ; auto2073A41B_var <= auto2073A41B_ae; auto2073A41B_var += 1 ) {
        lv_vButtonName = BankKeyName(lp_pBank, "ModifiedHotkeys", (auto2073A41B_var-1));
        lv_vHotkeyValue = BankValueGetAsString(lp_pBank, "ModifiedHotkeys", lv_vButtonName);
        TextExpressionSetToken("Param/Expression/lib_1_981A9EF0", "A", StringToText(lv_vButtonName));
        TextExpressionSetToken("Param/Expression/lib_1_981A9EF0", "B", StringToText(lv_vHotkeyValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_981A9EF0"), false);
        CatalogFieldValueSet(c_gameCatalogButton, (lv_vButtonName), "Hotkey", lp_pPlayer, ("Letter/" + lv_vHotkeyValue));
    }
}

void lib1_gf_UT_UpdateUnitInfo (unit lp_pUnit) {
    // Variable Declarations
    string lv_vBeh;
    text lv_vBehNumber;
    text lv_vText;
    int lv_vTextTagNormal;
    int lv_vTextTagHidden;
    text lv_vDuration;

    // Automatic Variable Declarations
    unit auto70388C27_u;
    int auto70388C27_i;

    // Variable Initialization
    lv_vTextTagNormal = lib1_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal);
    lv_vTextTagHidden = lib1_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden);

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_11766AF4", "A", StringToText((UnitGetType(lp_pUnit))));
    TextExpressionSetToken("Param/Expression/lib_1_11766AF4", "B", IntToText(UnitGetOwner(lp_pUnit)));
    TextExpressionSetToken("Param/Expression/lib_1_FB54A91E", "A", TextWithColor(TextExpressionAssemble("Param/Expression/lib_1_11766AF4"), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(UnitGetOwner(lp_pUnit), false))));
    TextExpressionSetToken("Param/Expression/lib_1_FB54A91E", "B", FixedToText(PointGetX(UnitGetPosition(lp_pUnit)), 1));
    TextExpressionSetToken("Param/Expression/lib_1_FB54A91E", "C", FixedToText(PointGetY(UnitGetPosition(lp_pUnit)), 1));
    lv_vText = TextExpressionAssemble("Param/Expression/lib_1_FB54A91E");
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == true)) {
        TextExpressionSetToken("Param/Expression/lib_1_A22E497E", "B", lv_vText);
        lv_vText = TextExpressionAssemble("Param/Expression/lib_1_A22E497E");
    }

    auto70388C27_u = lp_pUnit;
    auto70388C27_i = 1;
    for ( ; auto70388C27_i <= UnitBehaviorCountAll(auto70388C27_u) ; auto70388C27_i += BoolToInt(lv_vBeh == UnitBehaviorGet(auto70388C27_u, auto70388C27_i)) ) {
        lv_vBeh = UnitBehaviorGet(auto70388C27_u, auto70388C27_i);
        if ((UnitBehaviorCount(lp_pUnit, lv_vBeh) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_1_BFE222F2", "A", IntToText(UnitBehaviorCount(lp_pUnit, lv_vBeh)));
            lv_vBehNumber = TextExpressionAssemble("Param/Expression/lib_1_BFE222F2");
        }
        else {
            lv_vBehNumber = StringToText("");
        }
        if ((UnitBehaviorDuration(lp_pUnit, lv_vBeh) > 0.0) && (UnitBehaviorDuration(lp_pUnit, lv_vBeh) < 32000.0)) {
            TextExpressionSetToken("Param/Expression/lib_1_9E2DFDB2", "A", FixedToText(UnitBehaviorDuration(lp_pUnit, lv_vBeh), 0));
            lv_vDuration = TextExpressionAssemble("Param/Expression/lib_1_9E2DFDB2");
        }
        else {
            lv_vDuration = StringToText("");
        }
        if ((UnitBehaviorEnabled(lp_pUnit, lv_vBeh) == false)) {
            TextExpressionSetToken("Param/Expression/lib_1_C0E0FFC2", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_1_C0E0FFC2", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_1_C0E0FFC2", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_1_C0E0FFC2", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_1_C0E0FFC2");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_558D79CF", "B", lv_vText);
            TextExpressionSetToken("Param/Expression/lib_1_558D79CF", "A", StringToText((lv_vBeh)));
            TextExpressionSetToken("Param/Expression/lib_1_558D79CF", "C", lv_vBehNumber);
            TextExpressionSetToken("Param/Expression/lib_1_558D79CF", "D", lv_vDuration);
            lv_vText = TextExpressionAssemble("Param/Expression/lib_1_558D79CF");
        }
    }
    if ((UnitFilterMatch(lp_pUnit, 1, UnitFilter(0, (1 << (c_targetFilterHidden - 32)), 0, 0)) == false)) {
        TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), false);
        if ((lv_vTextTagNormal == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            lib1_gf_StoreTextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lp_pUnit, 2.0);
        }
        else {
            TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagNormal, lv_vText);
        }
    }
    else {
        TextTagShow(lv_vTextTagNormal, PlayerGroupAll(), false);
        if ((lv_vTextTagHidden == c_textTagNone)) {
            TextTagCreate(lv_vText, 24, UnitGetPosition(lp_pUnit), 2.0, true, false, PlayerGroupAll());
            TextTagSetBackgroundImage(TextTagLastCreated(), "50Black.dds", false);
            TextTagShowBackground(TextTagLastCreated(), true);
            TextTagSetFontSize(TextTagLastCreated(), 16);
            TextTagSetAlignment(TextTagLastCreated(), c_alignLeft, c_alignCenter);
            TextTagSetBackgroundBorderSize(TextTagLastCreated(), 0.1, 0.1);
            TextTagSetTextShadow(TextTagLastCreated(), true);
            lib1_gf_StoreTextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden, TextTagLastCreated());
        }
        else {
            TextTagShow(lv_vTextTagHidden, PlayerGroupAll(), true);
            TextTagSetText(lv_vTextTagHidden, lv_vText);
            TextTagSetPosition(lv_vTextTagHidden, UnitGetPosition(lp_pUnit), 2.0);
        }
    }
}

void lib1_gf_UT_RemoveUnitInfo (unit lp_pUnit) {
    // Automatic Variable Declarations
    // Implementation
    TextTagShow(lib1_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionHidden), PlayerGroupAll(), false);
    TextTagShow(lib1_gf_TextTagForUnit(lp_pUnit, lib1_gv_uT_TextTagPositionNormal), PlayerGroupAll(), false);
}

void lib1_gf_EnableFastBuild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_uT_FastBuildCheat = true;
    TechTreeUpgradeAddLevel(lp_player, "FastBuild", 1);
    TechTreeUpgradeAddLevel(lp_player, "FastRevive", 1);
    TriggerEnable(lib1_gt_UT_FastArrm, true);
    TriggerEnable(lib1_gt_UT_FastConstruction, true);
    TriggerEnable(lib1_gt_UT_FastResearch, true);
    TriggerEnable(lib1_gt_UT_FastRevive, true);
    TriggerEnable(lib1_gt_UT_FastTrain, true);
}

void lib1_gf_DisableFastBuild (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FastBuild", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "FastRevive", 0);
}

trigger auto_lib1_gf_UT_PostStringWithIcons_Trigger = null;
string auto_lib1_gf_UT_PostStringWithIcons_lp_pString;

void lib1_gf_UT_PostStringWithIcons (string lp_pString) {
    auto_lib1_gf_UT_PostStringWithIcons_lp_pString = lp_pString;

    if (auto_lib1_gf_UT_PostStringWithIcons_Trigger == null) {
        auto_lib1_gf_UT_PostStringWithIcons_Trigger = TriggerCreate("auto_lib1_gf_UT_PostStringWithIcons_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_UT_PostStringWithIcons_Trigger, false, false);
}

bool auto_lib1_gf_UT_PostStringWithIcons_TriggerFunc (bool testConds, bool runActions) {
    string lp_pString = auto_lib1_gf_UT_PostStringWithIcons_lp_pString;

    // Variable Declarations
    string lv_vString;
    string lv_vTempString;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vString = lib1_gf_UT_ReplaceEmotes(lp_pString);
    lv_vTempString = lv_vString;

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText(lv_vString));
    while (true) {
        if ((StringContains(lv_vTempString, "*honk*", c_stringAnywhere, c_stringNoCase) == true)) {
            if ((TimerGetRemaining(lib1_gv_uT_SoundEmoteTimer) > 0.0)) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_90329AD1"));
                break;
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
            SoundPlayForPlayer(SoundLink("Honk", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
            lv_vTempString = StringReplaceWord(lv_vTempString, "*honk*", "", 1, c_stringNoCase);
            if ((lib1_gv_uT_SoundEmoteCooldownLength > 0.0)) {
                TimerStart(lib1_gv_uT_SoundEmoteTimer, lib1_gv_uT_SoundEmoteCooldownLength, false, c_timeGame);
            }

            Wait(RandomFixed(0.1, 0.5), c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

void lib1_gf_UT_Init_Emoticons () {
    int init_i;

    // Variable Declarations
    string[101] lv_vEmoticons;
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lv_vEmoticons[init_i] = "";
    }

    // Implementation
    lv_vIndex = 0;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "angry";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "baneling";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "brew";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "poo";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "cannon";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "cool";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "depot";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "drone";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "flex";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gas";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gg";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "glhf";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "gminerals";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "happy";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "infested";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "inlove";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "locust";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "minerals";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "mochi";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "nuke";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "overlord";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "pheart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "bunker";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "probe";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "protoss";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "pylon";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "random";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "rofl";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "sad";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "sc2";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "scv";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "silly";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "skull";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "snipe";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "speechless";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "surprised";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "symbiote";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "terran";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "theart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsdown";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "thumbsup";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zerg";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zheart";
    lv_vIndex += 1;
    lib1_gv_uT_SC_Emoticons[lv_vIndex] = "zipped";
    lv_vIndex = 0;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BabyRage";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BibleThump";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BlessRNG";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "coronaS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "DansGame";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FailFish";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsBadMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsGoodMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FeelsOkayMan";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "FrankerZ";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "GivePLZ";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "HYPERS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Kappa";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "LUL";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "monkaGun";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "monkaS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "MrDestructoid";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "NotLikeThis";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OhMyDog";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OMEGALUL";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "PepeHands";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "PogChamp";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "POGGERS";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "ResidentSleeper";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "SeemsGood";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "TakeNRG";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "TheThing";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Thonk";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "weSmart";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "BrokeBack";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "4Head";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Catalisk";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Kreygasm";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "OpieOP";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "WutFace";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "Rfrogdurr";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "peepopotat";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "rip";
    lv_vIndex += 1;
    lib1_gv_uT_CS_Emoticons[lv_vIndex] = "goose";
}

string lib1_gf_UT_ReplaceEmotes (string lp_pString) {
    // Variable Declarations
    string lv_vString;
    const string lv_cSCSTART = "<img path=\"Assets\\Textures\\ui_emoticons_";
    const string lv_cTWSTART = "<img path=\"TwitchEmotes\\";
    const string lv_cEND = ".dds\" alignment=\"absolutemiddle\" />";

    // Automatic Variable Declarations
    const int auto52C27899_ae = lib1_gv_uT_MAXEMOTES;
    int auto52C27899_var;
    const int autoA8AC9254_ae = lib1_gv_uT_MAXEMOTES;
    int autoA8AC9254_var;

    // Variable Initialization
    lv_vString = lp_pString;

    // Implementation
    auto52C27899_var = 0;
    for ( ; auto52C27899_var <= auto52C27899_ae; auto52C27899_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[auto52C27899_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, ("(" + lib1_gv_uT_SC_Emoticons[auto52C27899_var] + ")"), (lv_cSCSTART + lib1_gv_uT_SC_Emoticons[auto52C27899_var] + lv_cEND), c_stringReplaceAll, c_stringNoCase);
        }

    }
    autoA8AC9254_var = 0;
    for ( ; autoA8AC9254_var <= autoA8AC9254_ae; autoA8AC9254_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[autoA8AC9254_var] != "")) {
            lv_vString = StringReplaceWord(lv_vString, (" " + lib1_gv_uT_CS_Emoticons[autoA8AC9254_var]), (" " + lv_cTWSTART + lib1_gv_uT_CS_Emoticons[autoA8AC9254_var] + lv_cEND), c_stringReplaceAll, c_stringCase);
        }

    }
    return lv_vString;
}

void lib1_gf_UT_DL_DialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_uT_DL_LogDialog == c_invalidDialogId)) {
        DialogCreate(960, 1000, c_anchorTopLeft, 0, 250, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        lib1_gv_uT_DL_LogDialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 960, 500, c_anchorTop, 20, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib1_gv_uT_DL_LogDialogItem = DialogControlLastCreated();
    }

}

void lib1_gf_UT_DL_DialogUpdate (int lp_pPlayerData, int lp_pPlayerShow) {
    // Variable Declarations
    text lv_vText;
    int lv_vTotalDamage;
    fixed lv_vTotalHeal;
    int lv_vLines;
    fixed lv_vPercent;

    // Automatic Variable Declarations
    const int autoB12F5A31_ae = lib1_gv_uT_DL_MaxUnits;
    int autoB12F5A31_var;
    const int auto2BB3AFA5_ae = lib1_gv_uT_DL_MaxUnits;
    int auto2BB3AFA5_var;
    const int auto30779333_ae = lib1_gv_uT_DL_MaxUnits;
    int auto30779333_var;

    // Variable Initialization
    lv_vText = StringExternal("Param/Value/lib_1_205076C9");
    lv_vTotalHeal = 1.0;
    lv_vLines = 1;

    // Implementation
    autoB12F5A31_var = 1;
    for ( ; autoB12F5A31_var <= autoB12F5A31_ae; autoB12F5A31_var += 1 ) {
        if ((lib1_gv_uT_DL_Data[autoB12F5A31_var][0][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalDamage += lib1_gf_UT_DL_SumHealingDamage(autoB12F5A31_var, 0, lp_pPlayerData);
        }

        if ((lib1_gv_uT_DL_Data[autoB12F5A31_var][1][lp_pPlayerData].lv_unitType != null)) {
            lv_vTotalHeal += lib1_gf_UT_DL_SumHealingDamage(autoB12F5A31_var, 1, lp_pPlayerData);
        }

    }
    lv_vText = (lv_vText + (StringToText(lib1_gf_UT_FormatInteger(lv_vTotalDamage, " ")) + StringExternal("Param/Value/lib_1_39FEB863")));
    auto2BB3AFA5_var = 1;
    for ( ; auto2BB3AFA5_var <= auto2BB3AFA5_ae; auto2BB3AFA5_var += 1 ) {
        if ((lib1_gv_uT_DL_Data[auto2BB3AFA5_var][0][lp_pPlayerData].lv_unitType != null)) {
            if ((lib1_gf_UT_DL_SumHealingDamage(auto2BB3AFA5_var, 0, lp_pPlayerData) >= 524000)) {
                lv_vPercent = ((lib1_gf_UT_DL_SumHealingDamage(auto2BB3AFA5_var, 0, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
            }
            else {
                lv_vPercent = (lib1_gv_uT_DL_Data[auto2BB3AFA5_var][0][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
            }
            lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
            TextExpressionSetToken("Param/Expression/lib_1_1477AE93", "A", lib1_gf_UTC_NameOfUnitType(lib1_gv_uT_DL_Data[auto2BB3AFA5_var][0][lp_pPlayerData].lv_unitType));
            TextExpressionSetToken("Param/Expression/lib_1_1477AE93", "D", FixedToText(lv_vPercent, 1));
            TextExpressionSetToken("Param/Expression/lib_1_1477AE93", "C", StringToText(lib1_gf_UT_FormatInteger(lib1_gf_UT_DL_SumHealingDamage(auto2BB3AFA5_var, 0, lp_pPlayerData), " ")));
            lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_1_1477AE93"));
            lv_vLines += 1;
        }
        else {
            break;
        }
    }
    if ((lib1_gv_uT_DL_Data[1][1][lp_pPlayerData].lv_unitType != null)) {
        lv_vText = (lv_vText + (StringExternal("Param/Value/lib_1_5F347A0D") + (StringExternal("Param/Value/lib_1_A4715E57") + (FixedToText(lv_vTotalHeal, 0) + StringExternal("Param/Value/lib_1_8E95B936")))));
        lv_vLines += 2;
        auto30779333_var = 1;
        for ( ; auto30779333_var <= auto30779333_ae; auto30779333_var += 1 ) {
            if ((lib1_gv_uT_DL_Data[auto30779333_var][1][lp_pPlayerData].lv_unitType != null)) {
                if ((lib1_gf_UT_DL_SumHealingDamage(auto30779333_var, 1, lp_pPlayerData) >= 524000)) {
                    lv_vPercent = ((lib1_gf_UT_DL_SumHealingDamage(auto30779333_var, 1, lp_pPlayerData) / 10)/(lv_vTotalDamage / 1000));
                }
                else {
                    lv_vPercent = (lib1_gv_uT_DL_Data[auto30779333_var][1][lp_pPlayerData].lv_real/IntToFixed((lv_vTotalDamage / 100)));
                }
                lv_vPercent = libNtve_gf_ArithmeticRealClamp(lv_vPercent, 0.0, 100.0);
                TextExpressionSetToken("Param/Expression/lib_1_9CA550EF", "A", UnitTypeGetName(lib1_gv_uT_DL_Data[auto30779333_var][1][lp_pPlayerData].lv_unitType));
                TextExpressionSetToken("Param/Expression/lib_1_9CA550EF", "D", FixedToText(lv_vPercent, 1));
                TextExpressionSetToken("Param/Expression/lib_1_9CA550EF", "C", StringToText(lib1_gf_UT_FormatInteger(lib1_gf_UT_DL_SumHealingDamage(auto30779333_var, 1, lp_pPlayerData), " ")));
                lv_vText = (lv_vText + TextExpressionAssemble("Param/Expression/lib_1_9CA550EF"));
                lv_vLines += 1;
            }
            else {
                break;
            }
        }
    }

    libNtve_gf_SetDialogItemText(lib1_gv_uT_DL_LogDialogItem, lv_vText, PlayerGroupSingle(lp_pPlayerShow));
}

void lib1_gf_UT_DL_AddHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer, fixed lp_pAdd_Amount) {
    // Automatic Variable Declarations
    // Implementation
    if (((FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real) + FixedToInt(lp_pAdd_Amount)) >= 500000)) {
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer += FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real);
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real = lp_pAdd_Amount;
    }
    else {
        lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real += lp_pAdd_Amount;
    }
}

int lib1_gf_UT_DL_SumHealingDamage (int lp_pIndex, int lp_pDamageHeal, int lp_pPlayer) {
    // Automatic Variable Declarations
    // Implementation
    return (lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_integer + FixedToInt(lib1_gv_uT_DL_Data[lp_pIndex][lp_pDamageHeal][lp_pPlayer].lv_real));
}

void lib1_gf_UT_DL_LogClear (int lp_pPlayer) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    const int auto70383FDB_ae = lib1_gv_uT_DL_MaxUnits;
    int auto70383FDB_var;

    // Variable Initialization

    // Implementation
    auto70383FDB_var = 1;
    for ( ; auto70383FDB_var <= auto70383FDB_ae; auto70383FDB_var += 1 ) {
        lib1_gv_uT_DL_Data[auto70383FDB_var][0][lp_pPlayer].lv_integer = 0;
        lib1_gv_uT_DL_Data[auto70383FDB_var][1][lp_pPlayer].lv_integer = 0;
        lib1_gv_uT_DL_Data[auto70383FDB_var][0][lp_pPlayer].lv_real = 0;
        lib1_gv_uT_DL_Data[auto70383FDB_var][1][lp_pPlayer].lv_real = 0;
        lib1_gv_uT_DL_Data[auto70383FDB_var][0][lp_pPlayer].lv_unitType = null;
        lib1_gv_uT_DL_Data[auto70383FDB_var][1][lp_pPlayer].lv_unitType = null;
    }
    UIDisplayMessage(PlayerGroupSingle(lp_pPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_275B6371"));
    lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[lp_pPlayer], lp_pPlayer);
}

void lib1_gf_SetCommandsLevelAllowedForPlayer (int lp_player, int lp_level) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_uT_DevCommands[lp_player] = lp_level;
}

bool lib1_gf_UT_DevCommandsActive (int lp_pDevCommandType, int lp_pPlayer) {
    // Automatic Variable Declarations
    int auto119FD002_val;

    // Implementation
    auto119FD002_val = lp_pDevCommandType;
    if (auto119FD002_val == lib1_ge_UT_DevCommandTypes_Gamealtering) {
        if ((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Gamealtering)) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto119FD002_val == lib1_ge_UT_DevCommandTypes_Visual) {
        if (((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Gamealtering) || (lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_Visual))) {
            return true;
        }
        else {
            return false;
        }
    }
    else if (auto119FD002_val == lib1_ge_UT_DevCommandTypes_No) {
        if ((lib1_gv_uT_DevCommands[lp_pPlayer] == lib1_ge_UT_DevCommandTypes_No)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

void lib1_gf_UT_Cheat () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_uT_CheatUsed = true;
    TriggerSendEvent("UT_CheatUsed");
}

int lib1_gf_HookUpDialogItemandshowforplayers (string lp_name, int lp_type, int lp_parent, playergroup lp_players) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookup(lp_parent, lp_type, lp_name);
    if ((lp_players == PlayerGroupEmpty())) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    else {
        DialogControlSetVisible(DialogControlLastCreated(), lp_players, true);
    }
    return DialogControlLastCreated();
}

void lib1_gf_CU_MinimapAllyViewInit () {
    // Variable Declarations
    const fixed lv_baseScale = 0.5;
    const fixed lv_baseMapSize = 108.0;
    fixed lv_mapScale;
    int lv_player;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoE961BD7E_g;
    int autoE961BD7E_var;
    playergroup autoC9FA20BD_g;
    int autoC9FA20BD_var;

    // Variable Initialization
    lv_mapScale = 0.5;
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    if ((lib1_gv_cU_MinimapAllyViewEnabled == false)) {
        return ;
    }

    lv_mapScale = (lv_baseMapSize / MaxF(libNtve_gf_WidthOfRegion(RegionPlayableMap()), libNtve_gf_HeightOfRegion(RegionPlayableMap())));
    lv_mapScale = (lv_mapScale * lv_baseScale);
    autoE961BD7E_g = PlayerGroupAll();
    autoE961BD7E_var = -1;
    while (true) {
        autoE961BD7E_var = PlayerGroupNextPlayer(autoE961BD7E_g, autoE961BD7E_var);
        if (autoE961BD7E_var < 0) { break; }
        lv_playerGroup = PlayerGroupEmpty();
        if ((PlayerType(autoE961BD7E_var) != c_playerTypeUser)) {
            continue;
        }

        autoC9FA20BD_g = PlayerGroupAlliance(c_playerGroupAlly, autoC9FA20BD_var);
        autoC9FA20BD_var = -1;
        while (true) {
            autoC9FA20BD_var = PlayerGroupNextPlayer(autoC9FA20BD_g, autoC9FA20BD_var);
            if (autoC9FA20BD_var < 0) { break; }
            if ((PlayerType(autoC9FA20BD_var) == c_playerTypeUser) && (PlayerStatus(autoC9FA20BD_var) == c_playerStatusActive)) {
                PlayerGroupAdd(lv_playerGroup, autoC9FA20BD_var);
            }

        }
        if ((PlayerGroupCount(lv_playerGroup) > 1)) {
            TriggerEnable(lib1_gt_CU_MinimapAllyViewCamera, true);
            TriggerEnable(lib1_gt_CU_MinimapAllyViewUpdate, true);
            TriggerEnable(lib1_gt_CU_MinimapAllyPlayerLeaves, true);
        }

        libNtve_gf_CreatePingFacingAngle(lv_playerGroup, "PingViewArea", CameraGetTarget(lv_player), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(lv_player, false)), 0.0, 270.0);
        PingSetScale(PingLastCreated(), lv_mapScale);
        lib1_gv_cU_MinimapAllyViewPing[lv_player] = PingLastCreated();
    }
}

void lib1_gf_ToggleAllyMinimapFrustrum (bool lp_enabled) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_cU_MinimapAllyViewEnabled = lp_enabled;
}

point lib1_gf_Thenearestbuildablepointtothepoint (point lp_point, int lp_numberofscales) {
    // Variable Declarations
    fixed lv_distancebetweentwopoints;
    point lv_nearestbuildablepoint;
    point lv_pointtowhichpointcoordinatesareroundedoff;
    fixed lv_x;
    fixed lv_y;

    // Automatic Variable Declarations
    int auto1E9C4223_ae;
    int auto1E9C4223_var;
    fixed auto1418AC89_ae;
    const fixed auto1418AC89_ai = 1.0;
    fixed auto9F1FC8D3_ae;
    const fixed auto9F1FC8D3_ai = 1.0;
    fixed auto62F13FEF_ae;
    const fixed auto62F13FEF_ai = -1.0;
    fixed autoD3CCAE8A_ae;
    const fixed autoD3CCAE8A_ai = -1.0;

    // Variable Initialization
    lv_distancebetweentwopoints = 500.0;
    lv_pointtowhichpointcoordinatesareroundedoff = Point(Round(PointGetX(lp_point)), Round(PointGetY(lp_point)));

    // Implementation
    if ((ModI(lp_numberofscales, 2) == 0)) {
        if ((lib1_gf_Canbebuiltonabranch(lv_pointtowhichpointcoordinatesareroundedoff, lp_numberofscales) == true)) {
            return lv_pointtowhichpointcoordinatesareroundedoff;
        }
        else {
            auto1E9C4223_ae = CeilingI(MaxF(libNtve_gf_HeightOfRegion(RegionEntireMap()), libNtve_gf_WidthOfRegion(RegionEntireMap())));
            auto1E9C4223_var = 1;
            for ( ; auto1E9C4223_var <= auto1E9C4223_ae; auto1E9C4223_var += 1 ) {
                auto1418AC89_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var);
                for ( ; ( (auto1418AC89_ai >= 0 && lv_x <= auto1418AC89_ae) || (auto1418AC89_ai < 0 && lv_x >= auto1418AC89_ae) ) ; lv_x += auto1418AC89_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var))) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var));
                    }

                }
                auto9F1FC8D3_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var);
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto1E9C4223_var - 1));
                for ( ; ( (auto9F1FC8D3_ai >= 0 && lv_y <= auto9F1FC8D3_ae) || (auto9F1FC8D3_ai < 0 && lv_y >= auto9F1FC8D3_ae) ) ; lv_y += auto9F1FC8D3_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var), lv_y)) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var), lv_y);
                    }

                }
                auto62F13FEF_ae = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var);
                lv_x = (PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto1E9C4223_var - 1));
                for ( ; ( (auto62F13FEF_ai >= 0 && lv_x <= auto62F13FEF_ae) || (auto62F13FEF_ai < 0 && lv_x >= auto62F13FEF_ae) ) ; lv_x += auto62F13FEF_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var))) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var)), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var)));
                        lv_nearestbuildablepoint = Point(lv_x, (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + auto1E9C4223_var));
                    }

                }
                autoD3CCAE8A_ae = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto1E9C4223_var - 1));
                lv_y = (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto1E9C4223_var - 1));
                for ( ; ( (autoD3CCAE8A_ai >= 0 && lv_y <= autoD3CCAE8A_ae) || (autoD3CCAE8A_ai < 0 && lv_y >= autoD3CCAE8A_ae) ) ; lv_y += autoD3CCAE8A_ai ) {
                    if ((DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var), lv_y)) < lv_distancebetweentwopoints) && (lib1_gf_Canbebuiltonabranch(Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var), lv_y), lp_numberofscales) == true)) {
                        lv_distancebetweentwopoints = DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var), lv_y));
                        lv_nearestbuildablepoint = Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - auto1E9C4223_var), lv_y);
                    }

                }
                if ((lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) - (auto1E9C4223_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point(PointGetX(lv_pointtowhichpointcoordinatesareroundedoff), (PointGetY(lv_pointtowhichpointcoordinatesareroundedoff) + (auto1E9C4223_var + 1))))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) - (auto1E9C4223_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff)))) && (lv_distancebetweentwopoints <= DistanceBetweenPoints(lp_point, Point((PointGetX(lv_pointtowhichpointcoordinatesareroundedoff) + (auto1E9C4223_var + 1)), PointGetY(lv_pointtowhichpointcoordinatesareroundedoff))))) {
                    return lv_nearestbuildablepoint;
                }

            }
        }
    }

    return lv_nearestbuildablepoint;
}

point lib1_gf_UT_FindPointWithPathingTo (point lp_vInitPoint, point lp_vTargetPoint) {
    // Variable Declarations
    int lv_vRadius;
    int lv_vAngle;
    point lv_vPoint;

    // Automatic Variable Declarations
    const int auto4D4B7F5D_ae = 200;
    const int auto4D4B7F5D_ai = 3;
    const int auto1F21E4EA_ae = 360;
    const int auto1F21E4EA_ai = 30;

    // Variable Initialization

    // Implementation
    if ((PointPathingIsConnected(lp_vInitPoint, lp_vTargetPoint) == true)) {
        return lp_vInitPoint;
    }

    lv_vRadius = 1;
    for ( ; ( (auto4D4B7F5D_ai >= 0 && lv_vRadius <= auto4D4B7F5D_ae) || (auto4D4B7F5D_ai < 0 && lv_vRadius >= auto4D4B7F5D_ae) ) ; lv_vRadius += auto4D4B7F5D_ai ) {
        lv_vAngle = 1;
        for ( ; ( (auto1F21E4EA_ai >= 0 && lv_vAngle <= auto1F21E4EA_ae) || (auto1F21E4EA_ai < 0 && lv_vAngle >= auto1F21E4EA_ae) ) ; lv_vAngle += auto1F21E4EA_ai ) {
            lv_vPoint = PointWithOffsetPolar(lp_vInitPoint, lv_vRadius, lv_vAngle);
            if ((RegionContainsPoint(RegionPlayableMap(), lv_vPoint) == true) && (PathingType(lv_vPoint) == c_pathingGround) && (PointPathingIsConnected(lv_vPoint, lp_vTargetPoint) == true)) {
                return lv_vPoint;
            }

        }
    }
    return lp_vInitPoint;
}

string lib1_gf_UT_PointXYToString (point lp_pPoint, string lp_pDelimiter, int lp_pPrecision) {
    // Automatic Variable Declarations
    // Implementation
    return (FixedToString(PointGetX(lp_pPoint), lp_pPrecision) + lp_pDelimiter + FixedToString(PointGetY(lp_pPoint), lp_pPrecision));
}

point lib1_gf_GetPoint (string lp_suffix, int lp_route) {
    // Variable Declarations
    string lv_r;
    string lv_suffixending;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_r = IntToString(lp_route);
    lv_suffixending = StringSub(lp_suffix, (StringLength(lp_suffix) - 1), StringLength(lp_suffix));

    // Implementation
    if (((lv_suffixending == "-") || (lv_suffixending == " "))) {
        return lib1_gf_IIF7(PointFromName((lp_suffix + lv_r)), lib1_gf_IIF7(PointFromName((lp_suffix + "0" + lv_r)), null));
    }
    else {
        return lib1_gf_IIF7(PointFromName((lp_suffix + " " + lv_r)), lib1_gf_IIF7(PointFromName((lp_suffix + " 0" + lv_r)), lib1_gf_IIF7(PointFromName((lp_suffix + lv_r)), lib1_gf_IIF7(PointFromName((lp_suffix + "0" + lv_r)), null))));
    }
}

string lib1_gf_PointsSingle (string lp_suffix, int lp_index1) {
    // Variable Declarations
    point lv_point;
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";

    // Implementation
    lib1_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(lib1_gv_pointsListsCreated));
    lv_point = lib1_gf_GetPoint(lp_suffix, lp_index1);
    if ((lv_point != null)) {
        lib1_gf_ListPointPush(lv_listName, lv_point);
    }

    return lv_listName;
}

string lib1_gf_PointsSinglePoint (point lp_point) {
    // Variable Declarations
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";

    // Implementation
    lib1_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(lib1_gv_pointsListsCreated));
    if ((lp_point != null)) {
        lib1_gf_ListPointPush(lv_listName, lp_point);
    }

    return lv_listName;
}

string lib1_gf_PointsRange (string lp_suffix, int lp_index1, int lp_index2) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";
    lv_iterator = lp_index1;

    // Implementation
    lib1_gv_pointsListsCreated += 1;
    lv_listName = ("*P" + IntToString(lib1_gv_pointsListsCreated));
    lv_point = lib1_gf_GetPoint(lp_suffix, lv_iterator);
    while ((lv_point != null) && (lv_iterator <= lp_index2)) {
        lib1_gf_ListPointPush(lv_listName, lv_point);
        lv_iterator += 1;
        lv_point = lib1_gf_GetPoint(lp_suffix, lv_iterator);
    }
    return lv_listName;
}

string lib1_gf_PointsAll (string lp_suffix) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_listName = "";
    lv_iterator = 1;

    // Implementation
    return lib1_gf_PointsRange(lp_suffix, 1, 99);
}

string lib1_gf_PointsString (string lp_suffix, string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, "-", c_stringAnywhere, c_stringCase) == true)) {
        lv_spawns = StringReplaceWord(lp_spawns, "-", " ", c_stringReplaceAll, c_stringCase);
        return lib1_gf_PointsRange(lp_suffix, StringToInt(StringWord(lv_spawns, 1)), StringToInt(StringWord(lv_spawns, 2)));
    }
    else {
        return lib1_gf_PointsSingle(lp_suffix, StringToInt(StringWord(lv_spawns, 1)));
    }
}

string lib1_gf_Points (string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, " ", c_stringAnywhere, c_stringCase) == true)) {
        return lib1_gf_PointsString(StringWord(lv_spawns, 1), StringWord(lv_spawns, 2));
    }
    else {
        return lib1_gf_PointsAll(lp_spawns);
    }
}

string lib1_gf_GetRoute (string lp_suffix, int lp_routeIndex) {
    // Variable Declarations
    point lv_point;
    string lv_listName;
    string lv_route;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = IntToString(lp_routeIndex);

    // Implementation
    lv_point = lib1_gf_IIF7(PointFromName((lp_suffix + " " + lv_route)), PointFromName((lp_suffix + " 0" + lv_route)));
    if ((lv_point != null)) {
        lv_listName = lib1_gf_PointsSinglePoint(lv_point);
    }
    else {
        lv_point = lib1_gf_IIF7(PointFromName((lp_suffix + " " + lv_route + "-1")), PointFromName((lp_suffix + " " + lv_route + "-01")));
        if ((lv_point != null)) {
            lv_listName = lib1_gf_PointsAll((lp_suffix + " " + lv_route + "-"));
        }
        else {
            lv_point = lib1_gf_IIF7(PointFromName((lp_suffix + " 0" + lv_route + "-1")), PointFromName((lp_suffix + " 0" + lv_route + "-01")));
            if ((lv_point != null)) {
                lv_listName = lib1_gf_PointsAll((lp_suffix + " 0" + lv_route + "-"));
            }

        }
    }
    return lv_listName;
}

string lib1_gf_RoutesSingle (string lp_suffix, int lp_index) {
    // Variable Declarations
    string lv_route;
    string lv_listName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";

    // Implementation
    lib1_gv_routesListsCreated += 1;
    lv_listName = ("**P" + IntToString(lib1_gv_routesListsCreated));
    lv_route = lib1_gf_GetRoute(lp_suffix, lp_index);
    if ((lv_route != null)) {
        lib1_gf_ListStringPush(lv_listName, lv_route);
    }

    return lv_listName;
}

string lib1_gf_RoutesRange (string lp_suffix, int lp_index1, int lp_index2) {
    // Variable Declarations
    string lv_route;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";
    lv_iterator = lp_index1;

    // Implementation
    lib1_gv_routesListsCreated += 1;
    lv_listName = ("**P" + IntToString(lib1_gv_routesListsCreated));
    lv_route = lib1_gf_GetRoute(lp_suffix, lv_iterator);
    while ((lv_route != null) && (lv_iterator <= lp_index2)) {
        lib1_gf_ListStringPush(lv_listName, lv_route);
        lv_iterator += 1;
        lv_route = lib1_gf_GetRoute(lp_suffix, lv_iterator);
    }
    return lv_listName;
}

string lib1_gf_RoutesAll (string lp_suffix) {
    // Variable Declarations
    string lv_route;
    point lv_point;
    string lv_listName;
    int lv_iterator;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_route = "";
    lv_listName = "";
    lv_iterator = 1;

    // Implementation
    return lib1_gf_RoutesRange(lp_suffix, 1, 99);
}

string lib1_gf_RoutesString (string lp_suffix, string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, "-", c_stringAnywhere, c_stringCase) == true)) {
        lv_spawns = StringReplaceWord(lp_spawns, "-", " ", c_stringReplaceAll, c_stringCase);
        return lib1_gf_RoutesRange(lp_suffix, StringToInt(StringWord(lv_spawns, 1)), StringToInt(StringWord(lv_spawns, 2)));
    }
    else {
        return lib1_gf_RoutesSingle(lp_suffix, StringToInt(StringWord(lv_spawns, 1)));
    }
}

string lib1_gf_Routes (string lp_spawns) {
    // Variable Declarations
    string lv_spawns;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_spawns = lp_spawns;

    // Implementation
    if ((StringContains(lv_spawns, " ", c_stringAnywhere, c_stringCase) == true) && (StringWord(lp_spawns, 2) != "")) {
        return lib1_gf_RoutesString(StringWord(lv_spawns, 1), StringWord(lv_spawns, 2));
    }
    else {
        return lib1_gf_RoutesAll(StringWord(lv_spawns, 1));
    }
}

point lib1_gf_GetPlayerStartPosition (int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_playerStartPosition[lp_player];
}

void lib1_gf_AddRegionByNameIfExists (region lp_sourceRegion, string lp_targetRegionName) {
    // Variable Declarations
    region lv_region;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_region = RegionEmpty();

    // Implementation
    lv_region = RegionFromName(lp_targetRegionName);
    if ((lv_region != null)) {
        RegionAddRegion(lp_sourceRegion, lv_region);
    }

}

void lib1_gf_AddRegionIfExists (region lp_sourceRegion, region lp_targetRegion) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_targetRegion != null)) {
        RegionAddRegion(lp_sourceRegion, lp_targetRegion);
    }

}

void lib1_gf_ClearArmedCache (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_p = lp_player;

    // Implementation
    lib1_gv_cACHE_ARMED[lv_p] = " ";
    lib1_gv_cACHE_DISARMED[lv_p] = " ";
}

void lib1_gf_Armunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_aBILITY;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto990AC13C_ae;
    const int auto990AC13C_ai = 1;
    int auto1CB85820_ae;
    const int auto1CB85820_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    UnitBehaviorRemove(lp_unit, "Monobattle", 1);
    auto990AC13C_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto990AC13C_ai >= 0 && lv_i <= auto990AC13C_ae) || (auto990AC13C_ai < 0 && lv_i >= auto990AC13C_ae) ) ; lv_i += auto990AC13C_ai ) {
        lv_aBILITY = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((lib1_gf_AbilityIsDanger(lp_player, lv_aBILITY) == true))) {
            UnitAbilityAdd(lp_unit, lv_aBILITY);
        }

    }
    auto1CB85820_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto1CB85820_ai >= 0 && lv_i <= auto1CB85820_ae) || (auto1CB85820_ai < 0 && lv_i >= auto1CB85820_ae) ) ; lv_i += auto1CB85820_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorAdd(lp_unit, lv_behavior, lp_unit, 1);
        }

    }
}

void lib1_gf_Disarmunit (int lp_player, unit lp_unit) {
    // Variable Declarations
    string lv_unitType;
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    int lv_cAbilityEffectAttack;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto4CF93F63_ae;
    const int auto4CF93F63_ai = 1;
    int auto56AEBCE5_ae;
    const int auto56AEBCE5_ai = 1;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);
    lv_cAbilityEffectAttack = CatalogEntryClass(c_gameCatalogAbil, "attack");

    // Implementation
    UnitBehaviorAdd(lp_unit, "Monobattle", lp_unit, 1);
    auto4CF93F63_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto4CF93F63_ai >= 0 && lv_i <= auto4CF93F63_ae) || (auto4CF93F63_ai < 0 && lv_i >= auto4CF93F63_ae) ) ; lv_i += auto4CF93F63_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if (((lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            UnitAbilityRemove(lp_unit, lv_ability);
        }

    }
    auto56AEBCE5_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BehaviorArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto56AEBCE5_ai >= 0 && lv_i <= auto56AEBCE5_ae) || (auto56AEBCE5_ai < 0 && lv_i >= auto56AEBCE5_ae) ) ; lv_i += auto56AEBCE5_ai ) {
        lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BehaviorArray[" + IntToString(lv_i) + "].Link", lp_player));
        if ((lib1_gf_BehaviorisDanger(lp_player, lv_behavior) == true)) {
            UnitBehaviorRemove(lp_unit, lv_behavior, 1);
        }

    }
}

void lib1_gf_ArmUnitType (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int autoF81D85E4_ae;
    const int autoF81D85E4_ai = 1;
    int auto6E97BB2B_ae;
    const int auto6E97BB2B_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((lib1_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true)) {
        lib1_gv_cACHE_DISARMED[lp_player] = StringReplaceWord(lib1_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    autoF81D85E4_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (autoF81D85E4_ai >= 0 && lv_i <= autoF81D85E4_ae) || (autoF81D85E4_ai < 0 && lv_i >= autoF81D85E4_ae) ) ; lv_i += autoF81D85E4_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto6E97BB2B_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto6E97BB2B_ai >= 0 && lv_i <= auto6E97BB2B_ae) || (auto6E97BB2B_ai < 0 && lv_i >= auto6E97BB2B_ae) ) ; lv_i += auto6E97BB2B_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == lib1_gv_cAbilityAttack) || (lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        lib1_gv_cACHE_ARMED[lp_player] = (lib1_gv_cACHE_ARMED[lp_player] + (lp_unit) + " ");
    }

}

void lib1_gf_Disarmunittype (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;
    string lv_weapon;
    string lv_turret;
    string lv_ability;
    bool lv_danger;
    string lv_behavior;

    // Automatic Variable Declarations
    int auto7298AEF0_ae;
    const int auto7298AEF0_ai = 1;
    int auto3E4970AD_ae;
    const int auto3E4970AD_ai = 1;

    // Variable Initialization

    // Implementation
    if (((CatalogEntryIsValid(c_gameCatalogUnit, lp_unit) == false) || (lib1_gf_UnitTypeisDisArmed(lp_player, lp_unit) == true))) {
        return ;
    }

    if ((lib1_gf_UnitTypeisArmed(lp_player, lp_unit) == true)) {
        lib1_gv_cACHE_ARMED[lp_player] = StringReplaceWord(lib1_gv_cACHE_ARMED[lp_player], (" " + (lp_unit)), "", c_stringReplaceAll, c_stringCase);
    }

    auto7298AEF0_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto7298AEF0_ai >= 0 && lv_i <= auto7298AEF0_ae) || (auto7298AEF0_ai < 0 && lv_i >= auto7298AEF0_ae) ) ; lv_i += auto7298AEF0_ai ) {
        lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
        lv_turret = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Turret", lp_player));
        lv_danger = true;
    }
    auto3E4970AD_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "AbilArray", lp_player) - 1);
    lv_i = 0;
    for ( ; ( (auto3E4970AD_ai >= 0 && lv_i <= auto3E4970AD_ae) || (auto3E4970AD_ai < 0 && lv_i >= auto3E4970AD_ae) ) ; lv_i += auto3E4970AD_ai ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "AbilArray[" + IntToString(lv_i) + "].Link", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogAbil, lv_ability) == false)) {
            continue;
        }

        if (((CatalogEntryClass(c_gameCatalogAbil, lv_ability) == lib1_gv_cAbilityAttack) || (lib1_gf_AbilityIsDanger(lp_player, lv_ability) == true))) {
            lv_danger = true;
        }

    }
    if ((lv_danger == true)) {
        lib1_gv_cACHE_DISARMED[lp_player] = (lib1_gv_cACHE_DISARMED[lp_player] + (lp_unit) + " ");
    }

}

bool lib1_gf_UnitTypeisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_ARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool lib1_gf_UnitTypeisDisArmed (int lp_player, string lp_unit) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((StringFind(lib1_gv_cACHE_DISARMED[lp_player], (" " + (lp_unit) + " "), c_stringCase) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup lib1_gf_GetResourcesNearPoint (point lp_point, fixed lp_radius, int lp_type) {
    // Variable Declarations
    region lv_region;
    unitgroup lv_resources;
    unitgroup lv_units;
    unit lv_unit;

    // Automatic Variable Declarations
    int auto74C9208B_ae;
    int auto74C9208B_var;
    int auto5055B8C2_ae;
    int auto5055B8C2_var;

    // Variable Initialization
    lv_region = RegionCircle(lp_point, lp_radius);
    lv_resources = UnitGroupEmpty();
    lv_units = UnitGroupEmpty();

    // Implementation
    if (((lp_type == c_resourceTypeVespene) || (lp_type == c_resourceTypeCustom))) {
        lv_units = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_resources, UnitGroup(null, c_playerAny, lv_region, UnitFilter((1 << c_targetFilterRawResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto74C9208B_ae = UserDataGetInt("MissionSettings", "CurrentMission", "ResourcesVespene", 1);
        auto74C9208B_var = 1;
        for ( ; auto74C9208B_var <= auto74C9208B_ae; auto74C9208B_var += 1 ) {
            lv_unit = UnitGroupClosestToPoint(lv_units, lp_point);
            UnitGroupAdd(lv_resources, lv_unit);
            UnitGroupRemove(lv_units, lv_unit);
        }
    }

    if (((lp_type == c_resourceTypeMinerals) || (lp_type == c_resourceTypeCustom))) {
        lv_units = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_resources, UnitGroup(null, c_playerAny, lv_region, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto5055B8C2_ae = UserDataGetInt("MissionSettings", "CurrentMission", "ResorucesMinerals", 1);
        auto5055B8C2_var = 1;
        for ( ; auto5055B8C2_var <= auto5055B8C2_ae; auto5055B8C2_var += 1 ) {
            lv_unit = UnitGroupClosestToPoint(lv_units, lp_point);
            UnitGroupAdd(lv_resources, lv_unit);
            UnitGroupRemove(lv_units, lv_unit);
        }
    }

    return lv_resources;
}

bool lib1_gf_CM_Resources_IsSaturated (unit lp_resourceNodeorTownHall) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCurrentWorkerCount(lp_resourceNodeorTownHall) >= UnitIdealWorkerCount(lp_resourceNodeorTownHall));
}

void lib1_gf_CM_Resources_FindWork (unit lp_worker, unit lp_townHall, fixed lp_workRadius) {
    // Variable Declarations
    region lv_workregion;
    unitgroup lv_nearbyminerals;
    unitgroup lv_nearbygeysers;
    unit lv_resourcenode;

    // Automatic Variable Declarations
    unitgroup autoE778CF3E_g;
    int autoE778CF3E_u;

    // Variable Initialization
    lv_workregion = RegionCircle(UnitGetPosition(lp_townHall), lp_workRadius);
    lv_nearbyminerals = UnitGroup(null, 0, lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_nearbygeysers = UnitGroup(null, UnitGetOwner(lp_worker), lv_workregion, UnitFilter((1 << c_targetFilterHarvestableResource), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Implementation
    autoE778CF3E_g = lv_nearbygeysers;
    autoE778CF3E_u = UnitGroupCount(autoE778CF3E_g, c_unitCountAll);
    for (;; autoE778CF3E_u -= 1) {
        lv_resourcenode = UnitGroupUnitFromEnd(autoE778CF3E_g, autoE778CF3E_u);
        if (lv_resourcenode == null) { break; }
        if ((lib1_gf_CM_Resources_IsSaturated(lv_resourcenode) == false)) {
            UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), lv_resourcenode), c_orderQueueReplace);
            return ;
        }

    }
    if ((UnitGroupCount(lv_nearbyminerals, c_unitCountAlive) > 0) && (lib1_gf_CM_Resources_IsSaturated(lp_townHall) == false)) {
        UnitIssueOrder(lp_worker, OrderTargetingUnit(AbilityCommand("SCVHarvest", 0), UnitGroupUnit(lv_nearbyminerals, RandomInt(1, UnitGroupCount(lv_nearbyminerals, c_unitCountAlive)))), c_orderQueueReplace);
    }

}

bool lib1_gf_UnitIsAntiAir (string lp_unit, int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_weapons;
    string lv_weapon;
    bool lv_isAntiAir;

    // Automatic Variable Declarations
    int autoEB849682_ae;
    const int autoEB849682_ai = 1;

    // Variable Initialization
    lv_weapons = CatalogFieldValueCount(c_gameCatalogUnit, lp_unit, "WeaponArray", lp_player);

    // Implementation
    if ((lv_weapons > 0)) {
        autoEB849682_ae = (lv_weapons - 1);
        lv_i = 0;
        for ( ; ( (autoEB849682_ai >= 0 && lv_i <= autoEB849682_ae) || (autoEB849682_ai < 0 && lv_i >= autoEB849682_ae) ) ; lv_i += autoEB849682_ai ) {
            lv_weapon = (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "WeaponArray[" + IntToString(lv_i) + "].Link", lp_player));
            if ((lv_weapon != null) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterGround) != c_unitFilterRequired) && (UnitFilterGetState(libNtve_gf_ConvertTargetFilterStringToUnitFilter(CatalogFieldValueGet(c_gameCatalogWeapon, lv_weapon, "TargetFilters", lp_player)), c_targetFilterAir) != c_unitFilterExcluded)) {
                return true;
            }

        }
    }

    return false;
}

bool lib1_gf_UnitIsAir (string lp_unit, int lp_player) {
    // Variable Declarations
    const int lv_pLANE_AIR = 0;
    int lv_plane;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_plane = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lp_unit, "PlaneArray[" + IntToString(0) + "]", lp_player);

    // Implementation
    if ((lv_plane == lv_pLANE_AIR)) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup lib1_gf_UnitsInRegionWithSpecifiedTypes (int lp_player, string lp_units, region lp_region) {
    // Variable Declarations
    string lv_compareUnitName;
    string lv_compareUnitType;
    unitgroup lv_resultGroup;

    // Automatic Variable Declarations
    int autoA9893A05_ai;
    int autoA9893A05_ae;

    // Variable Initialization
    lv_compareUnitName = "";
    lv_resultGroup = UnitGroupEmpty();

    // Implementation
    autoA9893A05_ai = 1;
    autoA9893A05_ae = lib1_gf_ListSize(lp_units);
    while (autoA9893A05_ai <= autoA9893A05_ae) {
        lv_compareUnitName = lib1_gf_ListStringGet(lp_units, autoA9893A05_ai);
        autoA9893A05_ai = autoA9893A05_ai+1;
        lv_compareUnitType = UnitTypeFromString(lv_compareUnitName);
        UnitGroupAddUnitGroup(lv_resultGroup, UnitGroup(lv_compareUnitType, lp_player, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    }
    return lv_resultGroup;
}

fixed lib1_gf_CombinedPropertyofUnitGroup (unitgroup lp_unitGroup, int lp_unitProperty, bool lp_currentDefault) {
    // Variable Declarations
    unit lv_unititer;
    fixed lv_totalproperty;

    // Automatic Variable Declarations
    unitgroup auto3E020C71_g;
    int auto3E020C71_u;

    // Variable Initialization

    // Implementation
    auto3E020C71_g = lp_unitGroup;
    auto3E020C71_u = UnitGroupCount(auto3E020C71_g, c_unitCountAll);
    for (;; auto3E020C71_u -= 1) {
        lv_unititer = UnitGroupUnitFromEnd(auto3E020C71_g, auto3E020C71_u);
        if (lv_unititer == null) { break; }
        lv_totalproperty += UnitGetPropertyFixed(lv_unititer, lp_unitProperty, lp_currentDefault);
    }
    return lv_totalproperty;
}

void lib1_gf_CopyBehaviorToMagazineAmmos (unit lp_unit, string lp_behavior) {
    // Automatic Variable Declarations
    // Implementation
    CatalogFieldValueSet(c_gameCatalogEffect, "TriggerCopyBehaviorToTarget", "Behavior", UnitGetOwner(lp_unit), (lp_behavior));
    UnitCreateEffectUnit(lp_unit, "TriggerCopyBehaviorToMagazine", lp_unit);
}

bool lib1_gf_UT_AreMorphUnits (string lp_pUnitTypeA, string lp_pUnitTypeB) {
    // Automatic Variable Declarations
    // Implementation
    if ((((lp_pUnitTypeA == "SiegeTankSieged") && (lp_pUnitTypeB == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged") && (lp_pUnitTypeA == "SiegeTank")) || ((lp_pUnitTypeB == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeA == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "SiegeTankSieged_BlackOps") && (lp_pUnitTypeB == "SiegeTank_BlackOps")) || ((lp_pUnitTypeA == "InfestedSiegeBreaker") && (lp_pUnitTypeB == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeB == "InfestedSiegeBreaker") && (lp_pUnitTypeA == "InfestedSiegeBreakerSieged")) || ((lp_pUnitTypeA == "ZeratulPhotonCannon") && (lp_pUnitTypeB == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulPhotonCannon") && (lp_pUnitTypeA == "ZeratulPhotonCannonProjection")) || ((lp_pUnitTypeB == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeA == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "ZeratulKhaydarinMonolith") && (lp_pUnitTypeB == "ZeratulKhaydarinMonolithProjection")) || ((lp_pUnitTypeA == "SILiberator") && (lp_pUnitTypeB == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SILiberator") && (lp_pUnitTypeA == "SILiberatorCloud")) || ((lp_pUnitTypeB == "SIInfestedBunker") && (lp_pUnitTypeA == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "SIInfestedBunker") && (lp_pUnitTypeB == "SIInfestedBunkerUprooted")) || ((lp_pUnitTypeA == "Liberator_BlackOps") && (lp_pUnitTypeB == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator_BlackOps") && (lp_pUnitTypeA == "LiberatorAG_BlackOps")) || ((lp_pUnitTypeB == "Liberator") && (lp_pUnitTypeA == "LiberatorAG")) || ((lp_pUnitTypeA == "Liberator") && (lp_pUnitTypeB == "LiberatorAG")) || ((lp_pUnitTypeB == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeA == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "AbathurSymbioteBrutalisk") && (lp_pUnitTypeB == "AbathurSymbioteLeviathan")) || ((lp_pUnitTypeA == "GaryStetmann") && (lp_pUnitTypeB == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "GaryStetmann") && (lp_pUnitTypeA == "SuperGaryStetmann")) || ((lp_pUnitTypeB == "BroodLordStetmann") && (lp_pUnitTypeA == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "BroodLordStetmann") && (lp_pUnitTypeB == "BroodlingEscortStetmann")) || ((lp_pUnitTypeA == "FenixArbiter") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixArbiter") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixCoop")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixCoop")) || ((lp_pUnitTypeA == "FenixDragoon") && (lp_pUnitTypeB == "FenixArbiter")) || ((lp_pUnitTypeB == "FenixDragoon") && (lp_pUnitTypeA == "FenixArbiter")) || ((lp_pUnitTypeB == "HHReaper") && (lp_pUnitTypeA == "HHReaperFlying")) || ((lp_pUnitTypeA == "HHReaper") && (lp_pUnitTypeB == "HHReaperFlying")) || ((lp_pUnitTypeA == "Broodling") && (lp_pUnitTypeB == "KerriganInfestBroodling")) || ((lp_pUnitTypeA == "KerriganInfestBroodling") && (lp_pUnitTypeB == "Broodling")) || ((lp_pUnitTypeA == "BroodLord") && (lp_pUnitTypeB == "BroodlingEscort")) || ((lp_pUnitTypeA == "BroodlingEscort") && (lp_pUnitTypeB == "BroodLord")) || ((lp_pUnitTypeA == "SiegeTankMengskSieged") && (lp_pUnitTypeB == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "SiegeTankMengskSieged") && (lp_pUnitTypeA == "SiegeTankMengsk")) || ((lp_pUnitTypeB == "VikingMengskAssault") && (lp_pUnitTypeA == "VikingMengskFighter")) || ((lp_pUnitTypeA == "VikingMengskAssault") && (lp_pUnitTypeB == "VikingMengskFighter")) || ((lp_pUnitTypeA == "ThorMengsk") && (lp_pUnitTypeB == "ThorMengskSieged")) || ((lp_pUnitTypeB == "ThorMengsk") && (lp_pUnitTypeA == "ThorMengskSieged")))) {
        return true;
    }
    else {
        return false;
    }
}

string lib1_gf_GetUnitRace (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Race", UnitGetOwner(lp_unit)));
}

string lib1_gf_GetUnitRace2 (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny));
}

int lib1_gf_GetUnitCargoSize (unit lp_unit) {
    // Variable Declarations
    string lv_ability;
    int lv_cargo;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_ability = libNtve_gf_UnitAbilityByFilters(lp_unit, c_classIdCAbilTransport, "");
    lv_cargo = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "TotalCargoSpace", UnitGetOwner(lp_unit));
    return lv_cargo;
}

bool lib1_gf_StructureIsFlying (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(lp_unit) == "CommandCenterFlying") || (UnitGetType(lp_unit) == "OrbitalCommandFlying") || (UnitGetType(lp_unit) == "BarracksFlying") || (UnitGetType(lp_unit) == "FactoryFlying") || (UnitGetType(lp_unit) == "StarportFlying"))) {
        return true;
    }
    else {
        return false;
    }
}

unit lib1_gf_LowestVitalityUnitfromUnitGroup (unitgroup lp_canidates) {
    // Variable Declarations
    fixed lv_vitality_Test;
    fixed lv_vitality_Least;
    unit lv_vitality_LeastCanidate;
    unit lv_canidateIter;

    // Automatic Variable Declarations
    unitgroup autoBD91ECDE_g;
    int autoBD91ECDE_u;

    // Variable Initialization
    lv_vitality_Least = 524287.0;

    // Implementation
    autoBD91ECDE_g = lp_canidates;
    autoBD91ECDE_u = UnitGroupCount(autoBD91ECDE_g, c_unitCountAll);
    for (;; autoBD91ECDE_u -= 1) {
        lv_canidateIter = UnitGroupUnitFromEnd(autoBD91ECDE_g, autoBD91ECDE_u);
        if (lv_canidateIter == null) { break; }
        lv_vitality_Test = UnitGetPropertyFixed(lv_canidateIter, c_unitPropVitality, c_unitPropCurrent);
        if ((lv_vitality_Test < lv_vitality_Least)) {
            lv_vitality_Least = lv_vitality_Test;
            lv_vitality_LeastCanidate = lv_canidateIter;
        }

    }
    return lv_vitality_LeastCanidate;
}

bool lib1_gf_AnyUnitOfPlayerGroupInRegion (playergroup lp_playergroup, region lp_region) {
    // Automatic Variable Declarations
    playergroup autoC45AA318_g;
    int autoC45AA318_var;

    // Implementation
    autoC45AA318_g = lp_playergroup;
    autoC45AA318_var = -1;
    while (true) {
        autoC45AA318_var = PlayerGroupNextPlayer(autoC45AA318_g, autoC45AA318_var);
        if (autoC45AA318_var < 0) { break; }
        if ((UnitGroupCount(UnitGroup(null, autoC45AA318_var, lp_region, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterMapBoss - 32))), 1), c_unitCountAlive) > 0)) {
            return true;
        }

    }
    return false;
}

bool lib1_gf_AllUnitsFromUnitGroupInRegion (unitgroup lp_units, region lp_region) {
    // Automatic Variable Declarations
    unitgroup auto2883F429_g;
    int auto2883F429_u;
    unit auto2883F429_var;

    // Implementation
    auto2883F429_g = lp_units;
    auto2883F429_u = UnitGroupCount(auto2883F429_g, c_unitCountAll);
    for (;; auto2883F429_u -= 1) {
        auto2883F429_var = UnitGroupUnitFromEnd(auto2883F429_g, auto2883F429_u);
        if (auto2883F429_var == null) { break; }
        if ((UnitIsAlive(auto2883F429_var) == true) && (libNtve_gf_UnitInRegion(auto2883F429_var, lp_region) == false)) {
            return false;
        }

    }
    return true;
}

string lib1_gf_GetCardLayoutButtonForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout) {
    // Variable Declarations
    int lv_vIndex;
    int lv_vPlayer;
    string lv_vType;
    string lv_vButton;

    // Automatic Variable Declarations
    int auto3ECA5BDC_ae;
    const int auto3ECA5BDC_ai = 1;

    // Variable Initialization
    lv_vPlayer = UnitGetOwner(lp_unit);
    lv_vType = UnitGetType(lp_unit);

    // Implementation
    auto3ECA5BDC_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons", lv_vPlayer) - 1);
    lv_vIndex = 0;
    for ( ; ( (auto3ECA5BDC_ai >= 0 && lv_vIndex <= auto3ECA5BDC_ae) || (auto3ECA5BDC_ai < 0 && lv_vIndex >= auto3ECA5BDC_ae) ) ; lv_vIndex += auto3ECA5BDC_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Row", lv_vPlayer) == lp_row) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Column", lv_vPlayer) == lp_column)) {
            lv_vButton = (CatalogFieldValueGet(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Face", lv_vPlayer));
            if ((lv_vButton != null)) {
                return lv_vButton;
            }

        }
    }
    return null;
}

abilcmd lib1_gf_GetCardLayoutAbilityCommandForUnit (unit lp_unit, int lp_column, int lp_row, int lp_layout) {
    // Variable Declarations
    int lv_vIndex;
    int lv_vPlayer;
    string lv_vType;
    abilcmd lv_vAbilCmd;

    // Automatic Variable Declarations
    int autoC5586197_ae;
    const int autoC5586197_ai = 1;

    // Variable Initialization
    lv_vPlayer = UnitGetOwner(lp_unit);
    lv_vType = UnitGetType(lp_unit);

    // Implementation
    autoC5586197_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons", lv_vPlayer) - 1);
    lv_vIndex = 0;
    for ( ; ( (autoC5586197_ai >= 0 && lv_vIndex <= autoC5586197_ae) || (autoC5586197_ai < 0 && lv_vIndex >= autoC5586197_ae) ) ; lv_vIndex += autoC5586197_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Row", lv_vPlayer) == lp_row) && (CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].Column", lv_vPlayer) == lp_column)) {
            lv_vAbilCmd = StringToAbilCmd(CatalogFieldValueGet(c_gameCatalogUnit, lv_vType, "CardLayouts[" + IntToString(lp_layout) + "].LayoutButtons[" + IntToString(lv_vIndex) + "].AbilCmd", lv_vPlayer));
            if ((lv_vAbilCmd != null)) {
                return lv_vAbilCmd;
            }

        }
    }
    return null;
}

bool lib1_gf_IIF13 (int lp_condition) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return true;
    }
    else {
        return false;
    }
}

point lib1_gf_IIF7 (point lp_iF, point lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

region lib1_gf_IIF11 (region lp_iF, region lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int lib1_gf_IIF8 (int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string lib1_gf_IIF4 (string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

unit lib1_gf_IIF6 (unit lp_iF, unit lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string lib1_gf_IIF5 (string lp_iF, string lp_iF2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_iF != null)) {
        return lp_iF;
    }
    else {
        return lp_iF2;
    }
}

string lib1_gf_IIF12 (bool lp_condition, string lp_iF, string lp_iF2) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_iF2;
    }
}

string lib1_gf_IIF (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string lib1_gf_IIF10 (int lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int lib1_gf_IIF2 (bool lp_condition, int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

int lib1_gf_IIF9 (int lp_condition, int lp_iF, int lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition != 0)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string lib1_gf_IIF3 (bool lp_condition, string lp_iF, string lp_eLSE) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_condition == true)) {
        return lp_iF;
    }
    else {
        return lp_eLSE;
    }
}

string lib1_gf_ListGetType (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gf_ListIsExist(lp_list) == true)) {
        return DataTableGetString(true, ("__ListType__" + lp_list));
    }
    else {
        return "";
    }
}

void lib1_gf_ListSetType (string lp_list, string lp_newType) {
    // Variable Declarations
    string lv_previousType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_previousType = lib1_gf_ListGetType(lp_list);

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lv_previousType != "") && (lv_previousType != lp_newType)) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_1_FAC3C8B1"), SoundLink("UI_GenericError", 0));
    }

    DataTableSetString(true, ("__ListType__" + lp_list), lp_newType);
}

void lib1_gf_ListDestroy (string lp_list) {
    // Automatic Variable Declarations
    int auto82756FC8_ae;
    int auto82756FC8_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lib1_gf_ListClear(lp_list);
    DataTableValueRemove(true, ("__ListType__" + lp_list));
    auto82756FC8_ae = (lib1_gf_ListSize(lp_list) - 1);
    auto82756FC8_var = 0;
    for ( ; auto82756FC8_var <= auto82756FC8_ae; auto82756FC8_var += 1 ) {
        DataTableValueRemove(true, lib1_gf_ListGetDatabaseName(lp_list, auto82756FC8_var));
    }
}

void lib1_gf_ListSort (string lp_sortableList, string lp_prriorityList) {
    // Variable Declarations
    string lv_aString;
    int lv_aInt;
    int lv_i;
    int lv_j;
    int lv_n;

    // Automatic Variable Declarations
    int autoAB5AF690_ae;
    const int autoAB5AF690_ai = 1;
    int autoC25B3C01_ae;
    const int autoC25B3C01_ai = 1;
    string auto07BD57CD_val;

    // Variable Initialization
    lv_aString = "";
    lv_n = lib1_gf_ListSize(lp_sortableList);

    // Implementation
    autoAB5AF690_ae = lv_n;
    lv_i = 1;
    for ( ; ( (autoAB5AF690_ai >= 0 && lv_i <= autoAB5AF690_ae) || (autoAB5AF690_ai < 0 && lv_i >= autoAB5AF690_ae) ) ; lv_i += autoAB5AF690_ai ) {
        autoC25B3C01_ae = (lv_n - lv_i);
        lv_j = 1;
        for ( ; ( (autoC25B3C01_ai >= 0 && lv_j <= autoC25B3C01_ae) || (autoC25B3C01_ai < 0 && lv_j >= autoC25B3C01_ae) ) ; lv_j += autoC25B3C01_ai ) {
            if ((lib1_gf_ListIntGet(lp_prriorityList, lv_j) > lib1_gf_ListIntGet(lp_prriorityList, (lv_j + 1)))) {
                auto07BD57CD_val = lib1_gf_ListGetType(lp_sortableList);
                if (auto07BD57CD_val == "int") {
                    lv_aInt = lib1_gf_ListIntGet(lp_sortableList, lv_j);
                    lib1_gf_ListIntSet(lp_sortableList, lv_j, lib1_gf_ListIntGet(lp_sortableList, (lv_j + 1)));
                    lib1_gf_ListIntSet(lp_sortableList, (lv_j + 1), lv_aInt);
                }
                else if (auto07BD57CD_val == "string") {
                    lv_aString = lib1_gf_ListStringGet(lp_sortableList, lv_j);
                    lib1_gf_ListStringSet(lp_sortableList, lv_j, lib1_gf_ListStringGet(lp_sortableList, (lv_j + 1)));
                    lib1_gf_ListStringSet(lp_sortableList, (lv_j + 1), lv_aString);
                    lib1_gf_LOGString("");
                }
                else {
                }
                lv_aInt = lib1_gf_ListIntGet(lp_prriorityList, lv_j);
                lib1_gf_ListIntSet(lp_prriorityList, lv_j, lib1_gf_ListIntGet(lp_prriorityList, (lv_j + 1)));
                lib1_gf_ListIntSet(lp_prriorityList, (lv_j + 1), lv_aInt);
            }
        }
    }
}

void lib1_gf_ListCreate (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

void lib1_gf_ListClear (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lib1_gf_ListSize(lp_list) > 0)) {
        lib1_gf_ListPopBack(lp_list);
    }
}

void lib1_gf_ListPopBack (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((DataTableGetInt(true, lp_list) > 0)) {
        DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) - 1));
        DataTableValueRemove(true, lib1_gf_ListGetDatabaseName(lp_list, DataTableGetInt(true, lp_list)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_1_8D447C8D"), SoundLink("UI_GenericError", 0));
    }
}

int lib1_gf_ListSize (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    return DataTableGetInt(true, lp_list);
}

bool lib1_gf_ListIsEmpty (string lp_list) {
    // Variable Declarations
    bool lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListSize(lp_list) == 0)) {
        lv_result = true;
    }

    return lv_result;
}

string lib1_gf_ListGetDatabaseName (string lp_arrayName, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_arrayName + "[" + IntToString(lp_index) + "]");
}

void lib1_gf_ListCreateIfNotExists (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        DataTableSetInt(true, lp_list, 0);
    }

}

bool lib1_gf_ListIsExist (string lp_list) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_list == "")) {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), StringExternal("Param/Value/lib_1_4B941A05"), SoundLink("UI_GenericError", 0));
        return false;
    }
    return DataTableValueExists(true, lp_list);
}

region lib1_gf_ListRegionGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }

    return null;
}

int lib1_gf_ListRegionIndexOf (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    int auto7632567D_ae;
    int auto7632567D_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto7632567D_ae = lib1_gf_ListSize(lp_list);
        auto7632567D_var = 1;
        for ( ; auto7632567D_var <= auto7632567D_ae; auto7632567D_var += 1 ) {
            if ((lib1_gf_ListRegionGet(lp_list, auto7632567D_var) == lp_value)) {
                return auto7632567D_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListRegionIncludes (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListRegionIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListRegionPush (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListRegionSet (string lp_list, int lp_index, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > lib1_gf_ListSize(lp_list))) {
        lib1_gf_ListRegionPush(lp_list, RegionEmpty());
    }
    if ((lp_index > 0)) {
        DataTableSetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }

}

void lib1_gf_ListRegionInclude (string lp_list, region lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListRegionIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListRegionPush(lp_list, lp_value);
    }

}

void lib1_gf_ListRegionInsertAt (string lp_list, int lp_index, region lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoE315E05D_ae;
    int autoE315E05D_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListRegionPush(lp_list, lib1_gf_ListRegionGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoE315E05D_ae = (lv_start - lv_end);
        autoE315E05D_var = 0;
        for ( ; autoE315E05D_var <= autoE315E05D_ae; autoE315E05D_var += 1 ) {
            DataTableSetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoE315E05D_var)), DataTableGetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoE315E05D_var - 1))));
        }
        lib1_gf_ListRegionSet(lp_list, lp_index, lp_value);
    }

}

void lib1_gf_ListRegionRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto0CFDAAF7_ae;
    int auto0CFDAAF7_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto0CFDAAF7_ae = (lib1_gf_ListSize(lp_list) - 2);
        auto0CFDAAF7_var = (lp_index - 1);
        for ( ; auto0CFDAAF7_var <= auto0CFDAAF7_ae; auto0CFDAAF7_var += 1 ) {
            DataTableSetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, auto0CFDAAF7_var), DataTableGetRegion(true, lib1_gf_ListGetDatabaseName(lp_list, (auto0CFDAAF7_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_6CCD3EEC") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_151BC372") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListRegionExclude (string lp_list, region lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListRegionIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListRegionRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListRegionIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapRegionSet (string lp_unit, string lp_index, region lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRegion(true, ("$E" + lp_unit + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$E" + lp_unit), lp_index);
}

region lib1_gf_MapRegionGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRegion(true, ("$E" + lp_unit + "_" + lp_index));
}

string lib1_gf_MapRegionIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$E" + lp_unit);
}

bool lib1_gf_MapRegionIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapRegionIndexes(lp_unit), lp_index);
}

void lib1_gf_MapRevealerSet (string lp_unit, string lp_index, revealer lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetRevealer(true, ("$V" + lp_unit + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$V" + lp_unit), lp_index);
}

revealer lib1_gf_MapRevealerGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetRevealer(true, ("$V" + lp_unit + "_" + lp_index));
}

string lib1_gf_MapRevealerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$V" + lp_unit);
}

bool lib1_gf_MapRevealerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapRevealerIndexes(lp_unit), lp_index);
}

string lib1_gf_MapPingIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$P" + lp_unit);
}

void lib1_gf_MapPingSet (string lp_unit, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPing(true, ("$P" + lp_unit + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$P" + lp_unit), lp_index);
}

int lib1_gf_MapPingGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPing(true, ("$P" + lp_unit + "_" + lp_index));
}

bool lib1_gf_MapPingIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapPingIndexes(lp_unit), lp_index);
}

void lib1_gf_MapActorSet (string lp_unit, string lp_index, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetActor(true, ("$A" + lp_unit + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$A" + lp_unit), lp_index);
}

actor lib1_gf_MapActorGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetActor(true, ("$A" + lp_unit + "_" + lp_index));
}

string lib1_gf_MapActorIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$A" + lp_unit);
}

bool lib1_gf_MapActorIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapActorIndexes(lp_unit), lp_index);
}

void lib1_gf_MapUnitSet (string lp_map, string lp_index, unit lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnit(true, ("$U" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$U" + lp_map), lp_index);
}

unit lib1_gf_MapUnitGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnit(true, ("$U" + lp_map + "_" + lp_index));
}

string lib1_gf_MapUnitIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$U" + lp_unit);
}

bool lib1_gf_MapUnitIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapUnitIndexes(lp_unit), lp_index);
}

unitgroup lib1_gf_ListUnitGroupGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_6F726E60") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_96AC64FD") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return null;
}

int lib1_gf_ListUnitGroupIndexOf (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    int auto7EFACD7B_ae;
    int auto7EFACD7B_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto7EFACD7B_ae = lib1_gf_ListSize(lp_list);
        auto7EFACD7B_var = 1;
        for ( ; auto7EFACD7B_var <= auto7EFACD7B_ae; auto7EFACD7B_var += 1 ) {
            if ((lib1_gf_ListUnitGroupGet(lp_list, auto7EFACD7B_var) == lp_value)) {
                return auto7EFACD7B_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListUnitGroupIncludes (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListUnitGroupIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListUnitGroupPush (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListUnitGroupSet (string lp_list, int lp_index, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > lib1_gf_ListSize(lp_list))) {
        lib1_gf_ListUnitGroupPush(lp_list, lp_value);
    }
    if ((lp_index > 0)) {
        DataTableSetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }

}

void lib1_gf_ListUnitGroupInclude (string lp_list, unitgroup lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListUnitGroupIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListUnitGroupPush(lp_list, lp_value);
    }

}

void lib1_gf_ListUnitGroupInsertAt (string lp_list, int lp_index, unitgroup lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto0B2E6D99_ae;
    int auto0B2E6D99_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListUnitGroupPush(lp_list, lib1_gf_ListUnitGroupGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto0B2E6D99_ae = (lv_start - lv_end);
        auto0B2E6D99_var = 0;
        for ( ; auto0B2E6D99_var <= auto0B2E6D99_ae; auto0B2E6D99_var += 1 ) {
            DataTableSetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto0B2E6D99_var)), DataTableGetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto0B2E6D99_var - 1))));
        }
        lib1_gf_ListUnitGroupSet(lp_list, lp_index, lp_value);
    }

}

void lib1_gf_ListUnitGroupRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int auto4AA01333_ae;
    int auto4AA01333_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto4AA01333_ae = (lib1_gf_ListSize(lp_list) - 2);
        auto4AA01333_var = (lp_index - 1);
        for ( ; auto4AA01333_var <= auto4AA01333_ae; auto4AA01333_var += 1 ) {
            DataTableSetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, auto4AA01333_var), DataTableGetUnitGroup(true, lib1_gf_ListGetDatabaseName(lp_list, (auto4AA01333_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_B024B942") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_D5BCDAE9") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListUnitGroupExclude (string lp_list, unitgroup lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListUnitGroupIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListUnitGroupRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListUnitGroupIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapUnitGroupSet (string lp_map, string lp_index, unitgroup lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetUnitGroup(true, ("$G" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$G" + lp_map), lp_index);
}

unitgroup lib1_gf_MapUnitGroupGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetUnitGroup(true, ("$G" + lp_map + "_" + lp_index));
}

string lib1_gf_MapUnitGroupIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$G" + lp_unit);
}

bool lib1_gf_MapUnitGroupIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapUnitGroupIndexes(lp_unit), lp_index);
}

void lib1_gf_MapTimerSet (string lp_map, string lp_index, timer lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTimer(true, ("$T" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$T" + lp_map), lp_index);
}

timer lib1_gf_MapTimerGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTimer(true, ("$T" + lp_map + "_" + lp_index));
}

string lib1_gf_MapTimerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$T" + lp_unit);
}

bool lib1_gf_MapTimerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapTimerIndexes(lp_unit), lp_index);
}

void lib1_gf_MapTriggerSet (string lp_map, string lp_index, trigger lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetTrigger(true, ("$R" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$R" + lp_map), lp_index);
}

trigger lib1_gf_MapTriggerGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetTrigger(true, ("$R" + lp_map + "_" + lp_index));
}

string lib1_gf_MapTriggerIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$R" + lp_unit);
}

bool lib1_gf_MapTriggerIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapTriggerIndexes(lp_unit), lp_index);
}

void lib1_gf_MapObjectiveSet (string lp_map, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetObjective(true, ("$O" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$O" + lp_map), lp_index);
}

int lib1_gf_MapObjectiveGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetObjective(true, ("$O" + lp_map + "_" + lp_index));
}

string lib1_gf_MapObjectiveIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$O" + lp_unit);
}

bool lib1_gf_MapObjectiveIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapObjectiveIndexes(lp_unit), lp_index);
}

void lib1_gf_MapTextSet (string lp_map, string lp_index, text lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetText(true, ("$X" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$X" + lp_map), lp_index);
}

text lib1_gf_MapTextGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetText(true, ("$X" + lp_map + "_" + lp_index));
}

string lib1_gf_MapTextIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$X" + lp_unit);
}

bool lib1_gf_MapTextIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapTextIndexes(lp_unit), lp_index);
}

fixed lib1_gf_ListRealGet (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        return DataTableGetFixed(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_0AF59233") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_9813BB19") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return -1;
}

int lib1_gf_ListRealIndexOf (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    int autoA79DF717_ae;
    int autoA79DF717_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        autoA79DF717_ae = lib1_gf_ListSize(lp_list);
        autoA79DF717_var = 1;
        for ( ; autoA79DF717_var <= autoA79DF717_ae; autoA79DF717_var += 1 ) {
            if ((lib1_gf_ListRealGet(lp_list, autoA79DF717_var) == lp_value)) {
                return autoA79DF717_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListRealIncludes (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListRealIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListRealSet (string lp_list, int lp_index, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > lib1_gf_ListSize(lp_list))) {
        lib1_gf_ListRealPush(lp_list, 0.0);
    }
    if ((lp_index > 0)) {
        DataTableSetFixed(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_BED554A3") + FixedToText(lp_value, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_1_E7BB2F21") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_8A312681") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListRealPush (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetFixed(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListRealInclude (string lp_list, fixed lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListRealIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListRealPush(lp_list, lp_value);
    }

}

void lib1_gf_ListRealInsertAt (string lp_list, int lp_index, fixed lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto61F9EC45_ae;
    int auto61F9EC45_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListRealPush(lp_list, lib1_gf_ListRealGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto61F9EC45_ae = (lv_start - lv_end);
        auto61F9EC45_var = 0;
        for ( ; auto61F9EC45_var <= auto61F9EC45_ae; auto61F9EC45_var += 1 ) {
            DataTableSetFixed(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto61F9EC45_var)), DataTableGetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto61F9EC45_var - 1))));
        }
        lib1_gf_ListRealSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_613D18AE") + FixedToText(lp_value, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_1_B8A04B14") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_E3B1183F") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListRealRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoDB137E61_ae;
    int autoDB137E61_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        autoDB137E61_ae = (lib1_gf_ListSize(lp_list) - 2);
        autoDB137E61_var = (lp_index - 1);
        for ( ; autoDB137E61_var <= autoDB137E61_ae; autoDB137E61_var += 1 ) {
            DataTableSetFixed(true, lib1_gf_ListGetDatabaseName(lp_list, autoDB137E61_var), DataTableGetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (autoDB137E61_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_0F0931A2") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_3BAE9C76") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListRealExclude (string lp_list, fixed lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListRealIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListRealRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListRealIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapRealSet (string lp_map, string lp_index, fixed lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetFixed(true, ("$R" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$R" + lp_map), lp_index);
}

fixed lib1_gf_MapRealGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetFixed(true, ("$R" + lp_map + "_" + lp_index));
}

string lib1_gf_MapRealIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$R" + lp_unit);
}

bool lib1_gf_MapRealIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapRealIndexes(lp_unit), lp_index);
}

void lib1_gf_ListIntCopy (string lp_source, string lp_target) {
    // Automatic Variable Declarations
    int auto8FF14810_ae;
    int auto8FF14810_var;

    // Implementation
    if ((lib1_gf_ListSize(lp_source) == 0)) {
        return ;
    }

    lib1_gf_ListClear(lp_target);
    auto8FF14810_ae = lib1_gf_ListSize(lp_source);
    auto8FF14810_var = 1;
    for ( ; auto8FF14810_var <= auto8FF14810_ae; auto8FF14810_var += 1 ) {
        lib1_gf_ListIntPush(lp_target, lib1_gf_ListIntGet(lp_source, auto8FF14810_var));
    }
}

int lib1_gf_ListIntGet (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnvalue = -1;

    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_C908D994") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_105E1F27") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int lib1_gf_ListIntIndexOf (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    int auto7DF083FE_ae;
    int auto7DF083FE_var;

    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto7DF083FE_ae = lib1_gf_ListSize(lp_list);
        auto7DF083FE_var = 1;
        for ( ; auto7DF083FE_var <= auto7DF083FE_ae; auto7DF083FE_var += 1 ) {
            if ((lib1_gf_ListIntGet(lp_list, auto7DF083FE_var) == lp_value)) {
                return auto7DF083FE_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListIntIncludes (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lib1_gf_ListIntIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListIntSet (string lp_list, int lp_index, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    while ((lp_index > lib1_gf_ListSize(lp_list))) {
        lib1_gf_ListIntPush(lp_list, 0);
    }
    if ((lp_index > 0)) {
        DataTableSetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_20DC256C") + IntToText(lp_value) + StringExternal("Param/Value/lib_1_C731BF49") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_D4919715") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListIntPush (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    DataTableSetInt(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListIntInclude (string lp_list, int lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lib1_gf_ListIntIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListIntPush(lp_list, lp_value);
    }

}

void lib1_gf_ListIntInsertAt (string lp_list, int lp_index, int lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoC23B89A3_ae;
    int autoC23B89A3_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListIntPush(lp_list, lib1_gf_ListIntGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoC23B89A3_ae = (lv_start - lv_end);
        autoC23B89A3_var = 0;
        for ( ; autoC23B89A3_var <= autoC23B89A3_ae; autoC23B89A3_var += 1 ) {
            DataTableSetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoC23B89A3_var)), DataTableGetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoC23B89A3_var - 1))));
        }
        lib1_gf_ListIntSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_518429B2") + IntToText(lp_value) + StringExternal("Param/Value/lib_1_9A1E4A7A") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_1FAC4A2C") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListIntRemoveAt (string lp_list, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    int autoEEF75F28_ae;
    int autoEEF75F28_var;

    // Variable Initialization
    lv_index = (lp_index - 1);

    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        autoEEF75F28_ae = (lib1_gf_ListSize(lp_list) - 2);
        autoEEF75F28_var = (lp_index - 1);
        for ( ; autoEEF75F28_var <= autoEEF75F28_ae; autoEEF75F28_var += 1 ) {
            DataTableSetInt(true, lib1_gf_ListGetDatabaseName(lp_list, autoEEF75F28_var), DataTableGetInt(true, lib1_gf_ListGetDatabaseName(lp_list, (autoEEF75F28_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_0347A8EB") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_9C5978BA") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListIntExclude (string lp_list, int lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListSetType(lp_list, "int");
    lv_index = lib1_gf_ListIntIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListIntRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListIntIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapIntSet (string lp_map, string lp_index, int lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetInt(true, ("$I" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$I" + lp_map), lp_index);
}

int lib1_gf_MapIntGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetInt(true, ("$I" + lp_map + "_" + lp_index));
}

string lib1_gf_MapIntIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$I" + lp_unit);
}

bool lib1_gf_MapIntIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapIntIndexes(lp_unit), lp_index);
}

text lib1_gf_ListStringtoText (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int autoF1729896_ae;
    int autoF1729896_var;

    // Variable Initialization
    lv_log_string = "";

    // Implementation
    if ((lp_list == null) && (DataTableValueExists(true, lp_list) == false)) {
        return StringToText("-");
    }
    else {
        autoF1729896_ae = lib1_gf_ListSize(lp_list);
        autoF1729896_var = 1;
        for ( ; autoF1729896_var <= autoF1729896_ae; autoF1729896_var += 1 ) {
            if ((autoF1729896_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + lib1_gf_ListStringGet(lp_list, autoF1729896_var));
        }
        return StringToText(lv_log_string);
    }
}

void lib1_gf_ListStringCopy (string lp_source, string lp_target) {
    // Automatic Variable Declarations
    int auto88EC9606_ae;
    int auto88EC9606_var;

    // Implementation
    if ((lib1_gf_ListSize(lp_source) == 0)) {
        return ;
    }

    lib1_gf_ListClear(lp_target);
    auto88EC9606_ae = lib1_gf_ListSize(lp_source);
    auto88EC9606_var = 1;
    for ( ; auto88EC9606_var <= auto88EC9606_ae; auto88EC9606_var += 1 ) {
        lib1_gf_ListStringPush(lp_target, lib1_gf_ListStringGet(lp_source, auto88EC9606_var));
    }
}

string lib1_gf_ListStringGet (string lp_list, int lp_index) {
    // Variable Declarations
    string lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_returnvalue = "";

    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }

    return lv_returnvalue;
}

int lib1_gf_ListStringIndexOf (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    int auto3EFFA82B_ae;
    int auto3EFFA82B_var;

    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto3EFFA82B_ae = lib1_gf_ListSize(lp_list);
        auto3EFFA82B_var = 1;
        for ( ; auto3EFFA82B_var <= auto3EFFA82B_ae; auto3EFFA82B_var += 1 ) {
            if ((lib1_gf_ListStringGet(lp_list, auto3EFFA82B_var) == lp_value)) {
                return auto3EFFA82B_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListStringIncludes (string lp_list, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lib1_gf_ListStringIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListStringSet (string lp_list, int lp_index, string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_7428F281") + StringToText(lp_value) + StringExternal("Param/Value/lib_1_A74903A2") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_36465233") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringPush (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_addedValue);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListStringInclude (string lp_list, string lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lib1_gf_ListStringIncludes(lp_list, lp_addedValue) == false)) {
        lib1_gf_ListStringPush(lp_list, lp_addedValue);
    }

}

void lib1_gf_ListStringInsertAt (string lp_list, int lp_index, string lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto7CFFCD9E_ae;
    int auto7CFFCD9E_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListStringPush(lp_list, lib1_gf_ListStringGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto7CFFCD9E_ae = (lv_start - lv_end);
        auto7CFFCD9E_var = 0;
        for ( ; auto7CFFCD9E_var <= auto7CFFCD9E_ae; auto7CFFCD9E_var += 1 ) {
            DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto7CFFCD9E_var)), DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto7CFFCD9E_var - 1))));
        }
        lib1_gf_ListStringSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_8031AF85") + StringToText(lp_value) + StringExternal("Param/Value/lib_1_6959161D") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_BB781B1F") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int autoB7CE7C95_ae;
    int autoB7CE7C95_var;

    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        autoB7CE7C95_ae = (lib1_gf_ListSize(lp_list) - 2);
        autoB7CE7C95_var = (lp_index - 1);
        for ( ; autoB7CE7C95_var <= autoB7CE7C95_ae; autoB7CE7C95_var += 1 ) {
            DataTableSetString(true, lib1_gf_ListGetDatabaseName(lp_list, autoB7CE7C95_var), DataTableGetString(true, lib1_gf_ListGetDatabaseName(lp_list, (autoB7CE7C95_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_FAC65340") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_56623D8E") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListStringExclude (string lp_list, string lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListSetType(lp_list, "string");
    lv_index = lib1_gf_ListStringIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListStringRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListStringIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapStringSet (string lp_map, string lp_index, string lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetString(true, ("$S" + lp_map + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$S" + lp_map), lp_index);
}

void lib1_gf_MapStringUnset (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    DataTableValueRemove(true, ("$S" + lp_map + "_" + lp_index));
    lib1_gf_ListStringExclude(("$S" + lp_map), lp_index);
}

string lib1_gf_MapStringGet (string lp_map, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetString(true, ("$S" + lp_map + "_" + lp_index));
}

string lib1_gf_MapStringIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$S" + lp_unit);
}

bool lib1_gf_MapStringIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapStringIndexes(lp_unit), lp_index);
}

abilcmd lib1_gf_ListAbilCmdGet (string lp_list, int lp_index) {
    // Variable Declarations
    abilcmd lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_FC45E740") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_FC575A4C") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int lib1_gf_ListAbilCmdIndexOf (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    int auto7DA1853C_ae;
    int auto7DA1853C_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        auto7DA1853C_ae = lib1_gf_ListSize(lp_list);
        auto7DA1853C_var = 1;
        for ( ; auto7DA1853C_var <= auto7DA1853C_ae; auto7DA1853C_var += 1 ) {
            if ((lib1_gf_ListAbilCmdGet(lp_list, auto7DA1853C_var) == lp_value)) {
                return auto7DA1853C_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListAbilCmdIncludes (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListAbilCmdIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListAbilCmdSet (string lp_list, int lp_index, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        DataTableSetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_D1AFB49A") + StringToText((AbilityCommandGetAbility(lp_value))) + StringExternal("Param/Value/lib_1_8E9FFC91") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_6C5679AE") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListAbilCmdPush (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_value);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListAbilCmdInclude (string lp_list, abilcmd lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListAbilCmdIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListAbilCmdPush(lp_list, lp_value);
    }

}

void lib1_gf_ListAbilCmdInsertAt (string lp_list, int lp_index, abilcmd lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int auto4D1DBBE6_ae;
    int auto4D1DBBE6_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListAbilCmdPush(lp_list, lib1_gf_ListAbilCmdGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        auto4D1DBBE6_ae = (lv_start - lv_end);
        auto4D1DBBE6_var = 0;
        for ( ; auto4D1DBBE6_var <= auto4D1DBBE6_ae; auto4D1DBBE6_var += 1 ) {
            DataTableSetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto4D1DBBE6_var)), DataTableGetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - auto4D1DBBE6_var - 1))));
        }
        lib1_gf_ListAbilCmdSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_C64F2CCD") + StringToText((AbilityCommandGetAbility(lp_value))) + StringExternal("Param/Value/lib_1_BC2F2848") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_63A37A91") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListAbilCmdRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int autoC50D5F52_ae;
    int autoC50D5F52_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        autoC50D5F52_ae = (lib1_gf_ListSize(lp_list) - 2);
        autoC50D5F52_var = (lp_index - 1);
        for ( ; autoC50D5F52_var <= autoC50D5F52_ae; autoC50D5F52_var += 1 ) {
            DataTableSetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, autoC50D5F52_var), DataTableGetAbilCmd(true, lib1_gf_ListGetDatabaseName(lp_list, (autoC50D5F52_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_F3FED900") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_8EC712D1") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListAbilCmdExclude (string lp_list, abilcmd lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListAbilCmdIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListAbilCmdRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListAbilCmdIndexOf(lp_list, lp_value);
    }
}

point lib1_gf_ListPointGet (string lp_list, int lp_index) {
    // Variable Declarations
    point lv_returnvalue;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lv_returnvalue = DataTableGetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)));
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_12DC60F1") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_55C43747") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
    return lv_returnvalue;
}

int lib1_gf_ListPointIndexOf (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    int autoEE3B7C62_ae;
    int autoEE3B7C62_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListIsEmpty(lp_list) == false)) {
        autoEE3B7C62_ae = lib1_gf_ListSize(lp_list);
        autoEE3B7C62_var = 1;
        for ( ; autoEE3B7C62_var <= autoEE3B7C62_ae; autoEE3B7C62_var += 1 ) {
            if ((lib1_gf_ListPointGet(lp_list, autoEE3B7C62_var) == lp_value)) {
                return autoEE3B7C62_var;
            }

        }
    }

    return -1;
}

bool lib1_gf_ListPointIncludes (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListPointIndexOf(lp_list, lp_value) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void lib1_gf_ListPointSet (string lp_list, int lp_index, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    while ((lp_index > lib1_gf_ListSize(lp_list))) {
        lib1_gf_ListPointPush(lp_list, null);
    }
    if ((lp_index > 0)) {
        DataTableSetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, (lp_index - 1)), lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_1A926107") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_88E23323") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListPointPush (string lp_list, point lp_addedValue) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    DataTableSetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, lib1_gf_ListSize(lp_list)), lp_addedValue);
    DataTableSetInt(true, lp_list, (DataTableGetInt(true, lp_list) + 1));
}

void lib1_gf_ListPointInclude (string lp_list, point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lib1_gf_ListPointIncludes(lp_list, lp_value) == false)) {
        lib1_gf_ListPointPush(lp_list, lp_value);
    }

}

void lib1_gf_ListPointInsertAt (string lp_list, int lp_index, point lp_value) {
    // Variable Declarations
    int lv_start;
    int lv_end;

    // Automatic Variable Declarations
    int autoB9ACFDEA_ae;
    int autoB9ACFDEA_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        lib1_gf_ListPointPush(lp_list, lib1_gf_ListPointGet(lp_list, lib1_gf_ListSize(lp_list)));
        lv_start = (lib1_gf_ListSize(lp_list) - 2);
        lv_end = (lp_index + 1);
        autoB9ACFDEA_ae = (lv_start - lv_end);
        autoB9ACFDEA_var = 0;
        for ( ; autoB9ACFDEA_var <= autoB9ACFDEA_ae; autoB9ACFDEA_var += 1 ) {
            DataTableSetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoB9ACFDEA_var)), DataTableGetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, (lv_start - autoB9ACFDEA_var - 1))));
        }
        lib1_gf_ListPointSet(lp_list, lp_index, lp_value);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_954BA468") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_B9FDEC66") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListPointRemoveAt (string lp_list, int lp_index) {
    // Automatic Variable Declarations
    int auto68AC87DD_ae;
    int auto68AC87DD_var;

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    if ((lp_index <= lib1_gf_ListSize(lp_list)) && (lp_index > 0)) {
        auto68AC87DD_ae = (lib1_gf_ListSize(lp_list) - 2);
        auto68AC87DD_var = (lp_index - 1);
        for ( ; auto68AC87DD_var <= auto68AC87DD_ae; auto68AC87DD_var += 1 ) {
            DataTableSetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, auto68AC87DD_var), DataTableGetPoint(true, lib1_gf_ListGetDatabaseName(lp_list, (auto68AC87DD_var + 1))));
        }
        lib1_gf_ListPopBack(lp_list);
    }
    else {
        libNtve_gf_UIErrorMessage(PlayerGroupAll(), (StringExternal("Param/Value/lib_1_146DB04D") + IntToText(lp_index) + StringExternal("Param/Value/lib_1_FCB8663B") + IntToText(lib1_gf_ListSize(lp_list))), SoundLink("UI_GenericError", 0));
    }
}

void lib1_gf_ListPointExclude (string lp_list, point lp_value) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_ListCreateIfNotExists(lp_list);
    lv_index = lib1_gf_ListPointIndexOf(lp_list, lp_value);
    while ((lv_index > 0)) {
        lib1_gf_ListPointRemoveAt(lp_list, lv_index);
        lv_index = lib1_gf_ListPointIndexOf(lp_list, lp_value);
    }
}

void lib1_gf_MapPointSet (string lp_unit, string lp_index, point lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    DataTableSetPoint(true, ("$N" + lp_unit + "_" + lp_index), lp_actor);
    lib1_gf_ListStringInclude(("$N" + lp_unit), lp_index);
}

point lib1_gf_MapPointGet (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return DataTableGetPoint(true, ("$N" + lp_unit + "_" + lp_index));
}

string lib1_gf_MapPointIndexes (string lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    return ("$N" + lp_unit);
}

bool lib1_gf_MapPointIncludes (string lp_unit, string lp_index) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_ListStringIncludes(lib1_gf_MapPointIndexes(lp_unit), lp_index);
}

void lib1_gf_LOGPoint (point lp_value) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_value == null)) {
        lib1_gf_LOGString("-");
    }
    else {
        lib1_gf_LOGString(libNtve_gf_ConvertPointToString(lp_value));
    }
}

void lib1_gf_LOGString (string lp_value) {
    // Automatic Variable Declarations
    // Implementation
    TriggerDebugOutput(4, StringToText(lp_value), true);
    lib1_gv_lOG = (lib1_gv_lOG + " " + lp_value);
}

void lib1_gf_LOGAbilCmd (abilcmd lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString(((AbilityCommandGetAbility(lp_lOG)) + "," + IntToString(AbilityCommandGetCommand(lp_lOG))));
}

void lib1_gf_LOGInteger (int lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString(IntToString(lp_lOG));
}

void lib1_gf_LOGUpgrade (string lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString((lp_lOG));
}

void lib1_gf_LOGUnit (string lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString((lp_lOG));
}

void lib1_gf_LOGUnitGroup (unitgroup lp_lOG) {
    // Variable Declarations
    string lv_string;

    // Automatic Variable Declarations
    unitgroup auto3CB740E4_g;
    int auto3CB740E4_u;
    unit auto3CB740E4_var;

    // Variable Initialization
    lv_string = "[";

    // Implementation
    if ((lp_lOG == null)) {
        lib1_gf_LOGString("-");
    }
    else {
        auto3CB740E4_g = lp_lOG;
        auto3CB740E4_u = UnitGroupCount(auto3CB740E4_g, c_unitCountAll);
        for (;; auto3CB740E4_u -= 1) {
            auto3CB740E4_var = UnitGroupUnitFromEnd(auto3CB740E4_g, auto3CB740E4_u);
            if (auto3CB740E4_var == null) { break; }
            lv_string = (lv_string + " " + (UnitGetType(auto3CB740E4_var)));
        }
        lv_string = (lv_string + "]");
        lib1_gf_LOGString(lv_string);
    }
}

void lib1_gf_LOGReal (fixed lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString(FixedToString(lp_lOG, c_fixedPrecisionAny));
}

void lib1_gf_LOGTrigger (trigger lp_lOG) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_LOGString(TriggerGetFunction(lp_lOG));
}

void lib1_gf_LOGListInt (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int auto306B7CB6_ae;
    int auto306B7CB6_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        lib1_gf_LOGString("-");
    }
    else {
        auto306B7CB6_ae = lib1_gf_ListSize(lp_list);
        auto306B7CB6_var = 1;
        for ( ; auto306B7CB6_var <= auto306B7CB6_ae; auto306B7CB6_var += 1 ) {
            if ((auto306B7CB6_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + IntToString(lib1_gf_ListIntGet(lp_list, auto306B7CB6_var)));
        }
        lv_log_string = (lv_log_string + "]");
        lib1_gf_LOGString(lv_log_string);
    }
}

void lib1_gf_LOGListString (string lp_list) {
    // Variable Declarations
    string lv_log_string;

    // Automatic Variable Declarations
    int auto0E676949_ae;
    int auto0E676949_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((lp_list == null) && (DataTableValueExists(true, lp_list) == false)) {
        lib1_gf_LOGString("-");
    }
    else {
        auto0E676949_ae = lib1_gf_ListSize(lp_list);
        auto0E676949_var = 1;
        for ( ; auto0E676949_var <= auto0E676949_ae; auto0E676949_var += 1 ) {
            if ((auto0E676949_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_log_string = (lv_log_string + lib1_gf_ListStringGet(lp_list, auto0E676949_var));
        }
        lv_log_string = (lv_log_string + "]");
        lib1_gf_LOGString(lv_log_string);
    }
}

void lib1_gf_LOGListAbilCmd (string lp_list) {
    // Variable Declarations
    abilcmd lv_abil;
    string lv_log_string;

    // Automatic Variable Declarations
    int autoAAF78392_ae;
    int autoAAF78392_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        lib1_gf_LOGString("-");
    }
    else {
        autoAAF78392_ae = lib1_gf_ListSize(lp_list);
        autoAAF78392_var = 1;
        for ( ; autoAAF78392_var <= autoAAF78392_ae; autoAAF78392_var += 1 ) {
            if ((autoAAF78392_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_abil = lib1_gf_ListAbilCmdGet(lp_list, autoAAF78392_var);
            lv_log_string = (lv_log_string + ((AbilityCommandGetAbility(lv_abil)) + "," + IntToString(AbilityCommandGetCommand(lv_abil))));
        }
        lv_log_string = (lv_log_string + "]");
        lib1_gf_LOGString(lv_log_string);
    }
}

void lib1_gf_LOGListPoint (string lp_list) {
    // Variable Declarations
    point lv_point;
    string lv_log_string;

    // Automatic Variable Declarations
    int auto95F37C45_ae;
    int auto95F37C45_var;

    // Variable Initialization
    lv_log_string = "[";

    // Implementation
    if ((DataTableValueExists(true, lp_list) == false)) {
        lib1_gf_LOGString("-");
    }
    else {
        auto95F37C45_ae = lib1_gf_ListSize(lp_list);
        auto95F37C45_var = 1;
        for ( ; auto95F37C45_var <= auto95F37C45_ae; auto95F37C45_var += 1 ) {
            if ((auto95F37C45_var > 1)) {
                lv_log_string = (lv_log_string + ",");
            }

            lv_point = lib1_gf_ListPointGet(lp_list, auto95F37C45_var);
            lv_log_string = (lv_log_string + libNtve_gf_ConvertPointToString(lv_point));
        }
        lv_log_string = (lv_log_string + "]");
        lib1_gf_LOGString(lv_log_string);
    }
}

void lib1_gf_PrepareUnitTesterFactions () {
    // Variable Declarations
    string lv_race;

    // Automatic Variable Declarations
    int autoE452331A_catalog;
    int autoE452331A_i;

    // Variable Initialization

    // Implementation
    autoE452331A_catalog = c_gameCatalogRace;
    autoE452331A_i = 1;
    for ( ; autoE452331A_i <= CatalogEntryCount(c_gameCatalogRace) ; autoE452331A_i += 1 ) {
        lv_race = CatalogEntryGet(autoE452331A_catalog, autoE452331A_i);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogRace, lv_race, "Flags[" + IntToString(0) + "]", c_playerAny) == 1)) {
            lib1_gf_ListStringInclude(lib1_gv_factions, (lv_race));
        }
    }
    lib1_gf_SetupUnitTesterFactionAllUnitsSearch("");
    lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace("Terr", 1, true);
    lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace("Prot", 1, true);
    lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace("Zerg", 1, true);
}

void lib1_gf_ResetUnitSetup () {
    // Variable Declarations
    string lv_race;

    // Automatic Variable Declarations
    int auto45384523_catalog;
    int auto45384523_i;

    // Variable Initialization

    // Implementation
    auto45384523_catalog = c_gameCatalogRace;
    auto45384523_i = 1;
    for ( ; auto45384523_i <= CatalogEntryCount(c_gameCatalogRace) ; auto45384523_i += 1 ) {
        lv_race = CatalogEntryGet(auto45384523_catalog, auto45384523_i);
        lib1_gf_ListClear(("^AI" + (lv_race) + "TableStructures"));
        lib1_gf_ListClear(("^AI" + (lv_race) + "TableUnits"));
        lib1_gf_ListClear(("^AI" + (lv_race) + "TableLabelUpgrades"));
        lib1_gf_ListClear(("^AI" + (lv_race) + "TableUpgrades"));
        lib1_gf_ListClear(("^AI" + (lv_race) + "Units"));
        lib1_gf_ListClear(("^AIUpgrades"));
    }
}

void lib1_gf_SetupUnitTesterFactionSmartAllRaces (bool lp_addRestricted) {
    // Variable Declarations
    string lv_catalogRace;

    // Automatic Variable Declarations
    int auto206E9CF3_ae;
    int auto206E9CF3_var;

    // Variable Initialization

    // Implementation
    lib1_gf_ResetUnitSetup();
    auto206E9CF3_ae = CatalogEntryCount(c_gameCatalogRace);
    auto206E9CF3_var = 1;
    for ( ; auto206E9CF3_var <= auto206E9CF3_ae; auto206E9CF3_var += 1 ) {
        lv_catalogRace = CatalogEntryGet(c_gameCatalogRace, auto206E9CF3_var);
        if ((CatalogFieldValueGetAsInt(c_gameCatalogRace, lv_catalogRace, "Flags[" + IntToString(0) + "]", c_playerAny) == 1) && (CatalogFieldValueCount(c_gameCatalogRace, lv_catalogRace, "StartingUnitArray", c_playerAny) > 0)) {
            lib1_gf_ListStringInclude(lib1_gv_factions, (lv_catalogRace));
            lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace(((lv_catalogRace)), 0, lp_addRestricted);
        }

    }
}

void lib1_gf_SetupUnitTesterFactionSmartSpecifiedRace (string lp_race, int lp_player, bool lp_addRestricted) {
    // Variable Declarations
    string lv_race;
    int lv_startingUnitCount;
    int lv_index;
    int lv_cardlayout;
    int lv_layoutbutton;
    string lv_unitName1;
    string lv_unitName2;
    string lv_unitName3;
    string lv_unitType;
    string lv_unitType2;
    string lv_abilCmdName;
    abilcmd lv_abilCmd;
    int lv_abilCmdIndex;
    string lv_ability;
    string lv_ability2;
    string lv_behavior;
    string lv_aiunits;
    string lv_aiupgrades;
    string lv_aiunitfood;
    string lv_aiunitsupport;
    string lv_aiunitcombat;
    string lv_aiunitworker;
    string lv_aiunittransport;
    string lv_aistructuretech;
    string lv_aistructureproduction;
    string lv_aistructuredefenses;
    string lv_aistructurepower;
    string lv_aistructuredropoff;
    string lv_aistructuremain;
    string lv_aistructurerefinery;
    string lv_aimorph;
    string lv_aiprojectiles;
    string lv_airequirements;
    bool lv_unitfood;
    bool lv_unitstructure;
    bool lv_unittech;
    bool lv_unitproduction;
    bool lv_unitdetection;
    bool lv_unitworker;
    bool lv_unitcombat;
    bool lv_unittransport;
    bool lv_unitdropoff;
    bool lv_unitdropoffmorph;
    bool lv_unitvespene;
    bool lv_isPhaseMorphAbility;
    string lv_airesultunits;
    string lv_airesultstructures;
    string lv_airesultupgrades;
    string lv_airesultlevelupgrades;
    string lv_unfininshedReq;
    int lv_glossaryPriority;
    int lv_upgradeLevel;
    string lv_upgradeLevelString;
    string lv_upgradeBase;
    bool lv_ignoreGlossaryPriority;
    string lv_race2;

    // Automatic Variable Declarations
    int auto69839E79_ae;
    int auto69839E79_var;
    int auto2893F959_ae;
    int auto2893F959_var;
    int auto5C9DF00B_ae;
    int auto5C9DF00B_var;
    int auto85286064_ae;
    int auto85286064_var;
    int autoD3BDD92F_ae;
    int autoD3BDD92F_var;
    int autoDD2B54C3_ae;
    int autoDD2B54C3_var;
    int autoB1C6FFCA_ae;
    int autoB1C6FFCA_var;
    int auto45E107D1_ae;
    int auto45E107D1_var;
    int auto917EE61D_ae;
    int auto917EE61D_var;
    int autoFDBC9BBD_ae;
    int autoFDBC9BBD_var;
    int auto8DD12BC2_ae;
    int auto8DD12BC2_var;
    int autoD386A42D_ae;
    const int autoD386A42D_ai = 1;
    int auto04B6B0A5_ae;
    const int auto04B6B0A5_ai = 1;
    int auto2E905019_val;
    int auto2BE35695_ae;
    int auto2BE35695_var;
    int auto0450C23B_ae;
    int auto0450C23B_var;
    int autoD97F78DB_ae;
    int autoD97F78DB_var;
    int autoFED1911C_ae;
    int autoFED1911C_var;
    int auto3CDD1B5E_ae;
    int auto3CDD1B5E_var;
    int auto358BA794_ae;
    int auto358BA794_var;

    // Variable Initialization
    lv_race = (lp_race);
    lv_index = 1;
    lv_unitName1 = "";
    lv_unitName2 = "";
    lv_unitName3 = "";
    lv_aiunits = ("^AI" + lv_race + "Units");
    lv_aiupgrades = ("^AI" + lv_race + "Upgrades");
    lv_aiunitfood = ("^AI" + lv_race + "StructureFood");
    lv_aiunitsupport = ("^AI" + lv_race + "UnitSupport");
    lv_aiunitcombat = ("^AI" + lv_race + "UnitCombat");
    lv_aiunitworker = ("^AI" + lv_race + "UnitWorker");
    lv_aiunittransport = ("^AI" + lv_race + "UnitTransport");
    lv_aistructuretech = ("^AI" + lv_race + "StructureTech");
    lv_aistructureproduction = ("^AI" + lv_race + "StructureProduction");
    lv_aistructuredefenses = ("^AI" + lv_race + "StructureDefense");
    lv_aistructurepower = ("^AI" + lv_race + "StructurePower");
    lv_aistructuredropoff = ("^AI" + lv_race + "StructureDropOff");
    lv_aistructuremain = ("^AI" + lv_race + "StructureMain");
    lv_aistructurerefinery = ("^AI" + lv_race + "StructureRefinery");
    lv_aimorph = ("^AI" + lv_race + "Morphs");
    lv_aiprojectiles = ("^AI" + lv_race + "Projectiles");
    lv_airequirements = ("^AI" + lv_race + "Requirements");
    lv_airesultunits = ("^AI" + lv_race + "TableUnits");
    lv_airesultstructures = ("^AI" + lv_race + "TableStructures");
    lv_airesultupgrades = ("^AI" + lv_race + "TableUpgrades");
    lv_airesultlevelupgrades = ("^AI" + lv_race + "TableLabelUpgrades");
    lv_upgradeLevelString = "";
    lv_upgradeBase = "";

    // Implementation
    lib1_gf_ListClear(("^AI" + (lp_race) + "TableStructures"));
    lib1_gf_ListClear(("^AI" + (lp_race) + "TableUnits"));
    lib1_gf_ListClear(("^AI" + (lp_race) + "TableLabelUpgrades"));
    lib1_gf_ListClear(("^AI" + (lp_race) + "TableUpgrades"));
    lib1_gf_ListClear(("^AI" + (lp_race) + "Units"));
    auto69839E79_ae = (CatalogFieldValueCount(c_gameCatalogRace, lp_race, "StartingUnitArray", c_playerAny) - 1);
    auto69839E79_var = 0;
    for ( ; auto69839E79_var <= auto69839E79_ae; auto69839E79_var += 1 ) {
        lv_startingUnitCount = CatalogFieldValueGetAsInt(c_gameCatalogRace, lp_race, "StartingUnitArray[" + IntToString(auto69839E79_var) + "].Count", c_playerAny);
        lv_unitType = (CatalogFieldValueGet(c_gameCatalogRace, lp_race, "StartingUnitArray[" + IntToString(auto69839E79_var) + "].Unit", c_playerAny));
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        if ((lv_unitType != null) && (lv_startingUnitCount > 0)) {
            if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == true)) {
                lib1_gf_ListStringInclude(lv_aiunits, (lv_unitType));
                if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "GlossaryPriority", lp_player) == 0)) {
                    lv_ignoreGlossaryPriority = true;
                }
            }
            else {
                lib1_gf_LOGString(("Wrong Unit ID: " + (lv_unitType)));
            }
        }
    }
    while ((lib1_gf_ListStringGet(lv_aiunits, lv_index) != null)) {
        lv_unitName1 = lib1_gf_ListStringGet(lv_aiunits, lv_index);
        lv_unitType = (lv_unitName1);
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == false)) {
            lib1_gf_ListStringExclude(lv_aiunits, lv_unitName1);
            continue;
        }

        if (((UnitTypeTestFlag(lv_unitType, c_unitFlagUnselectable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagUncommandable) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagMissile) == true) || (UnitTypeTestFlag(lv_unitType, c_unitFlagNoDraw) == true))) {
            lv_index += 1;
            lib1_gf_ListStringInclude(lv_aiprojectiles, lv_unitName1);
            lib1_gf_ListStringExclude(lv_aiunits, lv_unitName1);
            continue;
        }

        lv_unitproduction = false;
        lv_unittech = false;
        lv_unittransport = false;
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "WeaponArray", lp_player) > 0)) {
            lv_unitcombat = true;
        }
        else {
            lv_unitcombat = false;
        }
        lv_unitdetection = lib1_gf_UnitisDetector(lp_player, lv_unitType);
        lib1_gf_ListStringExclude(lv_aimorph, lv_unitName1);
        auto2893F959_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "AbilArray", lp_player) - 1);
        auto2893F959_var = 0;
        for ( ; auto2893F959_var <= auto2893F959_ae; auto2893F959_var += 1 ) {
            lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "AbilArray[" + IntToString(auto2893F959_var) + "].Link", lp_player));
            if ((AbilityClass(lv_ability) == c_classIdCAbilMorph)) {
                auto5C9DF00B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                auto5C9DF00B_var = 0;
                for ( ; auto5C9DF00B_var <= auto5C9DF00B_ae; auto5C9DF00B_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(auto5C9DF00B_var) + "].Unit", lp_player);
                    if ((lv_unitName2 == "")) {
                        continue;
                    }
                    if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                        continue;
                    }
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitName2) == false)) {
                        continue;
                    }
                    lv_unitType2 = (lv_unitName2);
                    lv_isPhaseMorphAbility = false;
                    auto85286064_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto85286064_var = 0;
                    for ( ; auto85286064_var <= auto85286064_ae; auto85286064_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto85286064_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            autoD3BDD92F_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoD3BDD92F_var = 0;
                            for ( ; autoD3BDD92F_var <= autoD3BDD92F_ae; autoD3BDD92F_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoD3BDD92F_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            autoDD2B54C3_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoDD2B54C3_var = 0;
                            for ( ; autoDD2B54C3_var <= autoDD2B54C3_ae; autoDD2B54C3_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoDD2B54C3_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            lib1_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        lib1_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((lib1_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

            if ((AbilityClass(lv_ability) == c_classIdCAbilMorphPlacement)) {
                autoB1C6FFCA_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray", lp_player) - 1);
                autoB1C6FFCA_var = 0;
                for ( ; autoB1C6FFCA_var <= autoB1C6FFCA_ae; autoB1C6FFCA_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(autoB1C6FFCA_var) + "].Unit", lp_player);
                    if ((lv_unitName2 == "")) {
                        continue;
                    }
                    if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                        continue;
                    }
                    if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitName2) == false)) {
                        continue;
                    }
                    lv_unitType2 = (lv_unitName2);
                    lv_isPhaseMorphAbility = false;
                    auto45E107D1_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName2, "AbilArray", lp_player) - 1);
                    auto45E107D1_var = 0;
                    for ( ; auto45E107D1_var <= auto45E107D1_ae; auto45E107D1_var += 1 ) {
                        lv_ability2 = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName2, "AbilArray[" + IntToString(auto45E107D1_var) + "].Link", lp_player));
                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorph)) {
                            auto917EE61D_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            auto917EE61D_var = 0;
                            for ( ; auto917EE61D_var <= auto917EE61D_ae; auto917EE61D_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(auto917EE61D_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                        if ((AbilityClass(lv_ability2) == c_classIdCAbilMorphPlacement)) {
                            autoFDBC9BBD_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability2, "InfoArray", lp_player) - 1);
                            autoFDBC9BBD_var = 0;
                            for ( ; autoFDBC9BBD_var <= autoFDBC9BBD_ae; autoFDBC9BBD_var += 1 ) {
                                lv_unitName3 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability2, "InfoArray[" + IntToString(autoFDBC9BBD_var) + "].Unit", lp_player);
                                if ((lv_unitName3 == lv_unitName1)) {
                                    lv_isPhaseMorphAbility = true;
                                }

                            }
                        }

                    }
                    if ((lv_isPhaseMorphAbility == false)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        if ((lv_unitdropoff == true)) {
                            lib1_gf_ListStringExclude(lv_aistructuremain, lv_unitName2);
                        }

                    }
                    else {
                        lib1_gf_ListStringInclude(lv_aimorph, lv_unitName2);
                        if ((CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType2, "WeaponArray", lp_player) > 0)) {
                            lv_unitcombat = true;
                        }
                        if ((lib1_gf_UnitisDetector(lp_player, lv_unitType2) == true)) {
                            lv_unitdetection = true;
                        }
                    }
                }
            }

        }
        if ((lv_unitdropoff == true)) {
            lib1_gf_ListStringInclude(lv_aistructuredropoff, lv_unitName1);
        }

        if ((libNtve_gf_CatalogFieldValueGetAsReal(c_gameCatalogUnit, lv_unitType, "Food", lp_player) > 0)) {
            lv_unitfood = true;
        }
        else {
            lv_unitfood = false;
        }
        lv_unitvespene = false;
        auto8DD12BC2_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitType, "BuiltOn", c_playerAny) - 1);
        auto8DD12BC2_var = 0;
        for ( ; auto8DD12BC2_var <= auto8DD12BC2_ae; auto8DD12BC2_var += 1 ) {
            if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "BuiltOn[" + IntToString(auto8DD12BC2_var) + "]", lp_player) == "VespeneGeyser")) {
                lv_unitvespene = true;
            }

        }
        autoD386A42D_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts", lp_player) - 1);
        lv_cardlayout = 0;
        for ( ; ( (autoD386A42D_ai >= 0 && lv_cardlayout <= autoD386A42D_ae) || (autoD386A42D_ai < 0 && lv_cardlayout >= autoD386A42D_ae) ) ; lv_cardlayout += autoD386A42D_ai ) {
            auto04B6B0A5_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons", lp_player) - 1);
            lv_layoutbutton = 0;
            for ( ; ( (auto04B6B0A5_ai >= 0 && lv_layoutbutton <= auto04B6B0A5_ae) || (auto04B6B0A5_ai < 0 && lv_layoutbutton >= auto04B6B0A5_ae) ) ; lv_layoutbutton += auto04B6B0A5_ai ) {
                lv_abilCmdName = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "CardLayouts[" + IntToString(lv_cardlayout) + "].LayoutButtons[" + IntToString(lv_layoutbutton) + "].AbilCmd", c_playerAny);
                if ((lv_abilCmdName != null)) {
                    lv_abilCmd = StringToAbilCmd(lv_abilCmdName);
                    lv_ability = AbilityCommandGetAbility(lv_abilCmd);
                    lv_abilCmdIndex = AbilityCommandGetCommand(lv_abilCmd);
                    if ((TechTreeAbilityIsAllowed(lp_player, lv_abilCmd) == false)) {
                        continue;
                    }

                    auto2E905019_val = AbilityClass(lv_ability);
                    if (auto2E905019_val == c_classIdCAbilMerge) {
                        lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "Info.Unit", lp_player);
                        if ((lv_unitName2 != null)) {
                            if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "CmdButtonArray[" + IntToString(0) + "].State", lp_player) == "Restricted")) {
                                continue;
                            }
                            lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                        }

                    }
                    else if (auto2E905019_val == c_classIdCAbilTransport) {
                        if ((lv_unitstructure == false)) {
                            lv_unittransport = true;
                        }

                    }
                    else if (auto2E905019_val == c_classIdCAbilBuild) {
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", c_playerAny);
                            if ((lv_unitName2 != null)) {
                                if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto2E905019_val == c_classIdCAbilTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            auto0450C23B_ae = (CatalogFieldValueCount(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player) - 1);
                            auto0450C23B_var = 0;
                            for ( ; auto0450C23B_var <= auto0450C23B_ae; auto0450C23B_var += 1 ) {
                                lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit[" + IntToString(auto0450C23B_var) + "]", lp_player);
                                if ((lv_unitName2 != null)) {
                                    if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                        continue;
                                    }
                                    lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                                }

                            }
                        }

                    }
                    else if (auto2E905019_val == c_classIdCAbilWarpTrain) {
                        lv_unitproduction = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Unit", lp_player);
                            if ((lv_unitName2 != null)) {
                                if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                            }

                        }

                    }
                    else if (auto2E905019_val == c_classIdCAbilResearch) {
                        lv_unittech = true;
                        if ((lv_abilCmdIndex < 30)) {
                            lv_unitName2 = CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Upgrade", lp_player);
                            if ((lv_unitName2 != null)) {
                                if ((lp_addRestricted == false) && (CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(lv_abilCmdIndex) + "].Button.State", lp_player) == "Restricted")) {
                                    continue;
                                }
                                lib1_gf_ListStringInclude(lv_aiupgrades, lv_unitName2);
                            }

                        }

                    }
                    else {
                        lib1_gf_ClearCache();
                        lib1_gv_sEARCHMODE = lib1_ge_SearchMode_Units;
                        if ((lib1_gf_ByPassAbility(lp_player, lv_ability) == true)) {
                            auto2BE35695_ae = lib1_gf_ListSize(lib1_gv_byPassUnits);
                            auto2BE35695_var = 1;
                            for ( ; auto2BE35695_var <= auto2BE35695_ae; auto2BE35695_var += 1 ) {
                                lib1_gf_ListStringInclude(lv_aiunits, lib1_gf_ListStringGet(lib1_gv_byPassUnits, auto2BE35695_var));
                            }
                        }

                    }
                }

            }
        }
        autoD97F78DB_ae = (CatalogFieldValueCount(c_gameCatalogUnit, lv_unitName1, "BehaviorArray", lp_player) - 1);
        autoD97F78DB_var = 0;
        for ( ; autoD97F78DB_var <= autoD97F78DB_ae; autoD97F78DB_var += 1 ) {
            lv_behavior = (CatalogFieldValueGet(c_gameCatalogUnit, lv_unitName1, "BehaviorArray[" + IntToString(autoD97F78DB_var) + "].Link", lp_player));
            if ((CatalogEntryIsValid(c_gameCatalogBehavior, lv_behavior) == true) && (CatalogEntryClass(c_gameCatalogBehavior, lv_behavior) == lib1_gv_cBehaviorSpawn)) {
                lv_unitproduction = true;
                autoFED1911C_ae = (CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "InfoArray", lp_player) - 1);
                autoFED1911C_var = 0;
                for ( ; autoFED1911C_var <= autoFED1911C_ae; autoFED1911C_var += 1 ) {
                    lv_unitName2 = CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "InfoArray[" + IntToString(autoFED1911C_var) + "].Unit", lp_player);
                    if ((lv_unitName2 != null)) {
                        lib1_gf_ListStringInclude(lv_aiunits, lv_unitName2);
                    }

                }
            }

        }
        if ((lv_unitvespene == true)) {
            lib1_gf_ListStringInclude(lv_aistructurerefinery, lv_unitName1);
        }
        else if ((lv_unitworker == true)) {
            lib1_gf_ListStringInclude(lv_aiunitworker, lv_unitName1);
        }
        else if ((lv_unitdropoff == true)) {
            if ((lv_unitdropoffmorph == false)) {
                lib1_gf_ListStringInclude(lv_aistructuremain, lv_unitName1);
            }
            else {
                if ((lv_unitcombat == false)) {
                    lib1_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
                }
                else {
                    lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
                }
            }
        }
        else if ((lv_unitcombat == false) && (lv_unitproduction == true)) {
            lib1_gf_ListStringInclude(lv_aistructureproduction, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && ((lv_unitcombat == true) || (lv_unitdetection == true))) {
            lib1_gf_ListStringInclude(lv_aistructuredefenses, lv_unitName1);
        }
        else if ((lv_unitstructure == true) && (lv_unittech == true)) {
            lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if ((lv_unitfood == true)) {
            lib1_gf_ListStringInclude(lv_aiunitfood, lv_unitName1);
        }
        else if ((lv_unitstructure == true)) {
            lib1_gf_ListStringInclude(lv_aistructuretech, lv_unitName1);
        }
        else if (true) {
            if ((lv_unitcombat == true)) {
                lib1_gf_ListStringInclude(lv_aiunitcombat, lv_unitName1);
            }
            if ((lv_unittransport == true)) {
                lib1_gf_ListStringInclude(lv_aiunittransport, lv_unitName1);
            }
            if ((lv_unitdetection == true)) {
                lib1_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
            }
            if ((lv_unitdetection == false) && (lv_unittransport == false) && (lv_unitcombat == false)) {
                lib1_gf_ListStringInclude(lv_aiunitsupport, lv_unitName1);
            }
        }
        lv_index += 1;
    }
    lib1_gf_ListCreate("SetupFactionPriorityListUnits");
    lib1_gf_ListCreate("SetupFactionPriorityListStructures");
    auto3CDD1B5E_ae = lib1_gf_ListSize(lv_aiunits);
    auto3CDD1B5E_var = 1;
    for ( ; auto3CDD1B5E_var <= auto3CDD1B5E_ae; auto3CDD1B5E_var += 1 ) {
        lv_unitName1 = lib1_gf_ListStringGet(lv_aiunits, auto3CDD1B5E_var);
        lv_unitType = (lv_unitName1);
        lv_unitstructure = UnitTypeTestAttribute(lv_unitType, c_unitAttributeStructure);
        lv_unitworker = UnitTypeTestFlag(lv_unitType, c_unitFlagWorker);
        lv_glossaryPriority = CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "GlossaryPriority", lp_player);
        if (((lv_glossaryPriority > 0) || (lv_ignoreGlossaryPriority == true))) {
            if ((lv_unitstructure == true)) {
                lib1_gf_ListStringPush(lv_airesultstructures, (lv_unitType));
                lib1_gf_ListIntPush("SetupFactionPriorityListStructures", lv_glossaryPriority);
            }
            else {
                lib1_gf_ListStringPush(lv_airesultunits, (lv_unitType));
                lib1_gf_ListIntPush("SetupFactionPriorityListUnits", lv_glossaryPriority);
            }
        }
    }
    lib1_gf_ListSort(lv_airesultunits, "SetupFactionPriorityListUnits");
    lib1_gf_ListSort(lv_airesultstructures, "SetupFactionPriorityListStructures");
    lib1_gf_ListDestroy("SetupFactionPriorityListUnits");
    lib1_gf_ListDestroy("SetupFactionPriorityListStructures");
    auto358BA794_ae = lib1_gf_ListSize(lv_aiupgrades);
    auto358BA794_var = 1;
    for ( ; auto358BA794_var <= auto358BA794_ae; auto358BA794_var += 1 ) {
        lv_unitName1 = lib1_gf_ListStringGet(lv_aiupgrades, auto358BA794_var);
        lv_upgradeLevelString = StringSub(lv_unitName1, StringLength(lv_unitName1), (StringLength(lv_unitName1) + 1));
        if (((lv_upgradeLevelString == "1") || (lv_upgradeLevelString == "2") || (lv_upgradeLevelString == "3") || (lv_upgradeLevelString == "4") || (lv_upgradeLevelString == "5") || (lv_upgradeLevelString == "6") || (lv_upgradeLevelString == "7"))) {
            lv_upgradeLevel = StringToInt(StringSub(lv_unitName1, StringLength(lv_unitName1), (StringLength(lv_unitName1) + 1)));
            lv_upgradeBase = StringSub(lv_unitName1, 1, (StringLength(lv_unitName1) - 1));
        }
        else {
            lv_upgradeLevel = 0;
        }
        if ((lv_upgradeLevel > 0)) {
            lib1_gf_ListStringInclude(lv_airesultlevelupgrades, lv_upgradeBase);
        }
        else {
            lib1_gf_ListStringInclude(lv_airesultupgrades, lv_unitName1);
        }
    }
}

void lib1_gf_SetupUnitTesterFactionAllUnitsSearch (string lp_search) {
    // Variable Declarations
    string lv_upgradeID;
    string lv_aiunits;
    string lv_aiupgrades;
    bool lv_unitstructure;
    bool lv_unitworker;
    string lv_unitEntry;
    string lv_upgrade;
    string lv_unitID;
    string lv_raceID;
    string lv_race;
    int lv_upgradeLevel;
    string lv_upgradeLevelString;
    string lv_upgradeBase;

    // Automatic Variable Declarations
    int auto76FA59DB_catalog;
    int auto76FA59DB_i;
    int autoF67EFEB6_catalog;
    int autoF67EFEB6_i;
    int autoD893335A_ae;
    int autoD893335A_var;

    // Variable Initialization
    lv_upgradeID = "";
    lv_aiunits = ("^AI" + lv_raceID + "Units");
    lv_aiupgrades = ("^AIUpgrades");
    lv_unitID = "";
    lv_raceID = "";
    lv_upgradeLevelString = "";
    lv_upgradeBase = "";

    // Implementation
    lib1_gf_ResetUnitSetup();
    auto76FA59DB_catalog = c_gameCatalogUnit;
    auto76FA59DB_i = 1;
    for ( ; auto76FA59DB_i <= CatalogEntryCount(c_gameCatalogUnit) ; auto76FA59DB_i += 1 ) {
        lv_unitEntry = CatalogEntryGet(auto76FA59DB_catalog, auto76FA59DB_i);
        lv_raceID = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitEntry, "Race", c_playerAny);
        lv_unitstructure = UnitTypeTestAttribute(lv_unitEntry, c_unitAttributeStructure);
        if ((CatalogFieldValueGet(c_gameCatalogUnit, lv_unitEntry, "FlagArray[" + IntToString(c_unitFlagUnselectable) + "]", c_playerAny) != "1") && ((lp_search == "") || (StringFind((lv_unitEntry), lp_search, c_stringNoCase) > 0))) {
            if ((lv_unitstructure == true)) {
                lib1_gf_ListStringPush(("^AI" + lv_raceID + "TableStructures"), (lv_unitEntry));
            }
            else {
                lib1_gf_ListStringPush(("^AI" + lv_raceID + "TableUnits"), (lv_unitEntry));
            }
        }

    }
    autoF67EFEB6_catalog = c_gameCatalogUpgrade;
    autoF67EFEB6_i = 1;
    for ( ; autoF67EFEB6_i <= CatalogEntryCount(c_gameCatalogUpgrade) ; autoF67EFEB6_i += 1 ) {
        lv_upgrade = CatalogEntryGet(autoF67EFEB6_catalog, autoF67EFEB6_i);
        if (((lp_search == "") || (StringFind((lv_upgrade), lp_search, c_stringNoCase) > 0))) {
            lib1_gf_ListStringInclude(lv_aiupgrades, (lv_upgrade));
        }

    }
    autoD893335A_ae = lib1_gf_ListSize(lv_aiupgrades);
    autoD893335A_var = 1;
    for ( ; autoD893335A_var <= autoD893335A_ae; autoD893335A_var += 1 ) {
        lv_upgradeID = lib1_gf_ListStringGet(lv_aiupgrades, autoD893335A_var);
        lv_upgradeLevelString = StringSub(lv_upgradeID, StringLength(lv_upgradeID), (StringLength(lv_upgradeID) + 1));
        lv_raceID = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeID, "Race", c_playerAny);
        if (((lv_upgradeLevelString == "1") || (lv_upgradeLevelString == "2") || (lv_upgradeLevelString == "3") || (lv_upgradeLevelString == "4") || (lv_upgradeLevelString == "5") || (lv_upgradeLevelString == "6") || (lv_upgradeLevelString == "7"))) {
            lv_upgradeLevel = StringToInt(StringSub(lv_upgradeID, StringLength(lv_upgradeID), (StringLength(lv_upgradeID) + 1)));
            lv_upgradeBase = StringSub(lv_upgradeID, 1, (StringLength(lv_upgradeID) - 1));
        }
        else {
            lv_upgradeLevel = 0;
        }
        if ((lv_upgradeLevel > 0)) {
            lib1_gf_ListStringInclude(("^AI" + lv_raceID + "TableLabelUpgrades"), lv_upgradeBase);
        }
        else {
            lib1_gf_ListStringInclude(("^AI" + lv_raceID + "TableUpgrades"), lv_upgradeID);
        }
    }
}

void lib1_gf_SetActors () {
    // Variable Declarations
    int lv_i;
    int lv_j;
    string lv_term;
    string lv_termEvent;
    string lv_termUnit;
    string lv_unitIcon;
    string lv_send;
    string lv_actor;
    int lv_eventsTotal;
    int lv_actorsTotal;

    // Automatic Variable Declarations
    int autoCB7D77EF_ae;
    const int autoCB7D77EF_ai = 1;
    int auto9D4D7538_ae;
    const int auto9D4D7538_ai = 1;

    // Variable Initialization
    lv_term = "";
    lv_termEvent = "";
    lv_termUnit = "";
    lv_unitIcon = "";
    lv_send = "";
    lv_actorsTotal = CatalogEntryCount(c_gameCatalogActor);

    // Implementation
    autoCB7D77EF_ae = lv_actorsTotal;
    lv_i = 1;
    for ( ; ( (autoCB7D77EF_ai >= 0 && lv_i <= autoCB7D77EF_ae) || (autoCB7D77EF_ai < 0 && lv_i >= autoCB7D77EF_ae) ) ; lv_i += autoCB7D77EF_ai ) {
        lv_actor = CatalogEntryGet(c_gameCatalogActor, lv_i);
        if (((CatalogEntryClass(c_gameCatalogActor, lv_actor) == 122) || (CatalogEntryClass(c_gameCatalogActor, lv_actor) == 124))) {
            lv_unitIcon = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", c_playerAny);
            if ((lv_unitIcon == "")) {
                continue;
            }
            lv_eventsTotal = (CatalogFieldValueCount(c_gameCatalogActor, lv_actor, "On", c_playerAny) - 1);
            auto9D4D7538_ae = lv_eventsTotal;
            lv_j = 0;
            for ( ; ( (auto9D4D7538_ai >= 0 && lv_j <= auto9D4D7538_ae) || (auto9D4D7538_ai < 0 && lv_j >= auto9D4D7538_ae) ) ; lv_j += auto9D4D7538_ai ) {
                lv_send = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Send", c_playerAny);
                lv_term = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "On[" + IntToString(lv_j) + "].Terms", c_playerAny);
                if ((lv_send == "Create") && (StringFind(lv_term, "UnitBirth", c_stringCase) == 1)) {
                    lv_termUnit = StringSub(lv_term, 11, StringLength(lv_term));
                    if ((StringFind(lv_termUnit, "#", c_stringCase) != 0)) {
                        lib1_gf_MapStringSet("^UnitActors", lv_termUnit, (lv_actor));
                    }
                }
            }
        }
    }
}

string lib1_gf_GetFactionImage (string lp_faction) {
    // Automatic Variable Declarations
    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogRace, lp_faction, "Icon", c_playerAny));
}

text lib1_gf_GetFactionTooltip (string lp_faction) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_E9292990", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogRace, lp_faction, "Name", c_playerAny)));
    return TextExpressionAssemble("Param/Expression/lib_1_E9292990");
}

void lib1_gf_ShowUnitTesterTips () {
    // Automatic Variable Declarations
    // Implementation
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_CF4624F1"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_48B1E00A"), StringExternal("Param/Value/lib_1_0D6CE665"), "Assets\\Textures\\btn-tips-laserdrillantiair.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_20B9A843"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_84A75D43"), StringExternal("Param/Value/lib_1_D69DECB5"), "Assets\\Textures\\btn-tips-hacking.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_9B106371"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_3EC8B6C9"), StringExternal("Param/Value/lib_1_8DC60159"), "Assets\\Textures\\btn-tips-starmap.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_03B1161E"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_E6424086"), StringExternal("Param/Value/lib_1_D7E8E323"), "Assets\\Textures\\btn-building-terran-bunker.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_799545B6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_F9E7DCA3"), StringExternal("Param/Value/lib_1_4ED4505D"), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel1.dds");
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/lib_1_21962E88"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/lib_1_D96F7499"), StringExternal("Param/Value/lib_1_690EB27F"), "Assets\\Textures\\btn-unit-terran-marine.dds");
}

void lib1_gf_MakeUnitTesterFactionsList () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_bottom_panel;
    int lv_buttons_panel;
    string lv_factionString;

    // Automatic Variable Declarations
    int auto199BE81D_ae;
    const int auto199BE81D_ai = 1;

    // Variable Initialization
    lv_bottom_panel = c_invalidDialogControlId;
    lv_buttons_panel = c_invalidDialogControlId;
    lv_factionString = "";

    // Implementation
    lv_x = 0;
    lv_y = 0;
    lv_buttons_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TesterPanel/RaceList"));
    libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 99, PlayerGroupAll());
    auto199BE81D_ae = lib1_gf_ListSize(lib1_gv_factions);
    lv_j = 1;
    for ( ; ( (auto199BE81D_ai >= 0 && lv_j <= auto199BE81D_ae) || (auto199BE81D_ai < 0 && lv_j >= auto199BE81D_ae) ) ; lv_j += auto199BE81D_ai ) {
        lv_factionString = lib1_gf_ListStringGet(lib1_gv_factions, lv_j);
        DialogControlCreateInPanelFromTemplate(lv_buttons_panel, c_triggerControlTypeButton, "Tester/TesterRaceButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (68 + (lv_x * 54)), (22 + (lv_y * 54)));
        lib1_gv_creator_racebutton[lv_j] = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "FaceImage");
        lib1_gv_creator_raceface[lv_j] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemImage(lib1_gv_creator_raceface[lv_j], lib1_gf_GetFactionImage(lv_factionString), PlayerGroupAll());
        DialogControlSetVisible(lib1_gv_creator_raceface[lv_j], PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_racebutton[lv_j], lib1_gf_GetFactionTooltip(lv_factionString), PlayerGroupAll());
        lv_x += 1;
        if ((lv_x == 32)) {
            lv_x = 0;
            lv_y += 1;
        }

    }
}

void lib1_gf_ActivateBuildAbility () {
    // Automatic Variable Declarations
}

void lib1_gf_MakeUnitTesterPlacementCard () {
    // Variable Declarations
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_buttons_panel;
    string lv_factionString;

    // Automatic Variable Declarations
    const int auto9D114D02_ae = 2;
    const int auto9D114D02_ai = 1;
    int autoB3767A88_ae;
    const int autoB3767A88_ai = 1;

    // Variable Initialization
    lv_buttons_panel = c_invalidDialogControlId;
    lv_factionString = "";

    // Implementation
    lv_i = 0;
    for ( ; ( (auto9D114D02_ai >= 0 && lv_i <= auto9D114D02_ae) || (auto9D114D02_ai < 0 && lv_i >= auto9D114D02_ae) ) ; lv_i += auto9D114D02_ai ) {
        lv_x = 0;
        lv_y = 0;
        lv_buttons_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, ("UIContainer/FullscreenUpperContainer/TesterPanel/CreatorPanel/ItemCard" + IntToString(lv_i)));
        DialogControlSetVisible(lv_buttons_panel, PlayerGroupAll(), true);
        autoB3767A88_ae = ((lib1_gv_placementCardRows * lib1_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (autoB3767A88_ai >= 0 && lv_j <= autoB3767A88_ae) || (autoB3767A88_ai < 0 && lv_j >= autoB3767A88_ae) ) ; lv_j += autoB3767A88_ai ) {
            DialogControlCreateInPanelFromTemplate(lv_buttons_panel, c_triggerControlTypeButton, "Tester/TesterItemButton");
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, (lv_x * 77), (lv_y * 77));
            lib1_gv_creator_itembutton[lv_i][lv_j] = DialogControlLastCreated();
            DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "FaceImage");
            lib1_gv_creator_itemface[lv_i][lv_j] = DialogControlLastCreated();
            lv_x += 1;
            if ((lv_x == lib1_gv_placementCardColumns)) {
                lv_x = 0;
                lv_y += 1;
            }

        }
        DialogControlHookup(lv_buttons_panel, c_triggerControlTypeButton, "Bottom");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 199, PlayerGroupAll());
        lib1_gv_creator_bottomButton[lv_i] = DialogControlLastCreated();
        DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], PlayerGroupAll(), true);
        DialogControlHookup(lv_buttons_panel, c_triggerControlTypeButton, "Top");
        libNtve_gf_SetDialogItemRenderPriority(DialogControlLastCreated(), 199, PlayerGroupAll());
        lib1_gv_creator_upButton[lv_i] = DialogControlLastCreated();
        DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], PlayerGroupAll(), true);
    }
}

void lib1_gf_RenderUnitTesterPlacementCard (int lp_player) {
    // Variable Declarations
    int lv_min;
    int lv_max;
    int lv_x;
    int lv_y;
    int lv_i;
    int lv_j;
    int lv_b;
    string lv_unit;
    string lv_actor;
    string lv_upgrade;
    abilcmd lv_command;
    string lv_button;
    string lv_faction;
    string lv_imageFileString;
    string lv_airesultunits;
    string lv_airesultstructures;
    string lv_airesultupgrades;
    playergroup lv_players;

    // Automatic Variable Declarations
    const int autoE452D208_ae = 2;
    const int autoE452D208_ai = 1;
    int auto636FC8C4_ae;
    const int auto636FC8C4_ai = 1;
    int auto927CB599_ae;
    const int auto927CB599_ai = 1;
    int auto18653102_ae;
    const int auto18653102_ai = 1;
    int auto1F1C5D3A_ae;
    const int auto1F1C5D3A_ai = 1;

    // Variable Initialization
    lv_actor = "";
    lv_faction = lib1_gv_creator_selectedRace[lp_player];
    lv_imageFileString = "";
    lv_airesultunits = ("^AI" + lv_faction + "TableUnits");
    lv_airesultstructures = ("^AI" + lv_faction + "TableStructures");
    lv_airesultupgrades = ("^AI" + lv_faction + "TableUpgrades");
    lv_players = PlayerGroupSingle(lp_player);

    // Implementation
    lv_i = 0;
    for ( ; ( (autoE452D208_ai >= 0 && lv_i <= autoE452D208_ae) || (autoE452D208_ai < 0 && lv_i >= autoE452D208_ae) ) ; lv_i += autoE452D208_ai ) {
        auto636FC8C4_ae = ((lib1_gv_placementCardRows * lib1_gv_placementCardColumns) - 1);
        lv_j = 0;
        for ( ; ( (auto636FC8C4_ai >= 0 && lv_j <= auto636FC8C4_ae) || (auto636FC8C4_ai < 0 && lv_j >= auto636FC8C4_ae) ) ; lv_j += auto636FC8C4_ai ) {
            DialogControlSetEnabled(lib1_gv_creator_itembutton[lv_i][lv_j], lv_players, false);
            libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_itembutton[lv_i][lv_j], StringToText(""), lv_players);
            DialogControlSetVisible(lib1_gv_creator_itemface[lv_i][lv_j], lv_players, false);
        }
    }
    lv_i = 0;
    lv_min = (1 + (lib1_gv_placementCardOffset[0] * lib1_gv_placementCardColumns));
    lv_max = MinI(lib1_gf_ListSize(lv_airesultunits), ((lv_min - 1) + (lib1_gv_placementCardColumns * lib1_gv_placementCardRows)));
    auto927CB599_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (auto927CB599_ai >= 0 && lv_j <= auto927CB599_ae) || (auto927CB599_ai < 0 && lv_j >= auto927CB599_ae) ) ; lv_j += auto927CB599_ai ) {
        lv_b = (lv_j - lv_min);
        lv_unit = (lib1_gf_ListStringGet(lv_airesultunits, lv_j));
        lv_actor = lib1_gf_MapStringGet("^UnitActors", (lv_unit));
        lib1_gv_creator_itemunit[lv_i][lv_b] = (lv_unit);
        DialogControlSetEnabled(lib1_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        DialogControlSetEnabled(lib1_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "min_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostMinerals)));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "gas_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostVespene)));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "food_icon", StringExternal("UI/Icon22_Supply_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "food_val", FixedToTextAdvanced(UnitTypeGetProperty(lv_unit, c_unitPropSuppliesUsed), c_formatNumberStyleNormal, true, 0, 1));
        TextExpressionSetToken("Param/Expression/lib_1_12A21D1A", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Description", c_playerAny)));
        libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_1_12A21D1A"), lv_players);
        if ((lv_actor != "") && (CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
            lv_imageFileString = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", lp_player);
        }
        else {
            lv_imageFileString = "";
        }
        if ((lv_imageFileString != "")) {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], (lv_imageFileString), lv_players);
        }
        else {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], "Assets\\Textures\\btn-missing-kaeo.dds", lv_players);
        }
        DialogControlSetVisible(lib1_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        if ((lv_min > 1)) {
            DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, false);
        }
        if ((lv_max < lib1_gf_ListSize(lv_airesultunits))) {
            DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, false);
        }
    }
    lv_i = 1;
    lv_min = (1 + (lib1_gv_placementCardOffset[1] * lib1_gv_placementCardColumns));
    lv_max = MinI(lib1_gf_ListSize(lv_airesultstructures), ((lv_min - 1) + (lib1_gv_placementCardColumns * lib1_gv_placementCardRows)));
    auto18653102_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (auto18653102_ai >= 0 && lv_j <= auto18653102_ae) || (auto18653102_ai < 0 && lv_j >= auto18653102_ae) ) ; lv_j += auto18653102_ai ) {
        lv_b = (lv_j - lv_min);
        lv_unit = (lib1_gf_ListStringGet(lv_airesultstructures, lv_j));
        lv_actor = lib1_gf_MapStringGet("^UnitActors", (lv_unit));
        lib1_gv_creator_itemunit[lv_i][lv_b] = (lv_unit);
        DialogControlSetEnabled(lib1_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        DialogControlSetEnabled(lib1_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "min_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostMinerals)));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "gas_val", IntToText(UnitTypeGetCost(lv_unit, c_unitCostVespene)));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "food_icon", StringExternal("UI/Icon22_Supply_Terr"));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "food_val", FixedToTextAdvanced(UnitTypeGetProperty(lv_unit, c_unitPropSuppliesUsed), c_formatNumberStyleNormal, true, 0, 1));
        TextExpressionSetToken("Param/Expression/lib_1_5F203DED", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, lv_unit, "Description", c_playerAny)));
        libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_1_5F203DED"), lv_players);
        if ((lv_actor != "") && (CatalogEntryIsValid(c_gameCatalogActor, lv_actor) == true)) {
            lv_imageFileString = CatalogFieldValueGet(c_gameCatalogActor, lv_actor, "UnitIcon", lp_player);
        }
        else {
            lv_imageFileString = "";
        }
        if ((lv_imageFileString != "")) {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], (lv_imageFileString), lv_players);
        }
        else {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], "Assets\\Textures\\btn-missing-kaeo.dds", lv_players);
        }
        DialogControlSetVisible(lib1_gv_creator_itemface[lv_i][lv_b], lv_players, true);
        if ((lv_min > 1)) {
            DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, false);
        }
        if ((lv_max < lib1_gf_ListSize(lv_airesultstructures))) {
            DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, true);
        }
        else {
            DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, false);
        }
    }
    lv_i = 2;
    lv_min = (1 + (lib1_gv_placementCardOffset[2] * lib1_gv_placementCardColumns));
    lv_max = MinI(lib1_gf_ListSize(lv_airesultupgrades), ((lv_min - 1) + (lib1_gv_placementCardColumns * lib1_gv_placementCardRows)));
    if ((lv_min > 1)) {
        DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, true);
    }
    else {
        DialogControlSetVisible(lib1_gv_creator_upButton[lv_i], lv_players, false);
    }
    if ((lv_max < lib1_gf_ListSize(lv_airesultupgrades))) {
        DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, true);
    }
    else {
        DialogControlSetVisible(lib1_gv_creator_bottomButton[lv_i], lv_players, false);
    }
    auto1F1C5D3A_ae = lv_max;
    lv_j = lv_min;
    for ( ; ( (auto1F1C5D3A_ai >= 0 && lv_j <= auto1F1C5D3A_ae) || (auto1F1C5D3A_ai < 0 && lv_j >= auto1F1C5D3A_ae) ) ; lv_j += auto1F1C5D3A_ai ) {
        lv_b = (lv_j - lv_min);
        lv_upgrade = (lib1_gf_ListStringGet(lv_airesultupgrades, lv_j));
        lv_command = TechTreeUpgradeProducedAbilCmd(lv_upgrade, 0);
        lib1_gv_creator_itemunit[lv_i][lv_b] = (lv_upgrade);
        if ((lv_command != null)) {
            lv_button = (CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Button.DefaultButtonFace", lp_player));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Name", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "min_icon", StringExternal("UI/Icon22_Minerals_Terr"));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "min_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(0) + "]", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "gas_icon", StringExternal("UI/Icon22_Vespene_Terr"));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "gas_val", IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, AbilityCommandGetAbility(lv_command), "InfoArray[" + IntToString(AbilityCommandGetCommand(lv_command)) + "].Resource[" + IntToString(1) + "]", c_playerAny)));
            TextExpressionSetToken("Param/Expression/lib_1_A89B73BA", "desc", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_button, "Tooltip", c_playerAny)));
            libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_1_A89B73BA"), lv_players);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_6B66786A", "name", StringExternal(CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Name", c_playerAny)));
            libNtve_gf_SetDialogItemTooltip(lib1_gv_creator_itembutton[lv_i][lv_b], TextExpressionAssemble("Param/Expression/lib_1_6B66786A"), lv_players);
        }
        DialogControlSetEnabled(lib1_gv_creator_itembutton[lv_i][lv_b], lv_players, true);
        if ((lv_upgrade != null) && (CatalogEntryIsValid(c_gameCatalogUpgrade, lv_upgrade) == true)) {
            lv_imageFileString = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgrade, "Icon", c_playerAny);
        }
        else {
            lv_imageFileString = "";
        }
        if ((lv_imageFileString != "")) {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], (lv_imageFileString), lv_players);
        }
        else {
            libNtve_gf_SetDialogItemImage(lib1_gv_creator_itemface[lv_i][lv_b], "Assets\\Textures\\btn-missing-kaeo.dds", lv_players);
        }
        if ((TechTreeUpgradeCount(lib1_gv_side_player[lib1_gv_chosenSide[lp_player]], lv_upgrade, c_techCountCompleteOnly) > 0)) {
            DialogControlSetEnabled(lib1_gv_creator_itemface[lv_i][lv_b], PlayerGroupSingle(lp_player), true);
        }
        else {
            DialogControlSetEnabled(lib1_gv_creator_itemface[lv_i][lv_b], PlayerGroupSingle(lp_player), false);
        }
        DialogControlSetVisible(lib1_gv_creator_itemface[lv_i][lv_b], lv_players, true);
    }
}

bool lib1_gf_TesterLeaderboardValidUnitType (string lp_unitType) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitTypeTestFlag(lp_unitType, c_unitFlagInvulnerable) == true) || (UnitTypeTestFlag(lp_unitType, c_unitFlagMissile) == true))) {
        return false;
    }
    else {
        return true;
    }
}

void lib1_gf_TesterLeaderboardSpecialUnitCost (unit lp_unit, string lp_unitType, int lp_column, bool lp_deleteMode) {
    // Variable Declarations
    int lv_minerals_mod;
    string lv_ability;
    int lv_gas_mod;

    // Automatic Variable Declarations
    unit auto0B7DBD04_unit;
    int auto0B7DBD04_i;

    // Variable Initialization

    // Implementation
    auto0B7DBD04_unit = lp_unit;
    auto0B7DBD04_i = 1;
    for ( ; auto0B7DBD04_i <= UnitAbilityCount(auto0B7DBD04_unit) ; auto0B7DBD04_i += 1 ) {
        lv_ability = UnitAbilityGet(auto0B7DBD04_unit, auto0B7DBD04_i);
        if ((AbilityClass(lv_ability) == c_classIdCAbilArmMagazine)) {
            lv_minerals_mod = ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "MaxCount", c_playerAny)-CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].CountStart", c_playerAny))*UnitTypeGetCost((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].Unit", c_playerAny)), c_unitCostMinerals));
            lv_gas_mod = ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "MaxCount", c_playerAny)-CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].CountStart", c_playerAny))*UnitTypeGetCost((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "InfoArray[" + IntToString(0) + "].Unit", c_playerAny)), c_unitCostVespene));
            break;
        }
    }
    if ((lp_deleteMode == true)) {
        lv_minerals_mod *= -1;
        lv_gas_mod *= -1;
    }

    lib1_gv_leaderboard_minerals[lp_column] += lv_minerals_mod;
    lib1_gv_leaderboard_gas[lp_column] += lv_gas_mod;
}

void lib1_gf_TesterLeaderboardCreate () {
    // Variable Declarations
    int lv_main_background_image;
    int lv_header_background_image;
    int lv_col;
    int lv_row;

    // Automatic Variable Declarations
    const int auto5146CD95_ae = 2;
    const int auto5146CD95_ai = 1;
    const int autoA2528FAC_ae = 21;
    const int autoA2528FAC_ai = 1;

    // Variable Initialization
    lv_main_background_image = c_invalidDialogControlId;
    lv_header_background_image = c_invalidDialogControlId;

    // Implementation
    BoardDestroy(lib1_gv_leaderboard);
    lib1_gv_leaderboard_rows = 4;
    lib1_gv_leaderboard_minerals[1] = 0;
    lib1_gv_leaderboard_minerals[2] = 0;
    lib1_gv_leaderboard_gas[1] = 0;
    lib1_gv_leaderboard_gas[2] = 0;
    lv_col = 1;
    for ( ; ( (auto5146CD95_ai >= 0 && lv_col <= auto5146CD95_ae) || (auto5146CD95_ai < 0 && lv_col >= auto5146CD95_ae) ) ; lv_col += auto5146CD95_ai ) {
        lv_row = 5;
        for ( ; ( (autoA2528FAC_ai >= 0 && lv_row <= autoA2528FAC_ae) || (autoA2528FAC_ai < 0 && lv_row >= autoA2528FAC_ae) ) ; lv_row += autoA2528FAC_ai ) {
            lib1_gv_leaderboard_icon_flag[lv_col][lv_row] = false;
        }
    }
    BoardCreate(2, lib1_gv_leaderboard_rows, StringExternal("Param/Value/lib_1_AFD4776B"), Color(100.00, 100.00, 100.00));
    lib1_gv_leaderboard = BoardLastCreated();
    BoardItemSetAlignment(BoardLastCreated(), c_boardItemAll, c_boardItemAll, c_alignCenter);
    BoardItemSetText(BoardLastCreated(), 1, c_boardRowHeader, StringExternal("Param/Value/lib_1_023476AF"));
    BoardItemSetText(BoardLastCreated(), 2, c_boardRowHeader, StringExternal("Param/Value/lib_1_0B2DBA6E"));
    BoardSetColumnWidth(BoardLastCreated(), 1, c_boardWidthAuto);
    BoardSetColumnWidth(BoardLastCreated(), 2, c_boardWidthAuto);
    BoardItemSetText(BoardLastCreated(), 1, 1, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 1, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 1, Color(0.00, 100.00, 100.00));
    BoardItemSetText(BoardLastCreated(), 1, 2, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 2, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetTextColor(BoardLastCreated(), 2, 2, Color(0.00, 100.00, 25.10));
    BoardItemSetText(BoardLastCreated(), 1, 3, StringToText("0"));
    BoardItemSetText(BoardLastCreated(), 2, 3, StringToText("0"));
    BoardItemSetTextColor(BoardLastCreated(), 1, 3, Color(100.00, 50.20, 0.00));
    BoardItemSetTextColor(BoardLastCreated(), 2, 3, Color(100.00, 50.20, 0.00));
}

int lib1_gf_TesterLeaderboardAddRow (string lp_unitName) {
    // Automatic Variable Declarations
    // Implementation
    if ((lib1_gv_leaderboard_rows < 21)) {
        lib1_gv_leaderboard_rows += 1;
        BoardSetRowCount(lib1_gv_leaderboard, lib1_gv_leaderboard_rows);
    }

    DataTableSetInt(true, lp_unitName, lib1_gv_leaderboard_rows);
    return lib1_gv_leaderboard_rows;
}

string lib1_gf_TesterLeaderboardStructureUnitTypeToIcon (string lp_unitType) {
    // Variable Declarations
    string lv_unit_type_string_words;
    string lv_unit_type_string_word;
    string lv_unit_type_stringword;
    string lv_race_string;

    // Automatic Variable Declarations
    string autoFA49E808_val;

    // Variable Initialization
    lv_unit_type_string_words = "";
    lv_unit_type_string_word = "";
    lv_unit_type_stringword = "";
    lv_race_string = "";

    // Implementation
    lv_unit_type_string_words = (lp_unitType);
    lv_unit_type_string_word = StringReplaceWord(lv_unit_type_string_words, " ", "", c_stringReplaceAll, c_stringCase);
    lv_unit_type_stringword = StringCase(lv_unit_type_string_word, false);
    lv_race_string = CatalogFieldValueGet(c_gameCatalogUnit, lv_unit_type_string_words, "Race", c_playerAny);
    autoFA49E808_val = lv_race_string;
    if (autoFA49E808_val == "Prot") {
        lv_race_string = "protoss";
    }
    else if (autoFA49E808_val == "Terr") {
        lv_race_string = "terran";
    }
    else if (autoFA49E808_val == "Zerg") {
        lv_race_string = "zerg";
    }
    else if (autoFA49E808_val == "Keir") {
        lv_race_string = "keiron";
    }
    else if (autoFA49E808_val == "Gen") {
        lv_race_string = "genetron";
    }
    else if (autoFA49E808_val == "Xayi") {
        lv_race_string = "xayid";
    }
    else {
    }
    return "Assets\\Textures\\btn-building-" + lv_race_string + "-" + lv_unit_type_stringword + ".dds";
}

trigger auto_lib1_gf_TesterLeaderboardAddIcon_Trigger = null;
string auto_lib1_gf_TesterLeaderboardAddIcon_lp_unitType;
int auto_lib1_gf_TesterLeaderboardAddIcon_lp_column;
int auto_lib1_gf_TesterLeaderboardAddIcon_lp_row;

void lib1_gf_TesterLeaderboardAddIcon (string lp_unitType, int lp_column, int lp_row) {
    auto_lib1_gf_TesterLeaderboardAddIcon_lp_unitType = lp_unitType;
    auto_lib1_gf_TesterLeaderboardAddIcon_lp_column = lp_column;
    auto_lib1_gf_TesterLeaderboardAddIcon_lp_row = lp_row;

    if (auto_lib1_gf_TesterLeaderboardAddIcon_Trigger == null) {
        auto_lib1_gf_TesterLeaderboardAddIcon_Trigger = TriggerCreate("auto_lib1_gf_TesterLeaderboardAddIcon_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_TesterLeaderboardAddIcon_Trigger, false, false);
}

bool auto_lib1_gf_TesterLeaderboardAddIcon_TriggerFunc (bool testConds, bool runActions) {
    string lp_unitType = auto_lib1_gf_TesterLeaderboardAddIcon_lp_unitType;
    int lp_column = auto_lib1_gf_TesterLeaderboardAddIcon_lp_column;
    int lp_row = auto_lib1_gf_TesterLeaderboardAddIcon_lp_row;

    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((UnitTypeTestAttribute(lp_unitType, c_unitAttributeStructure) == false)) {
        BoardItemSetIcon(lib1_gv_leaderboard, lp_column, lp_row, (CatalogFieldValueGet(c_gameCatalogActor, ((lp_unitType)), "UnitIcon", c_playerAny)), true);
        lib1_gv_leaderboard_icon_flag[lp_column][lp_row] = true;
    }
    else {
        BoardItemSetIcon(lib1_gv_leaderboard, lp_column, lp_row, lib1_gf_TesterLeaderboardStructureUnitTypeToIcon(lp_unitType), true);
        lib1_gv_leaderboard_icon_flag[lp_column][lp_row] = true;
    }
    return true;
}

void lib1_gf_AddTerrainData (string lp_regionString) {
    // Variable Declarations
    int lv_item_index;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    while ((lib1_gv_data_terrain[lv_item_index].lv_region != null)) {
        lv_item_index += 1;
    }
    lib1_gv_data_terrain[lv_item_index].lv_region = RegionFromName(lp_regionString);
    lib1_gv_data_terrain[lv_item_index].lv_spawnPoints[0] = PointFromName((lp_regionString + "spawn0"));
    lib1_gv_data_terrain[lv_item_index].lv_spawnPoints[1] = PointFromName((lp_regionString + "spawn1"));
    lib1_gv_data_terrain[lv_item_index].lv_spawnPoints[2] = PointFromName((lp_regionString + "spawn2"));
}

void lib1_gf_LoadTerrainData (structref<lib1_gs_DATA_TERRAIN> lp_dataTerrain) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    unitgroup autoB8E2DB70_g;
    int autoB8E2DB70_u;
    unit autoB8E2DB70_var;
    unitgroup auto754F8F68_g;
    int auto754F8F68_u;
    unit auto754F8F68_var;

    // Variable Initialization

    // Implementation
    lib1_gv_terrain.lv_region = lp_dataTerrain.lv_region;
    lib1_gv_terrain.lv_spawnPoints[0] = lp_dataTerrain.lv_spawnPoints[0];
    lib1_gv_terrain.lv_spawnPoints[1] = lp_dataTerrain.lv_spawnPoints[1];
    lib1_gv_terrain.lv_spawnPoints[2] = lp_dataTerrain.lv_spawnPoints[2];
    CameraSetBounds(PlayerGroupActive(), lib1_gv_terrain.lv_region, true);
    lib1_gf_MovePlayerCameras();
    lib1_gf_RestoreMapStructures();
    autoB8E2DB70_g = UnitGroup(null, lib1_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoB8E2DB70_u = UnitGroupCount(autoB8E2DB70_g, c_unitCountAll);
    for (;; autoB8E2DB70_u -= 1) {
        autoB8E2DB70_var = UnitGroupUnitFromEnd(autoB8E2DB70_g, autoB8E2DB70_u);
        if (autoB8E2DB70_var == null) { break; }
        UnitSetPosition(autoB8E2DB70_var, lib1_gv_terrain.lv_spawnPoints[0], false);
    }
    auto754F8F68_g = UnitGroup(null, lib1_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto754F8F68_u = UnitGroupCount(auto754F8F68_g, c_unitCountAll);
    for (;; auto754F8F68_u -= 1) {
        auto754F8F68_var = UnitGroupUnitFromEnd(auto754F8F68_g, auto754F8F68_u);
        if (auto754F8F68_var == null) { break; }
        UnitSetPosition(auto754F8F68_var, lib1_gv_terrain.lv_spawnPoints[1], false);
    }
}

void lib1_gf_PrepareUnitTesterTerrains () {
    // Automatic Variable Declarations
    int auto7B4030CD_ae;
    int auto7B4030CD_var;

    // Implementation
    lib1_gf_AddTerrainData("terr0");
    lib1_gf_AddTerrainData("terr1");
    lib1_gf_AddTerrainData("terr2");
    lib1_gf_AddTerrainData("terr3");
    lib1_gf_AddTerrainData("terr4");
    lib1_gf_AddTerrainData("terr5");
    lib1_gf_AddTerrainData("terr6");
    lib1_gf_AddTerrainData("terr8");
    lib1_gf_AddTerrainData("terr9");
    auto7B4030CD_ae = (lib1_gv_const_terrains - 1);
    auto7B4030CD_var = 0;
    for ( ; auto7B4030CD_var <= auto7B4030CD_ae; auto7B4030CD_var += 1 ) {
        lib1_gv_settings_terrainbutton[auto7B4030CD_var] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Terrain/Buttons/Terrain" + IntToString(auto7B4030CD_var)));
    }
}

void lib1_gf_AllresearchesONOFF (bool lp_on) {
    // Variable Declarations
    int lv_value;
    string lv_race;
    string lv_upgrade;
    string lv_airesultupgrades;

    // Automatic Variable Declarations
    int auto090945C0_ai;
    int auto090945C0_ae;
    int autoF528F12D_ai;
    int autoF528F12D_ae;

    // Variable Initialization
    lv_race = "";
    lv_upgrade = "";
    lv_airesultupgrades = "";

    // Implementation
    if ((lp_on == true)) {
        lv_value = 1;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D455DE84"));
    }
    else {
        lv_value = 0;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_20A0955A"));
    }
    auto090945C0_ai = 1;
    auto090945C0_ae = lib1_gf_ListSize(lib1_gv_factions);
    while (auto090945C0_ai <= auto090945C0_ae) {
        lv_race = lib1_gf_ListStringGet(lib1_gv_factions, auto090945C0_ai);
        auto090945C0_ai = auto090945C0_ai+1;
        autoF528F12D_ai = 1;
        autoF528F12D_ae = lib1_gf_ListSize(("^AI" + lv_race + "TableUpgrades"));
        while (autoF528F12D_ai <= autoF528F12D_ae) {
            lv_upgrade = lib1_gf_ListStringGet(("^AI" + lv_race + "TableUpgrades"), autoF528F12D_ai);
            autoF528F12D_ai = autoF528F12D_ai+1;
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_side_player[0], (lv_upgrade), lv_value);
            libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_side_player[1], (lv_upgrade), lv_value);
        }
    }
    lib1_gf_RenderTesterUIForAllPlayers();
}

void lib1_gf_SetLevelledUpgradesValue (int lp_player, int lp_level) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;

    // Automatic Variable Declarations
    const int autoB5C70189_ae = lib1_gv_const_races;
    const int autoB5C70189_ai = 1;
    const int auto28B5C78B_ae = lib1_gv_const_card_length;
    const int auto28B5C78B_ai = 1;

    // Variable Initialization

    // Implementation
    lv_ii = 0;
    for ( ; ( (autoB5C70189_ai >= 0 && lv_ii <= autoB5C70189_ae) || (autoB5C70189_ai < 0 && lv_ii >= autoB5C70189_ae) ) ; lv_ii += autoB5C70189_ai ) {
        lv_jj = 0;
        for ( ; ( (auto28B5C78B_ai >= 0 && lv_jj <= auto28B5C78B_ae) || (auto28B5C78B_ai < 0 && lv_jj >= auto28B5C78B_ae) ) ; lv_jj += auto28B5C78B_ai ) {
            if ((lib1_gv_data_upgrade[lv_ii][lv_jj].lv_levels > 0) && (lib1_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0] != null)) {
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[0], lp_level);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[1], lp_level);
                libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lib1_gv_data_upgrade[lv_ii][lv_jj].lv_upgrade[2], lp_level);
            }
        }
    }
}

bool lib1_gf_NoUnitsForSide (int lp_side) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupCount(UnitGroup(null, lib1_gv_side_player[lp_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive) == 0)) {
        return true;
    }
    else {
        return false;
    }
}

int lib1_gf_DialogItemFromLayoutHookup (int lp_type, string lp_name) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlHookupStandard(lp_type, lp_name);
    return DialogControlLastCreated();
}

void lib1_gf_CreatorAddUnits (int lp_player, int lp_side, string lp_unit) {
    // Automatic Variable Declarations
    const int auto17AC9838_ae = lib1_gv_const_players;
    int auto17AC9838_var;
    unitgroup auto6C5340AD_g;
    int auto6C5340AD_u;
    unit auto6C5340AD_var;

    // Implementation
    if ((lib1_gv_data_player[lp_player].lv_shift == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(5, lp_unit, 0, lib1_gv_side_player[lp_side], lib1_gv_terrain.lv_spawnPoints[lp_side]);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_unit, 0, lib1_gv_side_player[lp_side], lib1_gv_terrain.lv_spawnPoints[lp_side]);
    }
    auto17AC9838_var = 1;
    for ( ; auto17AC9838_var <= auto17AC9838_ae; auto17AC9838_var += 1 ) {
        UnitControlGroupAddUnits(auto17AC9838_var, (lp_side+1), UnitLastCreatedGroup());
    }
    auto6C5340AD_g = UnitLastCreatedGroup();
    auto6C5340AD_u = UnitGroupCount(auto6C5340AD_g, c_unitCountAll);
    for (;; auto6C5340AD_u -= 1) {
        auto6C5340AD_var = UnitGroupUnitFromEnd(auto6C5340AD_g, auto6C5340AD_u);
        if (auto6C5340AD_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(auto6C5340AD_var, true);
    }
}

void lib1_gf_CreatorAddUpgrade2 (int lp_side, string lp_dataUpgrade) {
    // Automatic Variable Declarations
    // Implementation
    if ((TechTreeUpgradeCount(lib1_gv_side_player[lp_side], lp_dataUpgrade, c_techCountCompleteOnly) == 1)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_side_player[lp_side], lp_dataUpgrade, 0);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(lib1_gv_side_player[lp_side], lp_dataUpgrade, 1);
    }
    lib1_gf_RenderTesterUIForAllPlayers();
}

void lib1_gf_DeleteAllTesterUnits () {
    // Variable Declarations
    int lv_index;
    bool lv_isBuilder;

    // Automatic Variable Declarations
    unitgroup auto689B9AB3_g;
    int auto689B9AB3_u;
    unit auto689B9AB3_var;
    const int autoB0AEBE15_ae = 1;
    const int autoB0AEBE15_ai = 1;
    const int auto93A95186_ae = lib1_gv_tMAXFACTIONS;
    int auto93A95186_var;

    // Variable Initialization

    // Implementation
    lib1_gf_RemoveNeutralStructures();
    auto689B9AB3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto689B9AB3_u = UnitGroupCount(auto689B9AB3_g, c_unitCountAll);
    for (;; auto689B9AB3_u -= 1) {
        auto689B9AB3_var = UnitGroupUnitFromEnd(auto689B9AB3_g, auto689B9AB3_u);
        if (auto689B9AB3_var == null) { break; }
        lv_isBuilder = false;
        lv_index = 0;
        for ( ; ( (autoB0AEBE15_ai >= 0 && lv_index <= autoB0AEBE15_ae) || (autoB0AEBE15_ai < 0 && lv_index >= autoB0AEBE15_ae) ) ; lv_index += autoB0AEBE15_ai ) {
            auto93A95186_var = 0;
            for ( ; auto93A95186_var <= auto93A95186_ae; auto93A95186_var += 1 ) {
                if (true) {
                    break;
                }

                if (true) {
                    lv_isBuilder = true;
                    break;
                }

            }
        }
        if ((lv_isBuilder == false)) {
            UnitRemove(auto689B9AB3_var);
        }

    }
}

trigger auto_lib1_gf_LoadTesterUnits_Trigger = null;
string auto_lib1_gf_LoadTesterUnits_lp_storageString;
int auto_lib1_gf_LoadTesterUnits_lp_owner;

void lib1_gf_LoadTesterUnits (string lp_storageString, int lp_owner) {
    auto_lib1_gf_LoadTesterUnits_lp_storageString = lp_storageString;
    auto_lib1_gf_LoadTesterUnits_lp_owner = lp_owner;

    if (auto_lib1_gf_LoadTesterUnits_Trigger == null) {
        auto_lib1_gf_LoadTesterUnits_Trigger = TriggerCreate("auto_lib1_gf_LoadTesterUnits_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_LoadTesterUnits_Trigger, false, false);
}

bool auto_lib1_gf_LoadTesterUnits_TriggerFunc (bool testConds, bool runActions) {
    string lp_storageString = auto_lib1_gf_LoadTesterUnits_lp_storageString;
    int lp_owner = auto_lib1_gf_LoadTesterUnits_lp_owner;

    // Variable Declarations
    string lv_unit_type;
    fixed lv_x;
    fixed lv_y;
    int lv_ii;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ii = 1;

    // Implementation
    while ((StringWord(lp_storageString, lv_ii) != null)) {
        lv_unit_type = UnitTypeFromString(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        lv_x = StringToFixed(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        lv_y = StringToFixed(StringWord(lp_storageString, lv_ii));
        lv_ii += 1;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unit_type, 0, lp_owner, Point(lv_x, lv_y));
    }
    return true;
}

trigger auto_lib1_gf_SaveTesterUnits_Trigger = null;

void lib1_gf_SaveTesterUnits () {
    if (auto_lib1_gf_SaveTesterUnits_Trigger == null) {
        auto_lib1_gf_SaveTesterUnits_Trigger = TriggerCreate("auto_lib1_gf_SaveTesterUnits_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_SaveTesterUnits_Trigger, false, false);
}

bool auto_lib1_gf_SaveTesterUnits_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_unit_type;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    unitgroup auto7ADE3C5A_g;
    int auto7ADE3C5A_u;
    unit auto7ADE3C5A_var;
    unitgroup auto355E2F07_g;
    int auto355E2F07_u;
    unit auto355E2F07_var;
    unitgroup autoFAF52CEF_g;
    int autoFAF52CEF_u;
    unit autoFAF52CEF_var;

    // Variable Initialization
    lv_string = "";
    lv_unit_type = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    auto7ADE3C5A_g = UnitGroup(null, lib1_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto7ADE3C5A_u = UnitGroupCount(auto7ADE3C5A_g, c_unitCountAll);
    for (;; auto7ADE3C5A_u -= 1) {
        auto7ADE3C5A_var = UnitGroupUnitFromEnd(auto7ADE3C5A_g, auto7ADE3C5A_u);
        if (auto7ADE3C5A_var == null) { break; }
        lv_unit_type = (UnitGetType(auto7ADE3C5A_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto7ADE3C5A_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto7ADE3C5A_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    lib1_gv_unit_storage[0] = lv_string;
    lv_string = "";
    auto355E2F07_g = UnitGroup(null, lib1_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto355E2F07_u = UnitGroupCount(auto355E2F07_g, c_unitCountAll);
    for (;; auto355E2F07_u -= 1) {
        auto355E2F07_var = UnitGroupUnitFromEnd(auto355E2F07_g, auto355E2F07_u);
        if (auto355E2F07_var == null) { break; }
        lv_unit_type = (UnitGetType(auto355E2F07_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto355E2F07_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto355E2F07_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    lib1_gv_unit_storage[1] = lv_string;
    lv_string = "";
    autoFAF52CEF_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoFAF52CEF_u = UnitGroupCount(autoFAF52CEF_g, c_unitCountAll);
    for (;; autoFAF52CEF_u -= 1) {
        autoFAF52CEF_var = UnitGroupUnitFromEnd(autoFAF52CEF_g, autoFAF52CEF_u);
        if (autoFAF52CEF_var == null) { break; }
        lv_unit_type = (UnitGetType(autoFAF52CEF_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(autoFAF52CEF_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(autoFAF52CEF_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unit_type + " " + lv_x + " " + lv_y + " ");
    }
    lib1_gv_unit_storage[2] = lv_string;
    return true;
}

void lib1_gf_ResetTesterUnits () {
    // Automatic Variable Declarations
    const int autoAB90A348_ae = lib1_gv_const_players;
    int autoAB90A348_var;
    unitgroup auto7C3A60CB_g;
    int auto7C3A60CB_u;
    unit auto7C3A60CB_var;
    unitgroup autoD0380DA9_g;
    int autoD0380DA9_u;
    unit autoD0380DA9_var;
    int auto6F110194_ae;
    int auto6F110194_var;

    // Implementation
    lib1_gf_DeleteAllTesterUnits();
    lib1_gf_LoadTesterUnits(lib1_gv_unit_storage[0], lib1_gv_side_player[0]);
    lib1_gf_LoadTesterUnits(lib1_gv_unit_storage[1], lib1_gv_side_player[1]);
    lib1_gf_LoadTesterUnits(lib1_gv_unit_storage[2], 0);
    autoAB90A348_var = 1;
    for ( ; autoAB90A348_var <= autoAB90A348_ae; autoAB90A348_var += 1 ) {
        UnitControlGroupAddUnits(autoAB90A348_var, 1, UnitGroup(null, lib1_gv_side_player[0], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
        UnitControlGroupAddUnits(autoAB90A348_var, 2, UnitGroup(null, lib1_gv_side_player[1], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    }
    if ((lib1_gv_attack_mode == false)) {
        auto7C3A60CB_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        auto7C3A60CB_u = UnitGroupCount(auto7C3A60CB_g, c_unitCountAll);
        for (;; auto7C3A60CB_u -= 1) {
            auto7C3A60CB_var = UnitGroupUnitFromEnd(auto7C3A60CB_g, auto7C3A60CB_u);
            if (auto7C3A60CB_var == null) { break; }
            libNtve_gf_MakeUnitUncommandable(auto7C3A60CB_var, true);
        }
    }

    autoD0380DA9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoD0380DA9_u = UnitGroupCount(autoD0380DA9_g, c_unitCountAll);
    for (;; autoD0380DA9_u -= 1) {
        autoD0380DA9_var = UnitGroupUnitFromEnd(autoD0380DA9_g, autoD0380DA9_u);
        if (autoD0380DA9_var == null) { break; }
        UnitSetPropertyFixed(autoD0380DA9_var, c_unitPropEnergyPercent, 100.0);
        auto6F110194_ae = UnitAbilityCount(autoD0380DA9_var);
        auto6F110194_var = 0;
        for ( ; auto6F110194_var <= auto6F110194_ae; auto6F110194_var += 1 ) {
            if ((libNtve_gf_AbilityMatchesFilters(UnitAbilityGet(autoD0380DA9_var, auto6F110194_var), UnitGetOwner(autoD0380DA9_var), c_classIdCAbilArmMagazine, "") == true)) {
                UnitSetProgressStage(autoD0380DA9_var, 1, c_unitProgressStageCancel);
                UnitMagazineArm(autoD0380DA9_var, AbilityCommand(UnitAbilityGet(autoD0380DA9_var, auto6F110194_var), 0), (CatalogFieldValueGetAsInt(c_gameCatalogAbil, UnitAbilityGet(autoD0380DA9_var, auto6F110194_var), "MaxCount", UnitGetOwner(autoD0380DA9_var))-CatalogFieldValueGetAsInt(c_gameCatalogAbil, UnitAbilityGet(autoD0380DA9_var, auto6F110194_var), "InfoArray[" + IntToString(0) + "].CountStart", UnitGetOwner(autoD0380DA9_var))));
            }

        }
    }
    lib1_gf_MovePlayerCameras();
    TimerRestart(lib1_gv_test_timer);
}

void lib1_gf_MirrorTesterUnitsByPlayer (int lp_player) {
    // Variable Declarations
    int lv_this_side;
    int lv_other_side;

    // Automatic Variable Declarations
    unitgroup auto7E218223_g;
    int auto7E218223_u;
    unit auto7E218223_var;
    unitgroup auto2C316677_g;
    int auto2C316677_u;
    unit auto2C316677_var;
    const int auto5CB158B7_ae = lib1_gv_const_players;
    int auto5CB158B7_var;

    // Variable Initialization
    lv_this_side = lib1_gv_data_player[lp_player].lv_creator_side;

    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_201C2075"));
    if ((lv_this_side == 0)) {
        lv_other_side = 1;
    }
    else {
        lv_other_side = 0;
    }
    auto7E218223_g = UnitGroup(null, lib1_gv_side_player[lv_other_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto7E218223_u = UnitGroupCount(auto7E218223_g, c_unitCountAll);
    for (;; auto7E218223_u -= 1) {
        auto7E218223_var = UnitGroupUnitFromEnd(auto7E218223_g, auto7E218223_u);
        if (auto7E218223_var == null) { break; }
        libNtve_gf_ShowHideUnit(auto7E218223_var, false);
        UnitKill(auto7E218223_var);
    }
    Wait(0.0625, c_timeGame);
    auto2C316677_g = UnitGroup(null, lib1_gv_side_player[lv_this_side], RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto2C316677_u = UnitGroupCount(auto2C316677_g, c_unitCountAll);
    for (;; auto2C316677_u -= 1) {
        auto2C316677_var = UnitGroupUnitFromEnd(auto2C316677_g, auto2C316677_u);
        if (auto2C316677_var == null) { break; }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, UnitGetType(auto2C316677_var), 0, lib1_gv_side_player[lv_other_side], lib1_gv_terrain.lv_spawnPoints[lv_other_side]);
        libNtve_gf_MakeUnitUncommandable(UnitLastCreated(), true);
        auto5CB158B7_var = 1;
        for ( ; auto5CB158B7_var <= auto5CB158B7_ae; auto5CB158B7_var += 1 ) {
            UnitControlGroupAddUnit(auto5CB158B7_var, (lv_other_side+1), UnitLastCreated());
        }
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
}

trigger auto_lib1_gf_RemoveNeutralStructures_Trigger = null;

void lib1_gf_RemoveNeutralStructures () {
    if (auto_lib1_gf_RemoveNeutralStructures_Trigger == null) {
        auto_lib1_gf_RemoveNeutralStructures_Trigger = TriggerCreate("auto_lib1_gf_RemoveNeutralStructures_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_RemoveNeutralStructures_Trigger, false, false);
}

bool auto_lib1_gf_RemoveNeutralStructures_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF7D4F347_g;
    int autoF7D4F347_u;
    unit autoF7D4F347_var;

    // Implementation
    autoF7D4F347_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    autoF7D4F347_u = UnitGroupCount(autoF7D4F347_g, c_unitCountAll);
    for (;; autoF7D4F347_u -= 1) {
        autoF7D4F347_var = UnitGroupUnitFromEnd(autoF7D4F347_g, autoF7D4F347_u);
        if (autoF7D4F347_var == null) { break; }
        UnitRemove(autoF7D4F347_var);
    }
    return true;
}

trigger auto_lib1_gf_SaveMapStructures_Trigger = null;

void lib1_gf_SaveMapStructures () {
    if (auto_lib1_gf_SaveMapStructures_Trigger == null) {
        auto_lib1_gf_SaveMapStructures_Trigger = TriggerCreate("auto_lib1_gf_SaveMapStructures_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_SaveMapStructures_Trigger, false, false);
}

bool auto_lib1_gf_SaveMapStructures_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_string;
    string lv_unittype;
    string lv_x;
    string lv_y;

    // Automatic Variable Declarations
    unitgroup auto390EE73A_g;
    int auto390EE73A_u;
    unit auto390EE73A_var;

    // Variable Initialization
    lv_string = "";
    lv_unittype = "";
    lv_x = "";
    lv_y = "";

    // Implementation
    auto390EE73A_g = UnitGroup(null, 0, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
    auto390EE73A_u = UnitGroupCount(auto390EE73A_g, c_unitCountAll);
    for (;; auto390EE73A_u -= 1) {
        auto390EE73A_var = UnitGroupUnitFromEnd(auto390EE73A_g, auto390EE73A_u);
        if (auto390EE73A_var == null) { break; }
        lv_unittype = (UnitGetType(auto390EE73A_var));
        lv_x = FixedToString(PointGetX(UnitGetPosition(auto390EE73A_var)), c_fixedPrecisionAny);
        lv_y = FixedToString(PointGetY(UnitGetPosition(auto390EE73A_var)), c_fixedPrecisionAny);
        lv_string = (lv_string + lv_unittype + " " + lv_x + " " + lv_y + " ");
    }
    lib1_gv_map_structure_storage = lv_string;
    return true;
}

void lib1_gf_RestoreMapStructures () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_RemoveNeutralStructures();
    lib1_gf_LoadTesterUnits(lib1_gv_map_structure_storage, 0);
}

void lib1_gf_MovePlayerCameras () {
    // Automatic Variable Declarations
    playergroup autoA6FC5FBF_g;
    int autoA6FC5FBF_var;

    // Implementation
    autoA6FC5FBF_g = PlayerGroupActive();
    autoA6FC5FBF_var = -1;
    while (true) {
        autoA6FC5FBF_var = PlayerGroupNextPlayer(autoA6FC5FBF_g, autoA6FC5FBF_var);
        if (autoA6FC5FBF_var < 0) { break; }
        CameraPan(autoA6FC5FBF_var, MidPoint(lib1_gv_terrain.lv_spawnPoints[0], lib1_gv_terrain.lv_spawnPoints[1]), 1.0, -1, 10, false);
    }
}

void lib1_gf_ShowGameInterface () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, true);
}

void lib1_gf_HideGameInterface () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeConsolePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeCommandPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
}

void lib1_gf_ShowUnitTesterCommonInterface () {
    // Automatic Variable Declarations
    const int autoC78E2CE7_ae = lib1_gv_const_players;
    int autoC78E2CE7_var;

    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    lib1_gv_tester_menu = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu");
    lib1_gv_tester_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel");
    lib1_gv_menu_mode_settings = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/Modes/Settings");
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_menu_mode_settings, 99, PlayerGroupAll());
    lib1_gv_menu_mode_creator = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/Modes/Creator");
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_menu_mode_creator, 99, PlayerGroupAll());
    lib1_gv_menu_creator_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu");
    lib1_gv_menu_creator_mirror = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu/Mirror");
    lib1_gv_menu_creator_clear = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/CreatorMenu/Clear");
    lib1_gv_menu_attack_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu");
    lib1_gv_menu_attack_pause = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu/Pause");
    lib1_gv_menu_attack_reset = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackMenu/Reset");
    lib1_gv_menu_start_attack = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/StartButton");
    lib1_gv_menu_stop_attack = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/StopButton");
    lib1_gv_menu_attack_attack = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/AttackButton");
    lib1_gv_menu_side = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterMenu/SideButton");
    lib1_gv_settings_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel");
    lib1_gv_settings_upgradebutton[0] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level0");
    lib1_gv_settings_upgradebutton[1] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level1");
    lib1_gv_settings_upgradebutton[2] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level2");
    lib1_gv_settings_upgradebutton[3] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/UpgradeLevel/Level3");
    lib1_gv_settings_researchbutton[0] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Research/Off");
    lib1_gv_settings_researchbutton[1] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Research/On");
    lib1_gv_settings_visionbutton[0] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Vision/Off");
    lib1_gv_settings_visionbutton[1] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListLeft/Vision/On");
    lib1_gv_creator_panel = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TesterPanel/CreatorPanel");
    libNtve_gf_SetDialogItemRenderPriority(lib1_gv_creator_panel, 99, PlayerGroupAll());
    autoC78E2CE7_var = 1;
    for ( ; autoC78E2CE7_var <= autoC78E2CE7_ae; autoC78E2CE7_var += 1 ) {
        lib1_gv_settings_allianceplayerlabel[autoC78E2CE7_var] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeLabel, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC78E2CE7_var) + "/Label"));
        lib1_gv_settings_alliancebuttons[autoC78E2CE7_var][0] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC78E2CE7_var) + "/Red"));
        lib1_gv_settings_alliancebuttons[autoC78E2CE7_var][1] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC78E2CE7_var) + "/Blue"));
        lib1_gv_settings_alliancebuttons[autoC78E2CE7_var][2] = lib1_gf_DialogItemFromLayoutHookup(c_triggerControlTypeButton, ("UIContainer/FullscreenUpperContainer/TesterPanel/SettingsPanel/ListRight/Player" + IntToString(autoC78E2CE7_var) + "/Creator"));
    }
}

void lib1_gf_PrepareUnitTesterPlacementMode () {
    // Automatic Variable Declarations
    // Implementation
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CreepSetSpeed(c_creepSpeedBlend, 1000.0);
}

void lib1_gf_PrepareUnitTesterPlayers () {
    // Automatic Variable Declarations
    const int autoD9725C5D_ae = lib1_gv_const_players;
    int autoD9725C5D_var;
    playergroup auto067B8617_g;
    int auto067B8617_var;

    // Implementation
    autoD9725C5D_var = 1;
    for ( ; autoD9725C5D_var <= autoD9725C5D_ae; autoD9725C5D_var += 1 ) {
        VisRevealerCreate(autoD9725C5D_var, RegionEntireMap());
        lib1_gv_data_player[autoD9725C5D_var].lv_revealer = VisRevealerLastCreated();
    }
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Neutral);
    auto067B8617_g = PlayerGroupAll();
    auto067B8617_var = -1;
    while (true) {
        auto067B8617_var = PlayerGroupNextPlayer(auto067B8617_g, auto067B8617_var);
        if (auto067B8617_var < 0) { break; }
        PlayerModifyPropertyInt(auto067B8617_var, c_playerPropMinerals, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto067B8617_var, c_playerPropVespene, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto067B8617_var, c_playerPropTerrazine, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto067B8617_var, c_playerPropCustom, c_playerPropOperSetTo, 1000000000);
        PlayerModifyPropertyInt(auto067B8617_var, c_playerPropSuppliesLimit, c_playerPropOperSetTo, 1000);
    }
    if ((PlayerType(2) == c_playerTypeUser)) {
        lib1_gv_data_player[1].lv_creator_access = true;
        lib1_gv_data_player[1].lv_player_access[0] = true;
        lib1_gv_data_player[1].lv_menu_mode = 2;
        lib1_gv_data_player[2].lv_creator_access = true;
        lib1_gv_data_player[2].lv_player_access[1] = true;
        lib1_gv_data_player[2].lv_menu_mode = 2;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_2C8E9B75"));
        TextExpressionSetToken("Param/Expression/lib_1_F99B0312", "A", TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_F99B0312"));
        TextExpressionSetToken("Param/Expression/lib_1_AAA36C8E", "A", TextWithColor(PlayerName(2), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(2, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_AAA36C8E"));
    }
    else {
        lib1_gv_data_player[1].lv_creator_access = true;
        lib1_gv_data_player[1].lv_player_access[0] = true;
        lib1_gv_data_player[1].lv_player_access[1] = true;
        lib1_gv_data_player[1].lv_menu_mode = 2;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_A7E05522"));
        TextExpressionSetToken("Param/Expression/lib_1_04B5BD30", "A", TextWithColor(PlayerName(1), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(1, false))));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_04B5BD30"));
    }
}

void lib1_gf_RenderTesterUIForPlayer (int lp_player) {
    // Variable Declarations
    int lv_side_ii;
    int lv_card_ii;
    int lv_level_ii;
    string lv_unit;
    string lv_commander;
    string lv_tFaction;

    // Automatic Variable Declarations
    const int auto32753290_ae = lib1_gv_const_terrains;
    int auto32753290_var;
    const int autoDD59AE82_ae = lib1_gv_const_players;
    int autoDD59AE82_var;
    const int auto4B1EE8C2_ae = 1;
    int auto4B1EE8C2_var;
    int autoDB743C21_ae;
    int autoDB743C21_var;

    // Variable Initialization

    // Implementation
    if ((lib1_gv_attack_mode == true)) {
        DialogControlSetEnabled(lib1_gv_menu_mode_settings, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(lib1_gv_menu_mode_settings, PlayerGroupSingle(lp_player), true);
        if ((lib1_gv_data_player[lp_player].lv_menu_mode == 1)) {
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_settings, true, PlayerGroupSingle(lp_player));
        }
        else {
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_settings, false, PlayerGroupSingle(lp_player));
        }
    }
    if (((lib1_gv_data_player[lp_player].lv_creator_access == false) || (lib1_gv_attack_mode == true))) {
        DialogControlSetEnabled(lib1_gv_menu_mode_creator, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetEnabled(lib1_gv_menu_mode_creator, PlayerGroupSingle(lp_player), true);
        if ((lib1_gv_data_player[lp_player].lv_menu_mode == 2)) {
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_creator, true, PlayerGroupSingle(lp_player));
        }
        else {
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_creator, false, PlayerGroupSingle(lp_player));
        }
    }
    if ((lib1_gv_attack_mode != false)) {
        DialogControlSetVisible(lib1_gv_menu_creator_panel, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_menu_creator_panel, PlayerGroupSingle(lp_player), true);
        DialogControlSetVisible(lib1_gv_menu_side, PlayerGroupSingle(lp_player), true);
        if ((lib1_gv_data_player[lp_player].lv_creator_access == false)) {
            DialogControlSetEnabled(lib1_gv_menu_creator_mirror, PlayerGroupSingle(lp_player), false);
            DialogControlSetEnabled(lib1_gv_menu_creator_clear, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(lib1_gv_menu_start_attack, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogControlSetEnabled(lib1_gv_menu_creator_mirror, PlayerGroupSingle(lp_player), true);
            DialogControlSetEnabled(lib1_gv_menu_creator_clear, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(lib1_gv_menu_start_attack, PlayerGroupSingle(lp_player), true);
        }
    }
    if ((lib1_gv_attack_mode != true)) {
        DialogControlSetVisible(lib1_gv_menu_attack_panel, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_menu_stop_attack, PlayerGroupSingle(lp_player), false);
        DialogControlSetVisible(lib1_gv_menu_attack_attack, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_menu_attack_panel, PlayerGroupSingle(lp_player), true);
        libNtve_gf_SetDialogItemToggled(lib1_gv_menu_attack_pause, lib1_gv_pause, PlayerGroupSingle(lp_player));
        if ((lib1_gv_data_player[lp_player].lv_creator_access == false)) {
            DialogControlSetEnabled(lib1_gv_menu_attack_reset, PlayerGroupSingle(lp_player), false);
            DialogControlSetEnabled(lib1_gv_menu_attack_pause, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(lib1_gv_menu_stop_attack, PlayerGroupSingle(lp_player), false);
            DialogControlSetVisible(lib1_gv_menu_attack_attack, PlayerGroupSingle(lp_player), false);
        }
        else {
            DialogControlSetEnabled(lib1_gv_menu_attack_reset, PlayerGroupSingle(lp_player), true);
            DialogControlSetEnabled(lib1_gv_menu_attack_pause, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(lib1_gv_menu_stop_attack, PlayerGroupSingle(lp_player), true);
            DialogControlSetVisible(lib1_gv_menu_attack_attack, PlayerGroupSingle(lp_player), true);
        }
    }
    if (((lib1_gv_attack_mode == true) || (lib1_gv_data_player[lp_player].lv_menu_mode == 0))) {
        DialogControlSetVisible(lib1_gv_tester_panel, PlayerGroupSingle(lp_player), false);
    }
    else {
        DialogControlSetVisible(lib1_gv_tester_panel, PlayerGroupSingle(lp_player), true);
        if ((lib1_gv_data_player[lp_player].lv_menu_mode != 1)) {
            DialogControlSetVisible(lib1_gv_settings_panel, PlayerGroupSingle(lp_player), false);
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_settings, false, PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlSetVisible(lib1_gv_settings_panel, PlayerGroupSingle(lp_player), true);
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_settings, true, PlayerGroupSingle(lp_player));
            if ((lib1_gv_vision == true)) {
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_visionbutton[0], false, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_visionbutton[1], true, PlayerGroupSingle(lp_player));
            }
            else {
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_visionbutton[0], true, PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_visionbutton[1], false, PlayerGroupSingle(lp_player));
            }
            auto32753290_var = 0;
            for ( ; auto32753290_var <= auto32753290_ae; auto32753290_var += 1 ) {
                if ((lib1_gv_terrain_index == auto32753290_var)) {
                    libNtve_gf_SetDialogItemToggled(lib1_gv_settings_terrainbutton[auto32753290_var], true, PlayerGroupSingle(lp_player));
                }
                else {
                    libNtve_gf_SetDialogItemToggled(lib1_gv_settings_terrainbutton[auto32753290_var], false, PlayerGroupSingle(lp_player));
                }
            }
            autoDD59AE82_var = 1;
            for ( ; autoDD59AE82_var <= autoDD59AE82_ae; autoDD59AE82_var += 1 ) {
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][0], lib1_gv_data_player[autoDD59AE82_var].lv_player_access[0], PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][1], lib1_gv_data_player[autoDD59AE82_var].lv_player_access[1], PlayerGroupSingle(lp_player));
                libNtve_gf_SetDialogItemToggled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][2], lib1_gv_data_player[autoDD59AE82_var].lv_creator_access, PlayerGroupSingle(lp_player));
                if ((PlayerType(autoDD59AE82_var) == c_playerTypeUser)) {
                    libNtve_gf_SetDialogItemText(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], PlayerName(autoDD59AE82_var), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemColor(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(autoDD59AE82_var, false)), PlayerGroupSingle(lp_player));
                    DialogControlSetEnabled(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][0], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][1], PlayerGroupSingle(lp_player), true);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][2], PlayerGroupSingle(lp_player), true);
                }
                else {
                    libNtve_gf_SetDialogItemText(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], StringExternal("UI/BattleLobbyPlayerFrame/Empty"), PlayerGroupSingle(lp_player));
                    libNtve_gf_SetDialogItemColor(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], ColorWithAlpha(0,0,0,0), PlayerGroupSingle(lp_player));
                    DialogControlSetEnabled(lib1_gv_settings_allianceplayerlabel[autoDD59AE82_var], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][0], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][1], PlayerGroupSingle(lp_player), false);
                    DialogControlSetEnabled(lib1_gv_settings_alliancebuttons[autoDD59AE82_var][2], PlayerGroupSingle(lp_player), false);
                }
            }
        }
        if ((lib1_gv_data_player[lp_player].lv_menu_mode != 2)) {
            DialogControlSetVisible(lib1_gv_creator_panel, PlayerGroupSingle(lp_player), false);
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_creator, false, PlayerGroupSingle(lp_player));
        }
        else {
            DialogControlSetVisible(lib1_gv_creator_panel, PlayerGroupSingle(lp_player), true);
            libNtve_gf_SetDialogItemToggled(lib1_gv_menu_mode_creator, true, PlayerGroupSingle(lp_player));
            lib1_gf_RenderUnitTesterPlacementCard(lp_player);
        }
    }
    auto4B1EE8C2_var = 0;
    for ( ; auto4B1EE8C2_var <= auto4B1EE8C2_ae; auto4B1EE8C2_var += 1 ) {
        if ((lib1_gv_data_player[lp_player].lv_player_access[auto4B1EE8C2_var] == false)) {
            if ((lib1_gv_data_player[lp_player].lv_creator_access == true) && (lib1_gv_attack_mode == false)) {
                libNtve_gf_SetAlliance(lib1_gv_side_player[auto4B1EE8C2_var], lp_player, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
            else {
                libNtve_gf_SetAlliance(lib1_gv_side_player[auto4B1EE8C2_var], lp_player, libNtve_ge_AllianceSetting_Ally);
            }
        }
        else {
            libNtve_gf_SetAlliance(lib1_gv_side_player[auto4B1EE8C2_var], lp_player, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
        }
    }
    autoDB743C21_ae = lib1_gf_ListSize(lib1_gv_factions);
    autoDB743C21_var = 1;
    for ( ; autoDB743C21_var <= autoDB743C21_ae; autoDB743C21_var += 1 ) {
        DialogControlHookup(lib1_gv_creator_racebutton[autoDB743C21_var], c_triggerControlTypeImage, "HoverImage");
        libNtve_gf_SetDialogItemTintColor(DialogControlLastCreated(), Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
    }
}

void lib1_gf_RenderTesterUIForAllPlayers () {
    // Automatic Variable Declarations
    const int auto7FDA62EA_ae = lib1_gv_const_players;
    int auto7FDA62EA_var;

    // Implementation
    auto7FDA62EA_var = 1;
    for ( ; auto7FDA62EA_var <= auto7FDA62EA_ae; auto7FDA62EA_var += 1 ) {
        if ((PlayerType(auto7FDA62EA_var) == c_playerTypeUser)) {
            lib1_gf_RenderTesterUIForPlayer(auto7FDA62EA_var);
        }

    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Unit Tester Interface
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InitializeUnitTesterInterface_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto2D2048EF_g;
    int auto2D2048EF_var;
    unitgroup autoBD01CE1A_g;
    int autoBD01CE1A_u;
    unit autoBD01CE1A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D2048EF_g = PlayerGroupAll();
    auto2D2048EF_var = -1;
    while (true) {
        auto2D2048EF_var = PlayerGroupNextPlayer(auto2D2048EF_g, auto2D2048EF_var);
        if (auto2D2048EF_var < 0) { break; }
        PlayerOptionOverride(auto2D2048EF_var, "simplecommandcard", "0");
    }
    lib1_gf_PrepareUnitTesterFactions();
    lib1_gf_PrepareUnitTesterTerrains();
    lib1_gf_ShowUnitTesterCommonInterface();
    lib1_gf_MakeUnitTesterPlacementCard();
    lib1_gf_MakeUnitTesterFactionsList();
    DialogControlSetPosition(lib1_gv_tester_panel, PlayerGroupAll(), c_anchorBottomLeft, 40, -112);
    lib1_gv_side_player[0] = (lib1_gv_const_players+1);
    lib1_gv_side_player[1] = (lib1_gv_const_players+2);
    lib1_gf_LoadTerrainData(lib1_gv_data_terrain[0]);
    lib1_gf_TesterLeaderboardCreate();
    lib1_gf_SaveMapStructures();
    autoBD01CE1A_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, 0, 0), 0);
    autoBD01CE1A_u = UnitGroupCount(autoBD01CE1A_g, c_unitCountAll);
    for (;; autoBD01CE1A_u -= 1) {
        autoBD01CE1A_var = UnitGroupUnitFromEnd(autoBD01CE1A_g, autoBD01CE1A_u);
        if (autoBD01CE1A_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(autoBD01CE1A_var, true);
    }
    lib1_gf_SetActors();
    lib1_gf_PrepareUnitTesterPlayers();
    lib1_gf_HideGameInterface();
    TimerStart(lib1_gv_test_timer, c_timerDurationInfinite, false, c_timeReal);
    lib1_gf_RenderTesterUIForAllPlayers();
    TriggerSendEvent(lib1_gv_uNITTESTERINITIALIZED);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InitializeUnitTesterInterface_Init () {
    lib1_gt_InitializeUnitTesterInterface = TriggerCreate("lib1_gt_InitializeUnitTesterInterface_Func");
    TriggerAddEventGeneric(lib1_gt_InitializeUnitTesterInterface, "UNIT TESTER ENVIRONMENT PREPARED");
    TriggerAddEventMapInit(lib1_gt_InitializeUnitTesterInterface);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingUsed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PingUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_pingUnit;
    int lv_pingType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1_gv_pingValidPlayers, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = (EventPingOption());
    if ((lv_pingType != 4)) {
        lib1_gf_PingPlay(lv_pingType, EventPlayer(), EventPingPoint(), EventGameUser(), EventPingUnitType(), EventPingUnitPosition(), EventPingUnitControlPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PingUsed_Init () {
    lib1_gt_PingUsed = TriggerCreate("lib1_gt_PingUsed_Func");
    TriggerEnable(lib1_gt_PingUsed, false);
    TriggerAddEventPing(lib1_gt_PingUsed, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingResetTimerExprires
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PingResetTimerExprires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerIndex;

    // Automatic Variable Declarations
    const int autoB566031B_ae = 16;
    const int autoB566031B_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerIndex = 1;
    for ( ; ( (autoB566031B_ai >= 0 && lv_timerIndex <= autoB566031B_ae) || (autoB566031B_ai < 0 && lv_timerIndex >= autoB566031B_ae) ) ; lv_timerIndex += autoB566031B_ai ) {
        if ((EventTimer() == lib1_gv_pingResetTimer[lv_timerIndex])) {
            lib1_gv_pingRecentCount[lv_timerIndex] = 0;
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PingResetTimerExprires_Init () {
    lib1_gt_PingResetTimerExprires = TriggerCreate("lib1_gt_PingResetTimerExprires_Func");
    TriggerAddEventTimer(lib1_gt_PingResetTimerExprires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: PingPanelAutoDisable
//--------------------------------------------------------------------------------------------------
bool lib1_gt_PingPanelAutoDisable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupCount(lib1_gv_pingValidPlayers) == 0)) {
        UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypePingPanel, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_PingPanelAutoDisable_Init () {
    lib1_gt_PingPanelAutoDisable = TriggerCreate("lib1_gt_PingPanelAutoDisable_Func");
    TriggerAddEventMapInit(lib1_gt_PingPanelAutoDisable);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_Surrender
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MeleeSurrender_Surrender_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    bool lv_meleeAIUsed;

    // Automatic Variable Declarations
    playergroup autoB7F8FB6C_g;
    playergroup auto31ADB325_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB7F8FB6C_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(autoB7F8FB6C_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer) && (AIIsCampaign(lv_player) == false)) {
            lv_meleeAIUsed = true;
            break;
        }

    }
    if ((lv_meleeAIUsed == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    auto31ADB325_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto31ADB325_g, lv_player);
        if (lv_player < 0) { break; }
        if ((PlayerType(lv_player) == c_playerTypeComputer) && (AIIsCampaign(lv_player) == false)) {
            if ((AIGivingUp(lv_player) == true) && (PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player) == false) && (PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersTried, lv_player) == false)) {
                lib1_gf_MeleeSurrender_AIWantToSurrender(lv_player);
            }

        }

        if ((PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player) == true) && ((PlayerStatus(lv_player) != c_playerStatusActive) || (AIGivingUp(lv_player) == false))) {
            PlayerGroupRemove(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player);
            DialogDestroy(lib1_gv_meleeSurrender_Dialog[lv_player]);
            lib1_gv_meleeSurrender_Dialog[lv_player] = c_invalidDialogId;
            lib1_gf_MeleeSurrender_UpdateDialogs();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MeleeSurrender_Surrender_Init () {
    lib1_gt_MeleeSurrender_Surrender = TriggerCreate("lib1_gt_MeleeSurrender_Surrender_Func");
    TriggerAddEventTimePeriodic(lib1_gt_MeleeSurrender_Surrender, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_SurrenderClickedButton
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MeleeSurrender_SurrenderClickedButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    playergroup auto181097D6_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto181097D6_g = PlayerGroupAll();
    lv_player = -1;
    while (true) {
        lv_player = PlayerGroupNextPlayer(auto181097D6_g, lv_player);
        if (lv_player < 0) { break; }
        if ((lib1_gv_meleeSurrender_BtnYes[lv_player] == EventDialogControl())) {
            PlayerGroupRemove(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player);
            PlayerGroupAdd(lib1_gv_meleeSurrender_PlayersTried, lv_player);
            DialogDestroy(lib1_gv_meleeSurrender_Dialog[lv_player]);
            lib1_gv_meleeSurrender_Dialog[lv_player] = c_invalidDialogId;
            TextExpressionSetToken("Param/Expression/lib_1_4E4CD7C0", "A", PlayerName(lv_player));
            TextExpressionSetToken("Param/Expression/lib_1_4E4CD7C0", "B", PlayerName(EventPlayer()));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_1_4E4CD7C0"));
            lib1_gf_MeleeSurrender_UpdateDialogs();
            AIGoodGame(lv_player);
        }
        else {
            if ((lib1_gv_meleeSurrender_BtnNo[lv_player] == EventDialogControl())) {
                PlayerGroupAdd(lib1_gv_meleeSurrender_PlayersAnswered[EventPlayer()], lv_player);
                lib1_gf_MeleeSurrender_UpdateDialogs();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MeleeSurrender_SurrenderClickedButton_Init () {
    lib1_gt_MeleeSurrender_SurrenderClickedButton = TriggerCreate("lib1_gt_MeleeSurrender_SurrenderClickedButton_Func");
    TriggerAddEventDialogControl(lib1_gt_MeleeSurrender_SurrenderClickedButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MeleeSurrender_FlashDialog
//--------------------------------------------------------------------------------------------------
bool lib1_gt_MeleeSurrender_FlashDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    const int autoA5C3BDDF_n = 5;
    int autoA5C3BDDF_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = lib1_gv_meleeSurrender_FlashingPlayer;
    for (autoA5C3BDDF_i = 1; autoA5C3BDDF_i <= autoA5C3BDDF_n; autoA5C3BDDF_i += 1) {
        if ((PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        Wait(0.6, c_timeReal);
        if ((PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player) == false)) {
            return true;
        }

        Wait(0.6, c_timeReal);
    }
    if ((PlayerGroupHasPlayer(lib1_gv_meleeSurrender_PlayersSurrendering, lv_player) == true)) {
        libNtve_gf_SetDialogItemStyle(lib1_gv_meleeSurrender_Title[lv_player], "AISurrenderTitle", PlayerGroupAll());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_MeleeSurrender_FlashDialog_Init () {
    lib1_gt_MeleeSurrender_FlashDialog = TriggerCreate("lib1_gt_MeleeSurrender_FlashDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Events
//--------------------------------------------------------------------------------------------------
bool lib1_gt_StarCraftEvents_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itInstance;
    datetime lv_itStart;
    datetime lv_itEnd;
    string lv_itDisabler;
    string lv_itSkin;
    string lv_itUpgrade;
    string lv_itMessage;
    unitfilter lv_itMessageFilter;
    datetime lv_curDateTime;
    int lv_itPlayer;
    unit lv_itUnit;

    // Automatic Variable Declarations
    string auto8F566331_userType;
    int auto8F566331_i;
    playergroup auto456B7973_g;
    playergroup auto4F939256_g;
    unitgroup autoC135BBA3_g;
    int autoC135BBA3_u;

    // Variable Initialization
    lv_itMessageFilter = UnitFilter(0, 0, 0, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((GameMapIsBlizzard() == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
        return true;
    }

    lv_curDateTime = CurrentDateTimeGet();
    auto8F566331_userType = lib1_gv_starCraftEventsEventTable;
    auto8F566331_i = 1;
    for ( ; auto8F566331_i <= UserDataInstanceCount(auto8F566331_userType) ; auto8F566331_i += 1 ) {
        lv_itInstance = UserDataInstance(auto8F566331_userType, auto8F566331_i);
        lv_itStart = StringToDateTime(UserDataGetString(lib1_gv_starCraftEventsEventTable, lv_itInstance, "Start", 1));
        lv_itEnd = StringToDateTime(UserDataGetString(lib1_gv_starCraftEventsEventTable, lv_itInstance, "End", 1));
        lv_itDisabler = UserDataGetGameLink("SCEvent_Events", lv_itInstance, "Disabler", 1);
        lv_itSkin = UserDataGetGameLink("SCEvent_Events", lv_itInstance, "Skin", 1);
        lv_itUpgrade = UserDataGetGameLink(lib1_gv_starCraftEventsEventTable, lv_itInstance, "Upgrade", 1);
        lv_itMessage = (UserDataGetString(lib1_gv_starCraftEventsEventTable, lv_itInstance, "Message", 1));
        lv_itMessageFilter = libNtve_gf_ConvertTargetFilterStringToUnitFilter(UserDataGetString(lib1_gv_starCraftEventsEventTable, lv_itInstance, "MessageFilter", 1));
        if (((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itDisabler) == true) || (libNtve_gf_DateTimeisBetween(lv_curDateTime, lv_itStart, lv_itEnd) == false))) {
            continue;
        }

        if ((CatalogEntryIsValid(c_gameCatalogSkin, lv_itSkin) == true)) {
            auto456B7973_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto456B7973_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                PlayerApplySkin(lv_itPlayer, lv_itSkin, true);
            }
        }

        if ((CatalogEntryIsValid(c_gameCatalogUpgrade, lv_itUpgrade) == true)) {
            auto4F939256_g = PlayerGroupActive();
            lv_itPlayer = -1;
            while (true) {
                lv_itPlayer = PlayerGroupNextPlayer(auto4F939256_g, lv_itPlayer);
                if (lv_itPlayer < 0) { break; }
                TechTreeUpgradeAddLevel(lv_itPlayer, lv_itUpgrade, 1);
            }
        }

        autoC135BBA3_g = UnitGroup(null, c_playerAny, RegionEntireMap(), lv_itMessageFilter, 0);
        autoC135BBA3_u = UnitGroupCount(autoC135BBA3_g, c_unitCountAll);
        for (;; autoC135BBA3_u -= 1) {
            lv_itUnit = UnitGroupUnitFromEnd(autoC135BBA3_g, autoC135BBA3_u);
            if (lv_itUnit == null) { break; }
            ActorSend(libNtve_gf_MainActorofUnit(lv_itUnit), lv_itMessage);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_StarCraftEvents_Init () {
    lib1_gt_StarCraftEvents = TriggerCreate("lib1_gt_StarCraftEvents_Func");
    TriggerAddEventMapInit(lib1_gt_StarCraftEvents);
    TriggerAddEventCheatUsed(lib1_gt_StarCraftEvents, c_playerAny, c_gameCheatDateTime);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Transport Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TransportController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_transportUnit;
    point lv_transportTargetPoint;
    point lv_transportDespawnPoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_transportUnit = lib1_gv_transportUnit_Param;
    lv_transportTargetPoint = lib1_gf_ValidatedPoint(lib1_gv_transportTargetPoint_Param);
    lv_transportDespawnPoint = lib1_gf_ValidatedPoint(lib1_gv_transportDespawnPoint_Param);
    if ((UnitCargoValue(lv_transportUnit, c_unitCargoSpaceTotal) == 0)) {
        return true;
    }

    while (true) {
        if ((UnitIsAlive(lv_transportUnit) == false)) {
            return true;
        }

        if ((UnitCargoValue(lv_transportUnit, c_unitCargoUnitCount) > 0)) {
            UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("MedivacTransport", 2), lv_transportTargetPoint), c_orderQueueReplace);
        }
        else {
            if ((RegionContainsPoint(RegionCircle(lv_transportDespawnPoint, 1.0), UnitGetPosition(lv_transportUnit)) == true)) {
                UnitRemove(lv_transportUnit);
                return true;
            }
            else {
                UnitIssueOrder(lv_transportUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_transportDespawnPoint), c_orderQueueReplace);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TransportController_Init () {
    lib1_gt_TransportController = TriggerCreate("lib1_gt_TransportController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-Reveal Region Controller
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    int autoE35AFA07_ae;
    const int autoE35AFA07_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        autoE35AFA07_ae = (lib1_gv_autoRevealers.lv_count - 1);
        lv_i = 0;
        for ( ; ( (autoE35AFA07_ai >= 0 && lv_i <= autoE35AFA07_ae) || (autoE35AFA07_ai < 0 && lv_i >= autoE35AFA07_ae) ) ; lv_i += autoE35AFA07_ai ) {
            if ((UnitGroupCount(UnitGroup(null, lib1_gv_autoRevealers.lv_triggeringPlayers[lv_i], lib1_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                VisRevealerEnable(lib1_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                VisRevealerEnable(lib1_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AutoRevealRegionController_Init () {
    lib1_gt_AutoRevealRegionController = TriggerCreate("lib1_gt_AutoRevealRegionController_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoSave
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_a = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "General commands");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-info");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides available commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pai");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses AI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cdr");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes cooldowns");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-fastbuild");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables fast build");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-money");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives resources");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-vision");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "reveals whole map");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-god");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "invulnerability");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-speed X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes game speed to X = \"slower/slow/normal/fast/faster\"");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ally");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-share");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "gives/removes control over allied units + spending");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pvp");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets player 01 and 02 as enemies (or disables that)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-caster");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "creates the caster of top bar abilities for player 2");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mastery X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes masteries for player X; might not work 100% during the game");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-light");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "cycles through game lighting with \"+\" and \"-\" keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables smartcasting for Bile Launchers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-randommut X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts X random mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-supply X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets supply limit to X for player Y (optional)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-nuketest");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Launches many nukes as in Going Nuclear mutator");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-techreset X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "resets tech (upgrades/research) for player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mutsel");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you add more mutators");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bioreport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows info about biomass");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pause");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "pauses/unpauses all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-resource X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets resouces to X minerals and Y vespene");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unitinfo");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "show/hides additional information for all units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-voidrifts X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows where void rifts can spawn; if X=clear, clears; if X=time in minutes limits time spawning");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-replace X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "replaces unit type X seamlessly");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-sbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "saves units and upgrade into bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rbank X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "restores units and upgrade from the bank named X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearscreen X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes ALL units at the camera target location owned by player X (default=Any), 15 radius");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-soundlimit X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "limits sound emotes to one each X seconds");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Measuring and logging");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dummy X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns a dummy that calculates DPS; X= additional armored/light/structure attribute");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides log; shows other player if X=\"2\" ");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-log clear");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "clears log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pie");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows pie charts for damage log");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts and resets DPS counting for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-dpsstop");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "stops DPS counting");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gincome");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of income rate");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-garmy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of army value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gapm");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of APM");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-gkills");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of kills");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-glost");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a graph of unit value lost");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pathcheck");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Checks pathing between selected unit and camera target");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-eco");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "starts economic testing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-val");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows economic value");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Units");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-copypaste");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables copypasting of units with Ctrl+C; Ctrl+V");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-spawn X Y Z");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns units; X= unitID, Y= amount; Z= for player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-getid");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "get unitID for units onscreen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aw X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "spawns attack wave; X= size, Y= tech");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-attack");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "orders spawned attack waves to attack");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remw");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes spawned attack waves");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-aichoice");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "selects enemy unit comp");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-refill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills enemy pre-placed units; X=\"all\" to include rocks");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-horde X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiplies the amount of pre-placed and attack wave units by X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remhorde");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes units spawned by horde command");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-empower X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "increases health +X*100% and damage +Y*100% of all enemy units and structures");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cost X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "calculates resouce and supply cost of units on screen; X= optional distance");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-kill X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "kills selected units; X= killing player");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-remove");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-give X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-switchowner X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "give selected units to player X; unit keeps upgrades");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-restore");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refills health, shields and energy");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-teleport");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "teleports selected units to camera location");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-control X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lets you control all enemy units; alliance status is unaffected; if X=ally, control allies");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-clearenemy");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "removes all enemy units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "User interface");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-toprefresh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "refreshes topbar; use if you encounter issues after resuming from replay");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-slim");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides custom user interface");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-look X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "makes all selected units look at X angle");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-topbar");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "hides/shows topbar notifications (right-click)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-numbers");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides damage and healing numbers");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-meme");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides meme faces");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables full camera control with Q,W,E,A,S,D keys");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cam X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "X=\"reset\" resets camera position; X=\"top\" top view");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tychui");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables reordering outlaws");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-terin");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides Terin's UI for basic commands");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-unlock");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "unlocks camera from victory/defeat screen");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trigdebug");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows debugging window");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-trace");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides visual debug tracing of effects");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "actorinfodisplay");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "offline only | shows/hides actor info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-allysupply");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows/hides player 2 supply UI");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listdead");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all dead units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listhidden");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all hidden units (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listmissile");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all missiles (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-listall");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "lists all units and structures (with position and owner)");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-encomps");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of enemy AI comps");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-emotes");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows a list of emotes available for twitch integration with !message");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-buttons");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "enables/disables showing which buttons are you pressing");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-hotkey X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes the hotkey for button X to Y. This is saved between games.");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Unit modifications");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-ms X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets movement speed of selected units to X; -ms alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-acc X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets unit acceleration of selected unit types to X; -acc alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-range X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets weapon range for selected unit types to X; Y can specify weapon; -range alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-arange X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets ability range for selected unit types to X; Y can specify weapon; -arange alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-as X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "multiply attack speed for selected unit types by X; -as alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-mm X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes projectile speed for a group of units by X; just \"-mm\" adds units to group; \"-mm clear\" clears");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-life X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets max life to X for selected units; shields if Y=2; -life alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-energy X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets selected units max energy to X. If Y == 'regen', set energy regen to Y. -energy alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-armor X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "changes armor to X for selected unit types; shield armor if Y=2; -armor alone resets");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-tint X,Y,Z ");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets tint color to X,Y,Z in RGB for selected units; in decimal");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-scale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets actor scale to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-height X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets height offset to X for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-timescale X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Changes timescale for selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-actorsend X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sends actor message X to selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-cannon X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "SetsTesseract Cannon Projection damage to X%. E.g. -cannon 0.2 sets their damage to 20%");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-xp X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Adds X amount of experience for selected units");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-rad X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets movement radius for unit types of all selected units to X");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-airbeh/-groundbeh");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Selected units will be a valid target as air or ground exclusively");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Dead of Night");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-pick X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the first (X) and the second (Y) special infested -hunterling/spotter/kaboomer/choker");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "-bosspick X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "picks the boss type (X) -stank/nydus");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Scythe of Amon");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetSliverAbility X");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "Sets a fixed order of abilities on Slivers. X =  first ability (deathgrip / shockwave / unstableenergy )");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "Cradle of Death");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "cheats");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "shows cheat info");
    lv_a += 1;
    DataTableSetString(true, ("UT_command" + IntToString(lv_a)), "SetBranch X Y");
    DataTableSetString(true, ("UT_desc" + IntToString(lv_a)), "sets branch for main objective; X=one/two; Y=right/left");
    lv_a += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoSave_Init () {
    lib1_gt_UT_InfoSave = TriggerCreate("lib1_gt_UT_InfoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Info_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib1_gt_UT_InfoCreate, true, true);
    TriggerEnable(lib1_gt_UT_InfoButton, true);
    if ((DialogIsVisible(lib1_gv_uT_InfoDialog, EventPlayer()) == false)) {
        DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), true);
    }
    else {
        DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Info_Init () {
    lib1_gt_UT_Info = TriggerCreate("lib1_gt_UT_Info_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Info, c_playerAny, "-info", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_InfoButton
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_uT_InfoButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_uT_InfoDialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoButton_Init () {
    lib1_gt_UT_InfoButton = TriggerCreate("lib1_gt_UT_InfoButton_Func");
    TriggerEnable(lib1_gt_UT_InfoButton, false);
    TriggerAddEventDialogControl(lib1_gt_UT_InfoButton, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Info Create
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_InfoCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vListBox;
    int lv_a;
    string lv_vString;
    string lv_vDesc;

    // Automatic Variable Declarations
    const int autoA886B9C5_ae = 200;
    const int autoA886B9C5_ai = 1;

    // Variable Initialization
    lv_vListBox = c_invalidDialogControlId;
    lv_vDesc = "";

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    DialogCreate(960, 600, c_anchorCenter, 0, -500, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetRenderPriority(DialogLastCreated(), 1050);
    DialogSetFullscreen(DialogLastCreated(), true);
    lib1_gv_uT_InfoDialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 50.0);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 964, 546, c_anchorCenter, 0, 38, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_frame_message_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    TextExpressionSetToken("Param/Expression/lib_1_AE8756E8", "B", GameMapName());
    TextExpressionSetToken("Param/Expression/lib_1_AE8756E8", "A", IntToText(UnitGroupCount(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)));
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 910, 38, c_anchorCenter, -15, -205, TextExpressionAssemble("Param/Expression/lib_1_AE8756E8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 30, c_anchorCenter, 460, -210, StringToText(""), StringToText(""), "");
    lib1_gv_uT_InfoButton = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 30, 31, c_anchorCenter, 460, -210, StringToText(""), "Assets\\Textures\\sc2_ui_glues_icons_closebuttonhover.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeNormal);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypeListBox);
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 10.0);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 60);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 960, 500);
    lv_vListBox = DialogControlLastCreated();
    lv_a = 1;
    for ( ; ( (autoA886B9C5_ai >= 0 && lv_a <= autoA886B9C5_ae) || (autoA886B9C5_ai < 0 && lv_a >= autoA886B9C5_ae) ) ; lv_a += autoA886B9C5_ai ) {
        lv_vString = DataTableGetString(true, ("UT_command" + IntToString(lv_a)));
        if ((lv_vString != "")) {
            lv_vDesc = DataTableGetString(true, ("UT_desc" + IntToString(lv_a)));
            if ((lv_vDesc != "")) {
                TextExpressionSetToken("Param/Expression/lib_1_734A7303", "A", StringToText(lv_vString));
                TextExpressionSetToken("Param/Expression/lib_1_734A7303", "B", StringToText(lv_vDesc));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_1_734A7303"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_C7D1B34A", "A", StringToText(lv_vString));
                DialogControlAddItem(lv_vListBox, PlayerGroupAll(), TextExpressionAssemble("Param/Expression/lib_1_C7D1B34A"));
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_InfoCreate_Init () {
    lib1_gt_UT_InfoCreate = TriggerCreate("lib1_gt_UT_InfoCreate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_UI_CtrlH) == false)) {
        TriggerEnable(lib1_gt_UT_UI_CtrlH, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_5A12F661"));
    }
    else {
        TriggerEnable(lib1_gt_UT_UI_CtrlH, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_AA54187F"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UI_Init () {
    lib1_gt_UT_UI = TriggerCreate("lib1_gt_UT_UI_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_UI, c_playerAny, "-ui", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UI_Ctrl+H
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UI_CtrlH_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_vShowHide;
    playergroup lv_vPGroup;

    // Automatic Variable Declarations
    bool auto25FCF402_val;

    // Variable Initialization
    lv_vShowHide = true;
    lv_vPGroup = PlayerGroupSingle(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto25FCF402_val = PlayerGroupHasPlayer(lib1_gv_uT_UI_Hidden, EventPlayer());
    if (auto25FCF402_val == false) {
        lib1_gf_HideUI(lv_vPGroup);
    }
    else if (auto25FCF402_val == true) {
        lib1_gf_ShowUI(lv_vPGroup);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UI_CtrlH_Init () {
    lib1_gt_UT_UI_CtrlH = TriggerCreate("lib1_gt_UT_UI_CtrlH_Func");
    TriggerEnable(lib1_gt_UT_UI_CtrlH, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_UI_CtrlH, c_playerAny, c_keyH, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonMonitor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ButtonMonitor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGroupHasPlayer(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer()) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_106DB4AE"));
        PlayerGroupRemove(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        if ((PlayerGroupCount(lib1_gv_uT_ButtonUsagePlayerGroup) == 0)) {
            TriggerEnable(lib1_gt_UT_ButtonUsage, false);
        }

    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_B735BE2C"));
        PlayerGroupAdd(lib1_gv_uT_ButtonUsagePlayerGroup, EventPlayer());
        TriggerEnable(lib1_gt_UT_ButtonUsage, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ButtonMonitor_Init () {
    lib1_gt_UT_ButtonMonitor = TriggerCreate("lib1_gt_UT_ButtonMonitor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ButtonMonitor, c_playerAny, "-buttons", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ButtonUsage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ButtonUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vButton;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vButton = EventButtonPressed();

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_36A23080", "A", StringToText((lv_vButton)));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_36A23080"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ButtonUsage_Init () {
    lib1_gt_UT_ButtonUsage = TriggerCreate("lib1_gt_UT_ButtonUsage_Func");
    TriggerEnable(lib1_gt_UT_ButtonUsage, false);
    TriggerAddEventButtonPressed(lib1_gt_UT_ButtonUsage, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_HotkeyChange
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_HotkeyChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIdx;

    // Automatic Variable Declarations
    const int auto9D2FF061_ae = lib1_gv_uT_HotkeyStoreLength;
    const int auto9D2FF061_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((StringContains(StringWord(EventChatMessage(false), 3), "Ctrl+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Alt+", c_stringAnywhere, c_stringNoCase) == true) || (StringContains(StringWord(EventChatMessage(false), 3), "Shift+", c_stringAnywhere, c_stringNoCase) == true))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_DC986F2F"));
        return true;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_666BB948", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_1_666BB948", "B", StringToText(StringWord(EventChatMessage(false), 3)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_666BB948"));
    }
    CatalogFieldValueSet(c_gameCatalogButton, (StringWord(EventChatMessage(false), 2)), "Hotkey", EventPlayer(), ("Letter/" + StringWord(EventChatMessage(false), 3)));
    lv_vIdx = 1;
    for ( ; ( (auto9D2FF061_ai >= 0 && lv_vIdx <= auto9D2FF061_ae) || (auto9D2FF061_ai < 0 && lv_vIdx >= auto9D2FF061_ae) ) ; lv_vIdx += auto9D2FF061_ai ) {
        if ((lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] == "")) {
            lib1_gv_uT_HotkeyToStoreButton[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 2);
            lib1_gv_uT_HotkeyToStoreValue[lv_vIdx][EventPlayer()] = StringWord(EventChatMessage(false), 3);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_HotkeyChange_Init () {
    lib1_gt_UT_HotkeyChange = TriggerCreate("lib1_gt_UT_HotkeyChange_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_HotkeyChange, c_playerAny, "-hotkey", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Godmode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB7C2613A_g;
    int autoB7C2613A_u;
    unit autoB7C2613A_var;
    unitgroup auto4727008C_g;
    int auto4727008C_u;
    unit auto4727008C_var;
    unitgroup auto3ABF9F61_g;
    int auto3ABF9F61_u;
    unit auto3ABF9F61_var;
    unitgroup auto1AD225F5_g;
    int auto1AD225F5_u;
    unit auto1AD225F5_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_GodMode == false)) {
        lib1_gv_uT_GodMode = true;
        TriggerEnable(lib1_gt_UT_Godmode_unit_created, true);
        auto3ABF9F61_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3ABF9F61_u = UnitGroupCount(auto3ABF9F61_g, c_unitCountAll);
        for (;; auto3ABF9F61_u -= 1) {
            auto3ABF9F61_var = UnitGroupUnitFromEnd(auto3ABF9F61_g, auto3ABF9F61_u);
            if (auto3ABF9F61_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto3ABF9F61_var, true);
        }
        auto1AD225F5_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1AD225F5_u = UnitGroupCount(auto1AD225F5_g, c_unitCountAll);
        for (;; auto1AD225F5_u -= 1) {
            auto1AD225F5_var = UnitGroupUnitFromEnd(auto1AD225F5_g, auto1AD225F5_u);
            if (auto1AD225F5_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto1AD225F5_var, true);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_ABAC3023"));
    }
    else {
        lib1_gv_uT_GodMode = false;
        TriggerEnable(lib1_gt_UT_Godmode_unit_created, false);
        autoB7C2613A_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB7C2613A_u = UnitGroupCount(autoB7C2613A_g, c_unitCountAll);
        for (;; autoB7C2613A_u -= 1) {
            autoB7C2613A_var = UnitGroupUnitFromEnd(autoB7C2613A_g, autoB7C2613A_u);
            if (autoB7C2613A_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(autoB7C2613A_var, false);
        }
        auto4727008C_g = UnitGroup(null, 2, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4727008C_u = UnitGroupCount(auto4727008C_g, c_unitCountAll);
        for (;; auto4727008C_u -= 1) {
            auto4727008C_var = UnitGroupUnitFromEnd(auto4727008C_g, auto4727008C_u);
            if (auto4727008C_var == null) { break; }
            libNtve_gf_MakeUnitInvulnerable(auto4727008C_var, false);
        }
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E3A4ED11"));
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Godmode_Init () {
    lib1_gt_UT_Godmode = TriggerCreate("lib1_gt_UT_Godmode_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Godmode, c_playerAny, "-god", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Godmode_unit_created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Godmode_unit_created_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_GodMode == true))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnitCreatedUnit()) == 1) || (UnitGetOwner(EventUnitCreatedUnit()) == 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(EventUnitCreatedUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Godmode_unit_created_Init () {
    lib1_gt_UT_Godmode_unit_created = TriggerCreate("lib1_gt_UT_Godmode_unit_created_Func");
    TriggerEnable(lib1_gt_UT_Godmode_unit_created, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_Godmode_unit_created, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfo
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UnitInfo_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB52E160D_g;
    int autoB52E160D_u;
    unit autoB52E160D_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_UnitInfoUpdate) == true)) {
        TriggerEnable(lib1_gt_UT_UnitInfoUpdate, false);
        autoB52E160D_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        autoB52E160D_u = UnitGroupCount(autoB52E160D_g, c_unitCountAll);
        for (;; autoB52E160D_u -= 1) {
            autoB52E160D_var = UnitGroupUnitFromEnd(autoB52E160D_g, autoB52E160D_u);
            if (autoB52E160D_var == null) { break; }
            lib1_gf_UT_RemoveUnitInfo(autoB52E160D_var);
        }
    }
    else {
        TriggerEnable(lib1_gt_UT_UnitInfoUpdate, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UnitInfo_Init () {
    lib1_gt_UT_UnitInfo = TriggerCreate("lib1_gt_UT_UnitInfo_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_UnitInfo, c_playerAny, "-unitinfo", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_UnitInfoUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_UnitInfoUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto46958271_g;
    int auto46958271_u;
    unit auto46958271_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto46958271_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto46958271_u = UnitGroupCount(auto46958271_g, c_unitCountAll);
    for (;; auto46958271_u -= 1) {
        auto46958271_var = UnitGroupUnitFromEnd(auto46958271_g, auto46958271_u);
        if (auto46958271_var == null) { break; }
        lib1_gf_UT_UpdateUnitInfo(auto46958271_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_UnitInfoUpdate_Init () {
    lib1_gt_UT_UnitInfoUpdate = TriggerCreate("lib1_gt_UT_UnitInfoUpdate_Func");
    TriggerEnable(lib1_gt_UT_UnitInfoUpdate, false);
    TriggerAddEventTimePeriodic(lib1_gt_UT_UnitInfoUpdate, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastConstruction
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastConstruction_Init () {
    lib1_gt_UT_FastConstruction = TriggerCreate("lib1_gt_UT_FastConstruction_Func");
    TriggerEnable(lib1_gt_UT_FastConstruction, false);
    TriggerAddEventUnitConstructProgress(lib1_gt_UT_FastConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastTrain
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 2, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastTrain_Init () {
    lib1_gt_UT_FastTrain = TriggerCreate("lib1_gt_UT_FastTrain_Func");
    TriggerEnable(lib1_gt_UT_FastTrain, false);
    TriggerAddEventUnitTrainProgress(lib1_gt_UT_FastTrain, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastResearch
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastResearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastResearch_Init () {
    lib1_gt_UT_FastResearch = TriggerCreate("lib1_gt_UT_FastResearch_Func");
    TriggerEnable(lib1_gt_UT_FastResearch, false);
    TriggerAddEventUnitResearchProgress(lib1_gt_UT_FastResearch, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastArrm
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastArrm_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastArrm_Init () {
    lib1_gt_UT_FastArrm = TriggerCreate("lib1_gt_UT_FastArrm_Func");
    TriggerEnable(lib1_gt_UT_FastArrm, false);
    TriggerAddEventUnitArmMagazineProgress(lib1_gt_UT_FastArrm, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastRevive
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastRevive_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_FastBuildCheat == true))) {
            return false;
        }

        if (!((TechTreeUpgradeCount(UnitGetOwner(EventUnit()), "FastBuild", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastRevive_Init () {
    lib1_gt_UT_FastRevive = TriggerCreate("lib1_gt_UT_FastRevive_Func");
    TriggerEnable(lib1_gt_UT_FastRevive, false);
    TriggerAddEventUnitReviveProgress(lib1_gt_UT_FastRevive, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_FastBuild
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_FastBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_FastBuildCheat == false)) {
        lib1_gv_uT_FastBuildCheat = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_46F165D7"));
        lib1_gf_EnableFastBuild(EventPlayer());
    }
    else {
        lib1_gv_uT_FastBuildCheat = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_672296C9"));
        lib1_gf_DisableFastBuild(EventPlayer());
        TriggerEnable(lib1_gt_UT_FastArrm, false);
        TriggerEnable(lib1_gt_UT_FastConstruction, false);
        TriggerEnable(lib1_gt_UT_FastResearch, false);
        TriggerEnable(lib1_gt_UT_FastRevive, false);
        TriggerEnable(lib1_gt_UT_FastTrain, false);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_FastBuild_Init () {
    lib1_gt_UT_FastBuild = TriggerCreate("lib1_gt_UT_FastBuild_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_FastBuild, c_playerAny, "-fastbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Toggle Eco
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ToggleEco_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_EconomyTest == false)) {
        lib1_gv_uT_EconomyTest = true;
        TriggerEnable(lib1_gt_UT_WorkerSaturation, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_36FBE6EB"));
    }
    else {
        lib1_gv_uT_EconomyTest = false;
        TriggerEnable(lib1_gt_UT_WorkerSaturation, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_C2CF7F93"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ToggleEco_Init () {
    lib1_gt_UT_ToggleEco = TriggerCreate("lib1_gt_UT_ToggleEco_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ToggleEco, c_playerAny, "-eco", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Economy Value
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_EconomyValue_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mineral_count;
    fixed lv_gas_count;
    fixed lv_energy_count;

    // Automatic Variable Declarations
    unitgroup autoCFCE6496_g;
    int autoCFCE6496_u;
    unit autoCFCE6496_var;
    string auto1DC086BF_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCFCE6496_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    autoCFCE6496_u = UnitGroupCount(autoCFCE6496_g, c_unitCountAll);
    for (;; autoCFCE6496_u -= 1) {
        autoCFCE6496_var = UnitGroupUnitFromEnd(autoCFCE6496_g, autoCFCE6496_u);
        if (autoCFCE6496_var == null) { break; }
        auto1DC086BF_val = UnitGetType(autoCFCE6496_var);
        if (auto1DC086BF_val == "Zergling") {
            lv_mineral_count = (lv_mineral_count+14.6667);
        }
        else if (auto1DC086BF_val == "Baneling") {
            lv_mineral_count = (lv_mineral_count+36.6667);
            lv_gas_count = (lv_gas_count+14.0);
        }
        else if (auto1DC086BF_val == "Drone") {
            lv_mineral_count = (lv_mineral_count+37.5);
        }
        else if (auto1DC086BF_val == "GhostAcademyNova") {
        }
        else if (auto1DC086BF_val == "OrbitalCommand") {
            lv_mineral_count = (lv_mineral_count+550);
            lv_energy_count = (lv_energy_count+UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent));
        }
        else {
            lv_mineral_count = (lv_mineral_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoCFCE6496_var), "CostResource[" + IntToString(0) + "]", c_playerAny)));
            lv_gas_count = (lv_gas_count+IntToFixed(CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(autoCFCE6496_var), "CostResource[" + IntToString(1) + "]", c_playerAny)));
        }
    }
    lv_mineral_count = (lv_mineral_count+lv_energy_count*4.43+PlayerGetPropertyFixed(1, c_playerPropMinerals));
    lv_gas_count = (lv_gas_count+PlayerGetPropertyFixed(1, c_playerPropVespene));
    TextExpressionSetToken("Param/Expression/lib_1_8B5E54EA", "A", IntToText(FixedToInt(lv_mineral_count)));
    TextExpressionSetToken("Param/Expression/lib_1_8B5E54EA", "B", IntToText(FixedToInt(lv_gas_count)));
    TextExpressionSetToken("Param/Expression/lib_1_8B5E54EA", "C", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_8B5E54EA"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_EconomyValue_Init () {
    lib1_gt_UT_EconomyValue = TriggerCreate("lib1_gt_UT_EconomyValue_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_EconomyValue, c_playerAny, "-val", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Worker Saturation
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_WorkerSaturation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_worker_count;
    int lv_saturation_count;

    // Automatic Variable Declarations
    unitgroup auto786E916C_g;
    int auto786E916C_u;
    unit auto786E916C_var;
    unitgroup autoEBA1ED4B_g;
    int autoEBA1ED4B_u;
    unit autoEBA1ED4B_var;

    // Variable Initialization
    lv_saturation_count = 48;

    // Conditions
    if (testConds) {
        if (!((lib1_gv_uT_EconomyTest == true))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "SCV") || (UnitGetType(EventUnitCreatedUnit()) == "Probe") || (UnitGetType(EventUnitCreatedUnit()) == "Drone") || (UnitGetType(EventUnitCreatedUnit()) == "SISCV") || (UnitGetType(EventUnitCreatedUnit()) == "DehakaDrone") || (UnitGetType(EventUnitCreatedUnit()) == "HHSCV")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto786E916C_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto786E916C_u = UnitGroupCount(auto786E916C_g, c_unitCountAll);
    for (;; auto786E916C_u -= 1) {
        auto786E916C_var = UnitGroupUnitFromEnd(auto786E916C_g, auto786E916C_u);
        if (auto786E916C_var == null) { break; }
        if (((UnitGetType(auto786E916C_var) == "AutomatedRefinery") || (UnitGetType(auto786E916C_var) == "AutomatedAssimilator"))) {
            lv_saturation_count = 36;
        }

    }
    autoEBA1ED4B_g = UnitGroup(null, 1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    autoEBA1ED4B_u = UnitGroupCount(autoEBA1ED4B_g, c_unitCountAll);
    for (;; autoEBA1ED4B_u -= 1) {
        autoEBA1ED4B_var = UnitGroupUnitFromEnd(autoEBA1ED4B_g, autoEBA1ED4B_u);
        if (autoEBA1ED4B_var == null) { break; }
        if (((UnitGetType(autoEBA1ED4B_var) == "SCV") || (UnitGetType(autoEBA1ED4B_var) == "Probe") || (UnitGetType(autoEBA1ED4B_var) == "Drone") || (UnitGetType(autoEBA1ED4B_var) == "SISCV") || (UnitGetType(autoEBA1ED4B_var) == "DehakaDrone") || (UnitGetType(autoEBA1ED4B_var) == "HHSCV"))) {
            lv_worker_count = (lv_worker_count+1);
            if ((lv_worker_count >= lv_saturation_count)) {
                TextExpressionSetToken("Param/Expression/lib_1_D9FAEDCE", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(GameGetMissionTime())));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_D9FAEDCE"));
                TriggerExecute(lib1_gt_UT_EconomyValue, true, false);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D2179A9B"));
                SoundPlayForPlayer(SoundLink("Alert_UniObjectiveCompleted", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
                TriggerEnable(TriggerGetCurrent(), false);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_WorkerSaturation_Init () {
    lib1_gt_UT_WorkerSaturation = TriggerCreate("lib1_gt_UT_WorkerSaturation_Func");
    TriggerEnable(lib1_gt_UT_WorkerSaturation, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_WorkerSaturation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListEmotes
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListEmotes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vString;
    string lv_vStyle;

    // Automatic Variable Declarations
    const int auto4FE2F147_ae = 30;
    int auto4FE2F147_var;
    const int auto5374AECA_ae = lib1_gv_uT_MAXEMOTES;
    int auto5374AECA_var;
    const int auto5F3D0DC6_ae = 30;
    int auto5F3D0DC6_var;
    const int auto937FFD3B_ae = lib1_gv_uT_MAXEMOTES;
    int auto937FFD3B_var;

    // Variable Initialization
    lv_vString = "";
    lv_vStyle = "<s val=\"EmoteListNormal\">";

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    lib1_gv_uT_Emote_Dialog = DialogLastCreated();
    DialogSetRenderPriority(DialogLastCreated(), 5000);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 200, 50, c_anchorTopLeft, 50, 50, StringToText(""), "Assets\\Textures\\white.dds", c_triggerImageTypeNormal, true, Color(0,0,0), c_triggerBlendModeNormal);
    DialogControlSetFullDialog(DialogControlLastCreated(), PlayerGroupAll(), true);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, -350, 50, StringExternal("Param/Value/lib_1_DB006650"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    auto4FE2F147_var = 1;
    for ( ; auto4FE2F147_var <= auto4FE2F147_ae; auto4FE2F147_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[auto4FE2F147_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes(("(" + lib1_gv_uT_SC_Emoticons[auto4FE2F147_var] + ")")) + " " + lv_vStyle + "(" + lib1_gv_uT_SC_Emoticons[auto4FE2F147_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -250, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    lv_vString = "</n>";
    auto5374AECA_var = 31;
    for ( ; auto5374AECA_var <= auto5374AECA_ae; auto5374AECA_var += 1 ) {
        if ((lib1_gv_uT_SC_Emoticons[auto5374AECA_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes(("(" + lib1_gv_uT_SC_Emoticons[auto5374AECA_var] + ")")) + " " + lv_vStyle + "(" + lib1_gv_uT_SC_Emoticons[auto5374AECA_var] + ")</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, -500, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 60, c_anchorTop, 250, 50, StringExternal("Param/Value/lib_1_9D606F6D"), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListTitle", PlayerGroupAll());
    lv_vString = "";
    auto5F3D0DC6_var = 1;
    for ( ; auto5F3D0DC6_var <= auto5F3D0DC6_ae; auto5F3D0DC6_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[auto5F3D0DC6_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes((" " + lib1_gv_uT_CS_Emoticons[auto5F3D0DC6_var])) + "  " + lv_vStyle + lib1_gv_uT_CS_Emoticons[auto5F3D0DC6_var] + "</s></n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 300, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    lv_vString = "";
    auto937FFD3B_var = 31;
    for ( ; auto937FFD3B_var <= auto937FFD3B_ae; auto937FFD3B_var += 1 ) {
        if ((lib1_gv_uT_CS_Emoticons[auto937FFD3B_var] != "")) {
            lv_vString = (lv_vString + lib1_gf_UT_ReplaceEmotes((" " + lib1_gv_uT_CS_Emoticons[auto937FFD3B_var])) + "  " + lv_vStyle + lib1_gv_uT_CS_Emoticons[auto937FFD3B_var] + "</s> </n>");
        }

    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 1000, c_anchorTop, 600, 150, StringToText(lv_vString), ColorWithAlpha(0,0,0,0), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "EmoteListBig", PlayerGroupAll());
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 200, 50, c_anchorBottom, 0, 50, StringToText(""), StringExternal("Param/Value/lib_1_B2770361"), "");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ButtonFont", PlayerGroupAll());
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 230, 50);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), "Assets\\Textures\\protoss-border-button-game.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, PlayerGroupAll());
    lib1_gv_uT_Emote_CloseButton = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListEmotes_Init () {
    lib1_gt_UT_ListEmotes = TriggerCreate("lib1_gt_UT_ListEmotes_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListEmotes, c_playerAny, "-emotes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Emote_ButtonClicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Emote_ButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == lib1_gv_uT_Emote_CloseButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(lib1_gv_uT_Emote_Dialog, PlayerGroupSingle(EventPlayer()), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Emote_ButtonClicked_Init () {
    lib1_gt_UT_Emote_ButtonClicked = TriggerCreate("lib1_gt_UT_Emote_ButtonClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_UT_Emote_ButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Upgrade Changed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UpgradeChanged_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_2E734F6C", "A", StringToText(IntToString(EventUpgradeLevelDelta())));
    TextExpressionSetToken("Param/Expression/lib_1_2E734F6C", "B", StringToText((EventUpgradeName())));
    TextExpressionSetToken("Param/Expression/lib_1_2E734F6C", "C", IntToText(EventPlayer()));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_2E734F6C"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UpgradeChanged_Init () {
    lib1_gt_UpgradeChanged = TriggerCreate("lib1_gt_UpgradeChanged_Func");
    TriggerEnable(lib1_gt_UpgradeChanged, false);
    TriggerAddEventUpgradeLevelChanged(lib1_gt_UpgradeChanged, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Debug_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "effect")) {
        TriggerEnable(lib1_gt_EffectUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "behavior")) {
        TriggerEnable(lib1_gt_BehaviorChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "upgrade")) {
        TriggerEnable(lib1_gt_UpgradeChanged, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "ability")) {
        TriggerEnable(lib1_gt_AbilityUsed, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "unit")) {
        TriggerEnable(lib1_gt_UnitCreated, true);
        TriggerEnable(lib1_gt_UnitDied, true);
        TriggerEnable(lib1_gt_UnitRevived, true);
    }
    else if ((StringWord(EventChatMessage(false), 2) == "stop")) {
        TriggerEnable(lib1_gt_UnitCreated, false);
        TriggerEnable(lib1_gt_UnitDied, false);
        TriggerEnable(lib1_gt_UnitRevived, false);
        TriggerEnable(lib1_gt_EffectUsed, false);
        TriggerEnable(lib1_gt_BehaviorChanged, false);
        TriggerEnable(lib1_gt_UpgradeChanged, false);
        TriggerEnable(lib1_gt_AbilityUsed, false);
    }
    else if (true) {
        TriggerEnable(lib1_gt_UnitCreated, true);
        TriggerEnable(lib1_gt_UnitDied, true);
        TriggerEnable(lib1_gt_UnitRevived, true);
        TriggerEnable(lib1_gt_EffectUsed, true);
        TriggerEnable(lib1_gt_BehaviorChanged, true);
        TriggerEnable(lib1_gt_UpgradeChanged, true);
        TriggerEnable(lib1_gt_AbilityUsed, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Debug_Init () {
    lib1_gt_UT_Debug = TriggerCreate("lib1_gt_UT_Debug_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Debug, c_playerAny, "-debug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ability Used
//--------------------------------------------------------------------------------------------------
bool lib1_gt_AbilityUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("move", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("attack", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("stop", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("SCVHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("DroneHarvest", 1)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("ProbeHarvest", 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_CAFF1908", "A", StringToText((AbilityCommandGetAbility(EventUnitAbility()))));
    TextExpressionSetToken("Param/Expression/lib_1_CAFF1908", "B", StringToText(lib1_gf_UT_StageToString(EventUnitAbilityStage())));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_CAFF1908"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_AbilityUsed_Init () {
    lib1_gt_AbilityUsed = TriggerCreate("lib1_gt_AbilityUsed_Func");
    TriggerEnable(lib1_gt_AbilityUsed, false);
    TriggerAddEventUnitAbility(lib1_gt_AbilityUsed, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitCreatedUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_54ECD22B", "C", StringToText((UnitGetType(EventUnitCreatedUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_54ECD22B", "D", IntToText(UnitGetOwner(EventUnitCreatedUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_54ECD22B", "A", FixedToText(PointGetX(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_54ECD22B", "B", FixedToText(PointGetY(UnitGetPosition(EventUnitCreatedUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_54ECD22B"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitCreated_Init () {
    lib1_gt_UnitCreated = TriggerCreate("lib1_gt_UnitCreated_Func");
    TriggerEnable(lib1_gt_UnitCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_UnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Died
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitDied_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_541A2EC4", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_541A2EC4", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_541A2EC4", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_541A2EC4", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_541A2EC4"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitDied_Init () {
    lib1_gt_UnitDied = TriggerCreate("lib1_gt_UnitDied_Func");
    TriggerEnable(lib1_gt_UnitDied, false);
    TriggerAddEventUnitDied(lib1_gt_UnitDied, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Revived
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UnitRevived_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_A7377775", "C", StringToText((UnitGetType(EventUnit()))));
    TextExpressionSetToken("Param/Expression/lib_1_A7377775", "D", IntToText(UnitGetOwner(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_A7377775", "A", FixedToText(PointGetX(UnitGetPosition(EventUnit())), 1));
    TextExpressionSetToken("Param/Expression/lib_1_A7377775", "B", FixedToText(PointGetY(UnitGetPosition(EventUnit())), 1));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_A7377775"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UnitRevived_Init () {
    lib1_gt_UnitRevived = TriggerCreate("lib1_gt_UnitRevived_Func");
    TriggerEnable(lib1_gt_UnitRevived, false);
    TriggerAddEventUnitRevive(lib1_gt_UnitRevived, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Used
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectUsed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_1A6AD2B3", "A", StringToText((EventPlayerEffectUsed())));
        TextExpressionSetToken("Param/Expression/lib_1_1A6AD2B3", "B", FixedToText(EventPlayerEffectUsedAmountFixed(c_effectAmountDamaged, false), 1));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_1A6AD2B3"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_17B3DA3C", "A", StringToText((EventPlayerEffectUsed())));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_17B3DA3C"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectUsed_Init () {
    lib1_gt_EffectUsed = TriggerCreate("lib1_gt_EffectUsed_Func");
    TriggerEnable(lib1_gt_EffectUsed, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_EffectUsed, 1, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Behavior Changed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_BehaviorChanged_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vChange;

    // Automatic Variable Declarations
    int auto66DBD28E_val;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryMineralFieldMinerals"))) {
            return false;
        }

        if (!((EventUnitBehavior() != "CarryHarvestableVespeneGeyserGas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto66DBD28E_val = EventUnitBehaviorChange();
    if (auto66DBD28E_val == c_unitBehaviorChangeRefresh) {
        lv_vChange = StringExternal("Param/Value/lib_1_AE184DAD");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeIncrease) {
        lv_vChange = StringExternal("Param/Value/lib_1_EF7FA2FB");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeDestroy) {
        lv_vChange = StringExternal("Param/Value/lib_1_C190B91C");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeDecrease) {
        lv_vChange = StringExternal("Param/Value/lib_1_B16198B6");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeDeactivate) {
        lv_vChange = StringExternal("Param/Value/lib_1_53ECD43A");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeCreate) {
        lv_vChange = StringExternal("Param/Value/lib_1_2A657ACB");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeAny) {
        lv_vChange = StringExternal("Param/Value/lib_1_B780F17D");
    }
    else if (auto66DBD28E_val == c_unitBehaviorChangeActivate) {
        lv_vChange = StringExternal("Param/Value/lib_1_50ABB27D");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_1_733A1341", "A", lv_vChange);
    TextExpressionSetToken("Param/Expression/lib_1_733A1341", "B", StringToText((EventUnitBehavior())));
    TextExpressionSetToken("Param/Expression/lib_1_733A1341", "C", StringToText((UnitGetType(EventUnit()))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_733A1341"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_BehaviorChanged_Init () {
    lib1_gt_BehaviorChanged = TriggerCreate("lib1_gt_BehaviorChanged_Func");
    TriggerEnable(lib1_gt_BehaviorChanged, false);
    TriggerAddEventUnitBehaviorChange(lib1_gt_BehaviorChanged, null, null, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect Dealing Damage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_EffectDealingDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_94EDCF4D", "A", StringToText((EventUnitDamageEffect())));
    TextExpressionSetToken("Param/Expression/lib_1_94EDCF4D", "B", FixedToText(EventUnitDamageAttempted(), 1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_94EDCF4D"));
    TextExpressionSetToken("Param/Expression/lib_1_793ECA30", "A", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsHidden(EventUnit())));
    TextExpressionSetToken("Param/Expression/lib_1_793ECA30", "B", libNtve_gf_ConvertBooleanToText(libNtve_gf_UnitIsInvulnerable(EventUnit())));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_793ECA30"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_EffectDealingDamage_Init () {
    lib1_gt_EffectDealingDamage = TriggerCreate("lib1_gt_EffectDealingDamage_Func");
    TriggerEnable(lib1_gt_EffectDealingDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_EffectDealingDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Trace
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Trace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_Tracing) == true)) {
        TriggerEnable(lib1_gt_UT_Tracing, false);
        TriggerEnable(lib1_gt_UT_DeTracing, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_4F608885"));
    }
    else {
        TriggerEnable(lib1_gt_UT_Tracing, true);
        TriggerEnable(lib1_gt_UT_DeTracing, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_8533152D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Trace_Init () {
    lib1_gt_UT_Trace = TriggerCreate("lib1_gt_UT_Trace_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Trace, c_playerAny, "-trace", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Tracing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Tracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Tracing_Init () {
    lib1_gt_UT_Tracing = TriggerCreate("lib1_gt_UT_Tracing_Func");
    TriggerEnable(lib1_gt_UT_Tracing, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_UT_Tracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DeTracing
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DeTracing_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, EventPlayerEffectUsed(), "DebugTrace", EventPlayer(), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DeTracing_Init () {
    lib1_gt_UT_DeTracing = TriggerCreate("lib1_gt_UT_DeTracing_Func");
    TriggerEnable(lib1_gt_UT_DeTracing, false);
    TriggerAddEventPlayerEffectUsed(lib1_gt_UT_DeTracing, c_playerAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CopyPaste
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CopyPaste_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_CTRLC) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_55DD8059"));
        TriggerEnable(lib1_gt_UT_CTRLC, false);
        TriggerEnable(lib1_gt_UT_CTRLV, false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_06851008"));
        TriggerEnable(lib1_gt_UT_CTRLC, true);
        TriggerEnable(lib1_gt_UT_CTRLV, true);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CopyPaste_Init () {
    lib1_gt_UT_CopyPaste = TriggerCreate("lib1_gt_UT_CopyPaste_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_CopyPaste, c_playerAny, "-copypaste", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+C
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CTRLC_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_vSelectedUnits;
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    unitgroup auto51721B80_g;
    int auto51721B80_u;
    unit auto51721B80_var;
    int auto93F73AAE_ae;
    const int auto93F73AAE_ai = 1;
    int auto53C11C68_ae;
    const int auto53C11C68_ai = 1;
    int autoC9B4EF6A_ae;
    const int autoC9B4EF6A_ai = 1;

    // Variable Initialization
    lv_vSelectedUnits = UnitGroupSelected(EventPlayer());
    lv_vCenter = UnitGroupCenterOfGroup(UnitGroupSelected(1));

    // Actions
    if (!runActions) {
        return true;
    }

    auto51721B80_g = lv_vSelectedUnits;
    auto51721B80_u = UnitGroupCount(auto51721B80_g, c_unitCountAll);
    for (;; auto51721B80_u -= 1) {
        auto51721B80_var = UnitGroupUnitFromEnd(auto51721B80_g, auto51721B80_u);
        if (auto51721B80_var == null) { break; }
        lv_vA += 1;
        DataTableSetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)), (UnitGetType(auto51721B80_var)));
        DataTableSetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA)), UnitGetOwner(auto51721B80_var));
        DataTableSetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA)), UnitGetFacing(auto51721B80_var));
        DataTableSetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)), AngleBetweenPoints(lv_vCenter, UnitGetPosition(auto51721B80_var)));
        DataTableSetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA)), DistanceBetweenPoints(UnitGetPosition(auto51721B80_var), lv_vCenter));
        DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropLife, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropLifeMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropEnergy, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropEnergyMax, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropShields, c_unitPropCurrent));
        DataTableSetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA)), UnitGetPropertyFixed(auto51721B80_var, c_unitPropShieldsMax, c_unitPropCurrent));
        DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)), UnitBehaviorCountAll(auto51721B80_var));
        auto93F73AAE_ae = UnitBehaviorCountAll(auto51721B80_var);
        lv_vB = 0;
        for ( ; ( (auto93F73AAE_ai >= 0 && lv_vB <= auto93F73AAE_ae) || (auto93F73AAE_ai < 0 && lv_vB >= auto93F73AAE_ae) ) ; lv_vB += auto93F73AAE_ai ) {
            DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitBehaviorGet(auto51721B80_var, lv_vB)));
            DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s"), UnitBehaviorCount(auto51721B80_var, UnitBehaviorGet(auto51721B80_var, lv_vB)));
        }
        DataTableSetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)), UnitCargoValue(auto51721B80_var, c_unitCargoUnitCount));
        auto53C11C68_ae = UnitCargoValue(auto51721B80_var, c_unitCargoUnitCount);
        lv_vB = 0;
        for ( ; ( (auto53C11C68_ai >= 0 && lv_vB <= auto53C11C68_ae) || (auto53C11C68_ai < 0 && lv_vB >= auto53C11C68_ae) ) ; lv_vB += auto53C11C68_ai ) {
            DataTableSetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), (UnitGetType(UnitCargo(auto51721B80_var, lv_vB))));
            DataTableSetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitBehaviorCountAll(UnitCargo(auto51721B80_var, lv_vB)));
            DataTableSetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)), UnitGetPropertyFixed(UnitCargo(auto51721B80_var, lv_vB), c_unitPropLifePercent, c_unitPropCurrent));
            autoC9B4EF6A_ae = UnitBehaviorCountAll(UnitCargo(auto51721B80_var, lv_vB));
            lv_vC = 0;
            for ( ; ( (autoC9B4EF6A_ai >= 0 && lv_vC <= autoC9B4EF6A_ae) || (autoC9B4EF6A_ai < 0 && lv_vC >= autoC9B4EF6A_ae) ) ; lv_vC += autoC9B4EF6A_ai ) {
                DataTableSetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)), (UnitBehaviorGet(UnitCargo(auto51721B80_var, lv_vB), lv_vC)));
                DataTableSetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s"), UnitBehaviorCount(UnitCargo(auto51721B80_var, lv_vB), UnitBehaviorGet(UnitCargo(auto51721B80_var, lv_vB), lv_vC)));
            }
        }
    }
    DataTableSetInt(true, ("CopyPaste_UnitCount"), lv_vA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CTRLC_Init () {
    lib1_gt_UT_CTRLC = TriggerCreate("lib1_gt_UT_CTRLC_Func");
    TriggerEnable(lib1_gt_UT_CTRLC, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_CTRLC, c_playerAny, c_keyC, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_CTRL+V
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_CTRLV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_vCenter;
    int lv_vA;
    int lv_vB;
    int lv_vC;

    // Automatic Variable Declarations
    int auto4C61C820_ae;
    int auto4C61C820_var;
    int autoAA102296_ae;
    const int autoAA102296_ai = 1;
    int autoB1C8A847_ae;
    const int autoB1C8A847_ai = 1;
    int auto75168983_ae;
    const int auto75168983_ai = 1;

    // Variable Initialization
    lv_vCenter = CameraGetTarget(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    auto4C61C820_ae = DataTableGetInt(true, "CopyPaste_UnitCount");
    auto4C61C820_var = 1;
    for ( ; auto4C61C820_var <= auto4C61C820_ae; auto4C61C820_var += 1 ) {
        lv_vA += 1;
        UnitCreate(1, UnitTypeFromString(DataTableGetString(true, ("CopyPaste_UnitType_" + IntToString(lv_vA)))), 0, DataTableGetInt(true, ("CopyPaste_Owner_" + IntToString(lv_vA))), PointWithOffsetPolar(lv_vCenter, DataTableGetFixed(true, ("CopyPaste_PositionDistance_" + IntToString(lv_vA))), DataTableGetFixed(true, ("CopyPaste_PositionAngle_" + IntToString(lv_vA)))), DataTableGetFixed(true, ("CopyPaste_Facing_" + IntToString(lv_vA))));
        autoAA102296_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA)));
        lv_vB = 0;
        for ( ; ( (autoAA102296_ai >= 0 && lv_vB <= autoAA102296_ae) || (autoAA102296_ai < 0 && lv_vB >= autoAA102296_ae) ) ; lv_vB += autoAA102296_ai ) {
            UnitBehaviorAddPlayer(UnitLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), UnitGetOwner(UnitLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_s")));
        }
        autoB1C8A847_ae = DataTableGetInt(true, ("CopyPaste_CargoCount_" + IntToString(lv_vA)));
        lv_vB = 1;
        for ( ; ( (autoB1C8A847_ai >= 0 && lv_vB <= autoB1C8A847_ae) || (autoB1C8A847_ai < 0 && lv_vB >= autoB1C8A847_ae) ) ; lv_vB += autoB1C8A847_ai ) {
            UnitCargoCreate(UnitLastCreated(), UnitTypeFromString(DataTableGetString(true, ("CopyPaste_CargoUnit_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)))), 1);
            auto75168983_ae = DataTableGetInt(true, ("CopyPaste_BehCount_" + IntToString(lv_vA) + "_" + IntToString(lv_vB)));
            lv_vC = 0;
            for ( ; ( (auto75168983_ai >= 0 && lv_vC <= auto75168983_ae) || (auto75168983_ai < 0 && lv_vC >= auto75168983_ae) ) ; lv_vC += auto75168983_ai ) {
                UnitBehaviorAddPlayer(UnitCargoLastCreated(), (DataTableGetString(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC)))), UnitGetOwner(UnitCargoLastCreated()), DataTableGetInt(true, ("CopyPaste_Beh_" + IntToString(lv_vA) + "_" + IntToString(lv_vB) + "_" + IntToString(lv_vC) + "_s")));
            }
            UnitSetPropertyFixed(UnitCargoLastCreated(), c_unitPropLifePercent, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA) + "_" + IntToString(lv_vB))));
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, DataTableGetFixed(true, ("CopyPaste_Life_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, DataTableGetFixed(true, ("CopyPaste_MaxLife_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, DataTableGetFixed(true, ("CopyPaste_Shields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsMax, DataTableGetFixed(true, ("CopyPaste_MaxShields_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, DataTableGetFixed(true, ("CopyPaste_Energy_" + IntToString(lv_vA))));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergyMax, DataTableGetFixed(true, ("CopyPaste_MaxEnergy_" + IntToString(lv_vA))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_CTRLV_Init () {
    lib1_gt_UT_CTRLV = TriggerCreate("lib1_gt_UT_CTRLV_Func");
    TriggerEnable(lib1_gt_UT_CTRLV, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_CTRLV, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateRequire, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheck
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PathCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_PathCheckTAB) == false)) {
        TriggerEnable(lib1_gt_UT_PathCheckTAB, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_40896ACF"));
    }
    else {
        TriggerEnable(lib1_gt_UT_PathCheckTAB, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D9AC74FF"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PathCheck_Init () {
    lib1_gt_UT_PathCheck = TriggerCreate("lib1_gt_UT_PathCheck_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_PathCheck, c_playerAny, "-pathcheck", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_PathCheckTAB
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PathCheckTAB_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vUnit;
    point lv_vPoint;
    bool lv_vPointsConnectedByPathing;
    int lv_vPathingCostBetweenPoints;
    bool lv_vUnitCanPathToPoint11000;
    bool lv_vPointIsPassable;
    fixed lv_vPathingCostBetweenPointsReal;
    fixed lv_vAIPathingCostUnit;
    int lv_vGround;
    text lv_vGroundType;

    // Automatic Variable Declarations
    int auto68E5CF8B_val;

    // Variable Initialization
    lv_vUnit = UnitGroupRandomUnit(UnitGroupSelected(EventPlayer()), c_unitCountAlive);
    lv_vPoint = CameraGetTarget(EventPlayer());
    lv_vPointsConnectedByPathing = PointPathingIsConnected(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vPathingCostBetweenPoints = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vUnitCanPathToPoint11000 = UnitPathableToPoint(lv_vUnit, lv_vPoint, 1.0, 1000.0);
    lv_vPointIsPassable = PointPathingPassable(lv_vPoint);
    lv_vPathingCostBetweenPointsReal = PointPathingCost(UnitGetPosition(lv_vUnit), lv_vPoint);
    lv_vAIPathingCostUnit = AIPathingCostUnit(lv_vUnit, lv_vPoint, c_includeAllBuildings);
    lv_vGround = PathingType(lv_vPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    auto68E5CF8B_val = lv_vGround;
    if (auto68E5CF8B_val == c_pathingGround) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_74C64055");
    }
    else if (auto68E5CF8B_val == c_pathingCliff) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_E018B77E");
    }
    else if (auto68E5CF8B_val == c_pathingBuilding) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_9FA5E105");
    }
    else if (auto68E5CF8B_val == c_pathingUnpathable) {
        lv_vGroundType = StringExternal("Param/Value/lib_1_8AAEB775");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "B", IntToText(lv_vPathingCostBetweenPoints));
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "C", libNtve_gf_ConvertBooleanToText(lv_vUnitCanPathToPoint11000));
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "G", FixedToText(lv_vAIPathingCostUnit, c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "A", libNtve_gf_ConvertBooleanToText(lv_vPointsConnectedByPathing));
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "E", libNtve_gf_ConvertBooleanToText(lv_vPointIsPassable));
    TextExpressionSetToken("Param/Expression/lib_1_483D28C2", "D", lv_vGroundType);
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_483D28C2"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PathCheckTAB_Init () {
    lib1_gt_UT_PathCheckTAB = TriggerCreate("lib1_gt_UT_PathCheckTAB_Func");
    TriggerEnable(lib1_gt_UT_PathCheckTAB, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_PathCheckTAB, c_playerAny, c_keyTab, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Light
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Light_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(lib1_gt_UT_Plus) == false)) {
        TriggerEnable(lib1_gt_UT_Plus, true);
        TriggerEnable(lib1_gt_UT_Minus, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_B78FE1F5"));
        GameSetSpeedLocked(true);
    }
    else {
        TriggerEnable(lib1_gt_UT_Plus, false);
        TriggerEnable(lib1_gt_UT_Minus, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9C9B8206"));
        GameSetSpeedLocked(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Light_Init () {
    lib1_gt_UT_Light = TriggerCreate("lib1_gt_UT_Light_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Light, c_playerAny, "-light", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Plus
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Plus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_LighIndex += 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Plus_Init () {
    lib1_gt_UT_Plus = TriggerCreate("lib1_gt_UT_Plus_Func");
    TriggerEnable(lib1_gt_UT_Plus, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Plus, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Minus
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Minus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_LighIndex -= 1;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText((((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))))));
    GameSetLighting(((CatalogEntryGet(c_gameCatalogLight, lib1_gv_uT_LighIndex))), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Minus_Init () {
    lib1_gt_UT_Minus = TriggerCreate("lib1_gt_UT_Minus_Func");
    TriggerEnable(lib1_gt_UT_Minus, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Minus, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileMovers
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MissileMovers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_mIssilePlayer = EventPlayer();
    CatalogFieldValueSet(c_gameCatalogBehavior, "MissileCoef", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
    UnitGroupAddUnitGroup(lib1_gv_uT_MissileCreators, UnitGroupSelected(EventPlayer()));
    TriggerEnable(lib1_gt_UT_MissileCreated, true);
    if ((StringWord(EventChatMessage(false), 2) == "clear")) {
        UnitGroupClear(lib1_gv_uT_MissileCreators);
        TriggerEnable(lib1_gt_UT_MissileCreated, false);
    }

    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MissileMovers_Init () {
    lib1_gt_UT_MissileMovers = TriggerCreate("lib1_gt_UT_MissileMovers_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_MissileMovers, c_playerAny, "-mm", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_MissileCreated
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MissileCreated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_MissileCreators, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnitCreatedUnit()), c_unitFlagMissile) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAddPlayer(EventUnitCreatedUnit(), "MissileCoef", lib1_gv_mIssilePlayer, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MissileCreated_Init () {
    lib1_gt_UT_MissileCreated = TriggerCreate("lib1_gt_UT_MissileCreated_Func");
    TriggerEnable(lib1_gt_UT_MissileCreated, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_MissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Height
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Height_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto0E6AD4B8_g;
    int auto0E6AD4B8_u;
    unit auto0E6AD4B8_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E6AD4B8_g = UnitGroupSelected(EventPlayer());
    auto0E6AD4B8_u = UnitGroupCount(auto0E6AD4B8_g, c_unitCountAll);
    for (;; auto0E6AD4B8_u -= 1) {
        auto0E6AD4B8_var = UnitGroupUnitFromEnd(auto0E6AD4B8_g, auto0E6AD4B8_u);
        if (auto0E6AD4B8_var == null) { break; }
        UnitSetPropertyFixed(auto0E6AD4B8_var, c_unitPropHeight, StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Height_Init () {
    lib1_gt_UT_Height = TriggerCreate("lib1_gt_UT_Height_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Height, c_playerAny, "-height", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_AttackSpeed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_AttackSpeed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_a;

    // Automatic Variable Declarations
    unitgroup auto46E99AB5_g;
    int auto46E99AB5_u;
    unit auto46E99AB5_var;
    int auto873704DE_ae;
    const int auto873704DE_ai = 1;
    unitgroup auto57B4C42E_g;
    int auto57B4C42E_u;
    unit auto57B4C42E_var;
    int autoB758278C_ae;
    const int autoB758278C_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto57B4C42E_g = UnitGroupSelected(EventPlayer());
        auto57B4C42E_u = UnitGroupCount(auto57B4C42E_g, c_unitCountAll);
        for (;; auto57B4C42E_u -= 1) {
            auto57B4C42E_var = UnitGroupUnitFromEnd(auto57B4C42E_g, auto57B4C42E_u);
            if (auto57B4C42E_var == null) { break; }
            autoB758278C_ae = UnitWeaponCount(auto57B4C42E_var);
            lv_a = 1;
            for ( ; ( (autoB758278C_ai >= 0 && lv_a <= autoB758278C_ae) || (autoB758278C_ai < 0 && lv_a >= autoB758278C_ae) ) ; lv_a += autoB758278C_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto57B4C42E_var, lv_a), "RateMultiplier", UnitGetOwner(auto57B4C42E_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto46E99AB5_g = UnitGroupSelected(EventPlayer());
        auto46E99AB5_u = UnitGroupCount(auto46E99AB5_g, c_unitCountAll);
        for (;; auto46E99AB5_u -= 1) {
            auto46E99AB5_var = UnitGroupUnitFromEnd(auto46E99AB5_g, auto46E99AB5_u);
            if (auto46E99AB5_var == null) { break; }
            auto873704DE_ae = UnitWeaponCount(auto46E99AB5_var);
            lv_a = 1;
            for ( ; ( (auto873704DE_ai >= 0 && lv_a <= auto873704DE_ae) || (auto873704DE_ai < 0 && lv_a >= auto873704DE_ae) ) ; lv_a += auto873704DE_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto46E99AB5_var, lv_a), "RateMultiplier", UnitGetOwner(auto46E99AB5_var), "1", c_upgradeOperationSet);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_AttackSpeed_Init () {
    lib1_gt_UT_AttackSpeed = TriggerCreate("lib1_gt_UT_AttackSpeed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_AttackSpeed, c_playerAny, "-as", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Life
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Life_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto692708C0_g;
    int auto692708C0_u;
    unit auto692708C0_var;
    unitgroup autoD372601C_g;
    int autoD372601C_u;
    unit autoD372601C_var;
    unitgroup auto671408B5_g;
    int auto671408B5_u;
    unit auto671408B5_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto692708C0_g = UnitGroupSelected(EventPlayer());
        auto692708C0_u = UnitGroupCount(auto692708C0_g, c_unitCountAll);
        for (;; auto692708C0_u -= 1) {
            auto692708C0_var = UnitGroupUnitFromEnd(auto692708C0_g, auto692708C0_u);
            if (auto692708C0_var == null) { break; }
            UnitSetPropertyFixed(auto692708C0_var, c_unitPropLifeMax, UnitTypeGetProperty(UnitGetType(auto692708C0_var), c_unitPropLifeMax));
            UnitSetPropertyFixed(auto692708C0_var, c_unitPropShieldsMax, UnitTypeGetProperty(UnitGetType(auto692708C0_var), c_unitPropShieldsMax));
            UnitSetPropertyFixed(auto692708C0_var, c_unitPropLifePercent, 100.0);
            UnitSetPropertyFixed(auto692708C0_var, c_unitPropShieldsPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "2")) {
            autoD372601C_g = UnitGroupSelected(EventPlayer());
            autoD372601C_u = UnitGroupCount(autoD372601C_g, c_unitCountAll);
            for (;; autoD372601C_u -= 1) {
                autoD372601C_var = UnitGroupUnitFromEnd(autoD372601C_g, autoD372601C_u);
                if (autoD372601C_var == null) { break; }
                UnitSetPropertyFixed(autoD372601C_var, c_unitPropShieldsMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(autoD372601C_var, c_unitPropShieldsPercent, 100.0);
            }
        }
        else {
            auto671408B5_g = UnitGroupSelected(EventPlayer());
            auto671408B5_u = UnitGroupCount(auto671408B5_g, c_unitCountAll);
            for (;; auto671408B5_u -= 1) {
                auto671408B5_var = UnitGroupUnitFromEnd(auto671408B5_g, auto671408B5_u);
                if (auto671408B5_var == null) { break; }
                UnitSetPropertyFixed(auto671408B5_var, c_unitPropLifeMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(auto671408B5_var, c_unitPropLifePercent, 100.0);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Life_Init () {
    lib1_gt_UT_Life = TriggerCreate("lib1_gt_UT_Life_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Life, c_playerAny, "-life", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Energy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Energy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoA42391DB_g;
    int autoA42391DB_u;
    unit autoA42391DB_var;
    unitgroup autoAC647AAA_g;
    int autoAC647AAA_u;
    unit autoAC647AAA_var;
    unitgroup autoED496290_g;
    int autoED496290_u;
    unit autoED496290_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoA42391DB_g = UnitGroupSelected(EventPlayer());
        autoA42391DB_u = UnitGroupCount(autoA42391DB_g, c_unitCountAll);
        for (;; autoA42391DB_u -= 1) {
            autoA42391DB_var = UnitGroupUnitFromEnd(autoA42391DB_g, autoA42391DB_u);
            if (autoA42391DB_var == null) { break; }
            UnitSetPropertyFixed(autoA42391DB_var, c_unitPropEnergyMax, UnitTypeGetProperty(UnitGetType(autoA42391DB_var), c_unitPropEnergyMax));
            UnitSetPropertyFixed(autoA42391DB_var, c_unitPropLifeRegen, UnitTypeGetProperty(UnitGetType(autoA42391DB_var), c_unitPropEnergyRegen));
            UnitSetPropertyFixed(autoA42391DB_var, c_unitPropEnergyPercent, 100.0);
        }
    }
    else {
        if ((StringWord(EventChatMessage(false), 3) == "regen")) {
            autoAC647AAA_g = UnitGroupSelected(EventPlayer());
            autoAC647AAA_u = UnitGroupCount(autoAC647AAA_g, c_unitCountAll);
            for (;; autoAC647AAA_u -= 1) {
                autoAC647AAA_var = UnitGroupUnitFromEnd(autoAC647AAA_g, autoAC647AAA_u);
                if (autoAC647AAA_var == null) { break; }
                UnitSetPropertyFixed(autoAC647AAA_var, c_unitPropEnergyRegen, StringToFixed(StringWord(EventChatMessage(false), 2)));
            }
        }
        else {
            autoED496290_g = UnitGroupSelected(EventPlayer());
            autoED496290_u = UnitGroupCount(autoED496290_g, c_unitCountAll);
            for (;; autoED496290_u -= 1) {
                autoED496290_var = UnitGroupUnitFromEnd(autoED496290_g, autoED496290_u);
                if (autoED496290_var == null) { break; }
                UnitSetPropertyFixed(autoED496290_var, c_unitPropEnergyMax, StringToFixed(StringWord(EventChatMessage(false), 2)));
                UnitSetPropertyFixed(autoED496290_var, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Energy_Init () {
    lib1_gt_UT_Energy = TriggerCreate("lib1_gt_UT_Energy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Energy, c_playerAny, "-energy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Movement Speed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_MovementSpeed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4C4A81BE_g;
    int auto4C4A81BE_u;
    unit auto4C4A81BE_var;
    unitgroup autoE40F3463_g;
    int autoE40F3463_u;
    unit autoE40F3463_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        auto4C4A81BE_g = UnitGroupSelected(EventPlayer());
        auto4C4A81BE_u = UnitGroupCount(auto4C4A81BE_g, c_unitCountAll);
        for (;; auto4C4A81BE_u -= 1) {
            auto4C4A81BE_var = UnitGroupUnitFromEnd(auto4C4A81BE_g, auto4C4A81BE_u);
            if (auto4C4A81BE_var == null) { break; }
            UnitSetPropertyFixed(auto4C4A81BE_var, c_unitPropMovementSpeed, UnitTypeGetProperty(UnitGetType(auto4C4A81BE_var), c_unitPropMovementSpeed));
        }
    }
    else {
        autoE40F3463_g = UnitGroupSelected(EventPlayer());
        autoE40F3463_u = UnitGroupCount(autoE40F3463_g, c_unitCountAll);
        for (;; autoE40F3463_u -= 1) {
            autoE40F3463_var = UnitGroupUnitFromEnd(autoE40F3463_g, autoE40F3463_u);
            if (autoE40F3463_var == null) { break; }
            UnitSetPropertyFixed(autoE40F3463_var, c_unitPropMovementSpeed, StringToFixed(StringWord(EventChatMessage(false), 2)));
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_MovementSpeed_Init () {
    lib1_gt_UT_MovementSpeed = TriggerCreate("lib1_gt_UT_MovementSpeed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_MovementSpeed, c_playerAny, "-ms", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Acceleration
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Acceleration_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF06B1D2F_g;
    int autoF06B1D2F_u;
    unit autoF06B1D2F_var;
    unitgroup autoABD998EB_g;
    int autoABD998EB_u;
    unit autoABD998EB_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        autoF06B1D2F_g = UnitGroupSelected(EventPlayer());
        autoF06B1D2F_u = UnitGroupCount(autoF06B1D2F_g, c_unitCountAll);
        for (;; autoF06B1D2F_u -= 1) {
            autoF06B1D2F_var = UnitGroupUnitFromEnd(autoF06B1D2F_g, autoF06B1D2F_u);
            if (autoF06B1D2F_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoF06B1D2F_var), "Acceleration", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoF06B1D2F_var), "Acceleration", 7), c_upgradeOperationSet);
            TextTagCreate(StringToText(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoF06B1D2F_var), "Acceleration", EventPlayer())), 24, UnitGetPosition(autoF06B1D2F_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoF06B1D2F_var, 1.0);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 15.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        }
    }
    else {
        autoABD998EB_g = UnitGroupSelected(EventPlayer());
        autoABD998EB_u = UnitGroupCount(autoABD998EB_g, c_unitCountAll);
        for (;; autoABD998EB_u -= 1) {
            autoABD998EB_var = UnitGroupUnitFromEnd(autoABD998EB_g, autoABD998EB_u);
            if (autoABD998EB_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(autoABD998EB_var), "Acceleration", EventPlayer(), StringWord(EventChatMessage(false), 2));
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Acceleration_Init () {
    lib1_gt_UT_Acceleration = TriggerCreate("lib1_gt_UT_Acceleration_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Acceleration, c_playerAny, "-acc", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Range
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Range_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup auto84A9868D_g;
    int auto84A9868D_u;
    unit auto84A9868D_var;
    int auto00D97E8E_ae;
    const int auto00D97E8E_ai = 1;
    unitgroup autoC8311D3C_g;
    int autoC8311D3C_u;
    unit autoC8311D3C_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        autoC8311D3C_g = UnitGroupSelected(EventPlayer());
        autoC8311D3C_u = UnitGroupCount(autoC8311D3C_g, c_unitCountAll);
        for (;; autoC8311D3C_u -= 1) {
            autoC8311D3C_var = UnitGroupUnitFromEnd(autoC8311D3C_g, autoC8311D3C_u);
            if (autoC8311D3C_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoC8311D3C_var, StringToInt(StringWord(EventChatMessage(false), 3))), "Range", UnitGetOwner(autoC8311D3C_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(autoC8311D3C_var, 1), "Range", UnitGetOwner(autoC8311D3C_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        auto84A9868D_g = UnitGroupSelected(EventPlayer());
        auto84A9868D_u = UnitGroupCount(auto84A9868D_g, c_unitCountAll);
        for (;; auto84A9868D_u -= 1) {
            auto84A9868D_var = UnitGroupUnitFromEnd(auto84A9868D_g, auto84A9868D_u);
            if (auto84A9868D_var == null) { break; }
            auto00D97E8E_ae = UnitWeaponCount(auto84A9868D_var);
            lv_i = 1;
            for ( ; ( (auto00D97E8E_ai >= 0 && lv_i <= auto00D97E8E_ae) || (auto00D97E8E_ai < 0 && lv_i >= auto00D97E8E_ae) ) ; lv_i += auto00D97E8E_ai ) {
                CatalogFieldValueModify(c_gameCatalogWeapon, UnitWeaponGet(auto84A9868D_var, lv_i), "Range", UnitGetOwner(auto84A9868D_var), CatalogFieldValueGet(c_gameCatalogWeapon, UnitWeaponGet(auto84A9868D_var, lv_i), "Range", 7), c_upgradeOperationSet);
            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Range_Init () {
    lib1_gt_UT_Range = TriggerCreate("lib1_gt_UT_Range_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Range, c_playerAny, "-range", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ARange
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ARange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_vAbility;
    string lv_vAbv;

    // Automatic Variable Declarations
    unitgroup auto0C4B91B5_g;
    int auto0C4B91B5_u;
    unit auto0C4B91B5_var;
    unit autoA450AA92_unit;
    int autoA450AA92_i;
    unitgroup auto78946426_g;
    int auto78946426_u;
    unit auto78946426_var;
    unit autoDF77616F_unit;
    int autoDF77616F_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto0C4B91B5_g = UnitGroupSelected(EventPlayer());
        auto0C4B91B5_u = UnitGroupCount(auto0C4B91B5_g, c_unitCountAll);
        for (;; auto0C4B91B5_u -= 1) {
            auto0C4B91B5_var = UnitGroupUnitFromEnd(auto0C4B91B5_g, auto0C4B91B5_u);
            if (auto0C4B91B5_var == null) { break; }
            autoA450AA92_unit = auto0C4B91B5_var;
            autoA450AA92_i = 1;
            for ( ; autoA450AA92_i <= UnitAbilityCount(autoA450AA92_unit) ; autoA450AA92_i += 1 ) {
                lv_vAbility = UnitAbilityGet(autoA450AA92_unit, autoA450AA92_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto0C4B91B5_var), StringWord(EventChatMessage(false), 2));
                    TextExpressionSetToken("Param/Expression/lib_1_B5FDF173", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_1_B5FDF173", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_B5FDF173"), true);
                }

            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_136D91C0"));
        auto78946426_g = UnitGroupSelected(EventPlayer());
        auto78946426_u = UnitGroupCount(auto78946426_g, c_unitCountAll);
        for (;; auto78946426_u -= 1) {
            auto78946426_var = UnitGroupUnitFromEnd(auto78946426_g, auto78946426_u);
            if (auto78946426_var == null) { break; }
            autoDF77616F_unit = auto78946426_var;
            autoDF77616F_i = 1;
            for ( ; autoDF77616F_i <= UnitAbilityCount(autoDF77616F_unit) ; autoDF77616F_i += 1 ) {
                lv_vAbility = UnitAbilityGet(autoDF77616F_unit, autoDF77616F_i);
                if ((AbilityClass(lv_vAbility) != c_classIdCAbilAttack) && (AbilityClass(lv_vAbility) != c_classIdCAbilMove) && (AbilityClass(lv_vAbility) != c_classIdCAbilStop) && (AbilityClass(lv_vAbility) != c_classIdCAbilMorph) && (AbilityClass(lv_vAbility) != c_classIdCAbilRally)) {
                    lv_vAbv = (lv_vAbility);
                    CatalogFieldValueSet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", UnitGetOwner(auto78946426_var), CatalogFieldValueGet(c_gameCatalogAbil, lv_vAbv, "Range[" + IntToString(0) + "]", 0));
                    TextExpressionSetToken("Param/Expression/lib_1_33E6B4EB", "A", StringToText((lv_vAbility)));
                    TextExpressionSetToken("Param/Expression/lib_1_33E6B4EB", "C", StringToText(StringWord(EventChatMessage(false), 2)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_33E6B4EB"), false);
                }

            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ARange_Init () {
    lib1_gt_UT_ARange = TriggerCreate("lib1_gt_UT_ARange_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ARange, c_playerAny, "-arange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Armor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Armor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoEE92B332_g;
    int autoEE92B332_u;
    unit autoEE92B332_var;
    unitgroup auto00A156F4_g;
    int auto00A156F4_u;
    unit auto00A156F4_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        auto00A156F4_g = UnitGroupSelected(EventPlayer());
        auto00A156F4_u = UnitGroupCount(auto00A156F4_g, c_unitCountAll);
        for (;; auto00A156F4_u -= 1) {
            auto00A156F4_var = UnitGroupUnitFromEnd(auto00A156F4_g, auto00A156F4_u);
            if (auto00A156F4_var == null) { break; }
            if ((StringWord(EventChatMessage(false), 3) != null)) {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto00A156F4_var), "ShieldArmor", UnitGetOwner(auto00A156F4_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(auto00A156F4_var), "LifeArmor", UnitGetOwner(auto00A156F4_var), StringWord(EventChatMessage(false), 2), c_upgradeOperationSet);
            }
        }
    }
    else {
        autoEE92B332_g = UnitGroupSelected(EventPlayer());
        autoEE92B332_u = UnitGroupCount(autoEE92B332_g, c_unitCountAll);
        for (;; autoEE92B332_u -= 1) {
            autoEE92B332_var = UnitGroupUnitFromEnd(autoEE92B332_g, autoEE92B332_u);
            if (autoEE92B332_var == null) { break; }
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoEE92B332_var), "LifeArmor", UnitGetOwner(autoEE92B332_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoEE92B332_var), "LifeArmor", 7), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(autoEE92B332_var), "ShieldArmor", UnitGetOwner(autoEE92B332_var), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(autoEE92B332_var), "ShieldArmor", 7), c_upgradeOperationSet);
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Armor_Init () {
    lib1_gt_UT_Armor = TriggerCreate("lib1_gt_UT_Armor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Armor, c_playerAny, "-armor", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TintColor
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_TintColor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoE27621BF_g;
    int autoE27621BF_u;
    unit autoE27621BF_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE27621BF_g = UnitGroupSelected(EventPlayer());
    autoE27621BF_u = UnitGroupCount(autoE27621BF_g, c_unitCountAll);
    for (;; autoE27621BF_u -= 1) {
        autoE27621BF_var = UnitGroupUnitFromEnd(autoE27621BF_g, autoE27621BF_u);
        if (autoE27621BF_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(autoE27621BF_var, (("SetTintColor " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_TintColor_Init () {
    lib1_gt_UT_TintColor = TriggerCreate("lib1_gt_UT_TintColor_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_TintColor, c_playerAny, "-tint", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Scale
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Scale_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto97388903_g;
    int auto97388903_u;
    unit auto97388903_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto97388903_g = UnitGroupSelected(EventPlayer());
    auto97388903_u = UnitGroupCount(auto97388903_g, c_unitCountAll);
    for (;; auto97388903_u -= 1) {
        auto97388903_var = UnitGroupUnitFromEnd(auto97388903_g, auto97388903_u);
        if (auto97388903_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto97388903_var, (("SetScale " + StringWord(EventChatMessage(false), 2))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Scale_Init () {
    lib1_gt_UT_Scale = TriggerCreate("lib1_gt_UT_Scale_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Scale, c_playerAny, "-scale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_TimeScale
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_TimeScale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vAmount;

    // Automatic Variable Declarations
    unitgroup autoEBEB7EC6_g;
    int autoEBEB7EC6_u;
    unit autoEBEB7EC6_var;

    // Variable Initialization
    lv_vAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vAmount >= 0.01)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "TimeScaleIncreased", "Modification.TimeScale", EventPlayer(), StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_1_897B2B85", "A", FixedToText(lv_vAmount, 2));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_897B2B85"));
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_A3BB8555", "A", StringExternal("Param/Value/lib_1_BC66C957"));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_A3BB8555"));
    }
    autoEBEB7EC6_g = UnitGroupSelected(EventPlayer());
    autoEBEB7EC6_u = UnitGroupCount(autoEBEB7EC6_g, c_unitCountAll);
    for (;; autoEBEB7EC6_u -= 1) {
        autoEBEB7EC6_var = UnitGroupUnitFromEnd(autoEBEB7EC6_g, autoEBEB7EC6_u);
        if (autoEBEB7EC6_var == null) { break; }
        UnitBehaviorAddPlayer(autoEBEB7EC6_var, "TimeScaleIncreased", EventPlayer(), 1);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_TimeScale_Init () {
    lib1_gt_UT_TimeScale = TriggerCreate("lib1_gt_UT_TimeScale_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_TimeScale, c_playerAny, "-timescale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ActorMsg
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ActorMsg_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto552925BE_g;
    int auto552925BE_u;
    unit auto552925BE_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto552925BE_g = UnitGroupSelected(EventPlayer());
    auto552925BE_u = UnitGroupCount(auto552925BE_g, c_unitCountAll);
    for (;; auto552925BE_u -= 1) {
        auto552925BE_var = UnitGroupUnitFromEnd(auto552925BE_g, auto552925BE_u);
        if (auto552925BE_var == null) { break; }
        libNtve_gf_SendActorMessageToUnit(auto552925BE_var, (StringSub(EventChatMessage(false), (StringLength(StringWord(EventChatMessage(false), 1))+1), StringLength(EventChatMessage(false)))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ActorMsg_Init () {
    lib1_gt_UT_ActorMsg = TriggerCreate("lib1_gt_UT_ActorMsg_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ActorMsg, c_playerAny, "-actorsend", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Air & Ground
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_AirGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto576BCDAE_g;
    int auto576BCDAE_u;
    unit auto576BCDAE_var;
    unitgroup auto1DE129C3_g;
    int auto1DE129C3_u;
    unit auto1DE129C3_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(false) == "-airbeh")) {
        auto1DE129C3_g = UnitGroupSelected(EventPlayer());
        auto1DE129C3_u = UnitGroupCount(auto1DE129C3_g, c_unitCountAll);
        for (;; auto1DE129C3_u -= 1) {
            auto1DE129C3_var = UnitGroupUnitFromEnd(auto1DE129C3_g, auto1DE129C3_u);
            if (auto1DE129C3_var == null) { break; }
            if ((UnitBehaviorCount(auto1DE129C3_var, "GroundBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto1DE129C3_var, "GroundBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(auto1DE129C3_var, "AirBeh", EventPlayer(), 1);
        }
    }
    else {
        auto576BCDAE_g = UnitGroupSelected(EventPlayer());
        auto576BCDAE_u = UnitGroupCount(auto576BCDAE_g, c_unitCountAll);
        for (;; auto576BCDAE_u -= 1) {
            auto576BCDAE_var = UnitGroupUnitFromEnd(auto576BCDAE_g, auto576BCDAE_u);
            if (auto576BCDAE_var == null) { break; }
            if ((UnitBehaviorCount(auto576BCDAE_var, "AirBeh") > 0)) {
                UnitBehaviorRemovePlayer(auto576BCDAE_var, "AirBeh", EventPlayer(), 1);
            }

            UnitBehaviorAddPlayer(auto576BCDAE_var, "GroundBeh", EventPlayer(), 1);
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_AirGround_Init () {
    lib1_gt_UT_AirGround = TriggerCreate("lib1_gt_UT_AirGround_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_AirGround, c_playerAny, "-airbeh", false);
    TriggerAddEventChatMessage(lib1_gt_UT_AirGround, c_playerAny, "-groundbeh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_TurnOnOff
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_TurnOnOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_Camera_CameraActive == false)) {
        lib1_gv_uT_Camera_CameraActive = true;
        TriggerExecute(lib1_gt_UT_Camera_PeriodicUpdate, true, false);
        TriggerEnable(lib1_gt_UT_Camera_KeyDown, true);
        TriggerEnable(lib1_gt_UT_Camera_KeyUp, true);
        UnitClearSelection(EventPlayer());
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_B9A9C00F"));
    }
    else {
        lib1_gv_uT_Camera_CameraActive = false;
        TriggerEnable(lib1_gt_UT_Camera_KeyDown, false);
        TriggerEnable(lib1_gt_UT_Camera_KeyUp, false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E7BC3401"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_TurnOnOff_Init () {
    lib1_gt_UT_Camera_TurnOnOff = TriggerCreate("lib1_gt_UT_Camera_TurnOnOff_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_TurnOnOff, c_playerAny, "-cam", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Reset
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_Reset_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetValue(EventPlayer(), c_cameraValueYaw, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDepthOfField), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueRoll), 1.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, CameraInfoGetValue(CameraInfoDefault(), c_cameraValueFieldOfView), 1.0, -1, 10.0);
    lib1_gv_uT_Camera_AngleofAttack[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValuePitch);
    lib1_gv_uT_Camera_Rotation[EventPlayer()] = CameraInfoGetValue(CameraInfoDefault(), c_cameraValueYaw);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_12C3060A"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_Reset_Init () {
    lib1_gt_UT_Camera_Reset = TriggerCreate("lib1_gt_UT_Camera_Reset_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_Reset, c_playerAny, "-cam reset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Top
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_Top_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraPan(EventPlayer(), RegionGetCenter(RegionPlayableMap()), 2.0, -1, 10.0, false);
    CameraSetValue(EventPlayer(), c_cameraValueFieldOfView, 45.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueRoll, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDepthOfField, 0.0, 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValueDistance, (libNtve_gf_WidthOfRegion(RegionPlayableMap()) * 1.5), 2.0, -1, 10.0);
    CameraSetValue(EventPlayer(), c_cameraValuePitch, 90.0, 2.0, -1, 10.0);
    lib1_gv_uT_Camera_AngleofAttack[EventPlayer()] = 90.0;
    CameraSetValue(EventPlayer(), c_cameraValueYaw, 90.0, 2.0, -1, 10.0);
    lib1_gv_uT_Camera_Rotation[EventPlayer()] = 90.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_Top_Init () {
    lib1_gt_UT_Camera_Top = TriggerCreate("lib1_gt_UT_Camera_Top_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Camera_Top, c_playerAny, "-cam top", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Up
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_KeyUp_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto47675C30_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto47675C30_val = EventKeyPressed();
    if (auto47675C30_val == c_keyQ) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][EventPlayer()] = false;
    }
    else if (auto47675C30_val == c_keyE) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][EventPlayer()] = false;
    }
    else if (auto47675C30_val == c_keyW) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][EventPlayer()] = false;
    }
    else if (auto47675C30_val == c_keyS) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][EventPlayer()] = false;
    }
    else if (auto47675C30_val == c_keyA) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][EventPlayer()] = false;
    }
    else if (auto47675C30_val == c_keyD) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][EventPlayer()] = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_KeyUp_Init () {
    lib1_gt_UT_Camera_KeyUp = TriggerCreate("lib1_gt_UT_Camera_KeyUp_Func");
    TriggerEnable(lib1_gt_UT_Camera_KeyUp, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Camera_KeyUp, c_playerAny, c_keyNone, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_Key Down
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_KeyDown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoE71D4531_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoE71D4531_val = EventKeyPressed();
    if (autoE71D4531_val == c_keyQ) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][EventPlayer()] = true;
    }
    else if (autoE71D4531_val == c_keyE) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][EventPlayer()] = true;
    }
    else if (autoE71D4531_val == c_keyW) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][EventPlayer()] = true;
    }
    else if (autoE71D4531_val == c_keyS) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][EventPlayer()] = true;
    }
    else if (autoE71D4531_val == c_keyA) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][EventPlayer()] = true;
    }
    else if (autoE71D4531_val == c_keyD) {
        lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][EventPlayer()] = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_KeyDown_Init () {
    lib1_gt_UT_Camera_KeyDown = TriggerCreate("lib1_gt_UT_Camera_KeyDown_Func");
    TriggerEnable(lib1_gt_UT_Camera_KeyDown, false);
    TriggerAddEventKeyPressed(lib1_gt_UT_Camera_KeyDown, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Camera_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Camera_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vDuration;
    fixed lv_vDistanceStep;
    fixed lv_vBaseDistanceStep;
    fixed lv_vAngleStep;
    fixed lv_vRotationStep;
    int lv_vPlayer;

    // Automatic Variable Declarations
    const int auto37503225_ae = 2;
    const int auto37503225_ai = 1;

    // Variable Initialization
    lv_vDuration = 0.5;
    lv_vDistanceStep = 6.0;
    lv_vBaseDistanceStep = 8.0;
    lv_vAngleStep = 0.5;
    lv_vRotationStep = 1.5;
    lv_vPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lib1_gv_uT_Camera_CameraActive == true)) {
        lv_vPlayer = 1;
        for ( ; ( (auto37503225_ai >= 0 && lv_vPlayer <= auto37503225_ae) || (auto37503225_ai < 0 && lv_vPlayer >= auto37503225_ae) ) ; lv_vPlayer += auto37503225_ai ) {
            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_Q)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) - lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_E)][lv_vPlayer] == true)) {
                if ((CameraGetDistance(lv_vPlayer) >= 60.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 2.0);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                if ((CameraGetDistance(lv_vPlayer) <= 20.0)) {
                    lv_vDistanceStep = (lv_vBaseDistanceStep * 0.33);
                }
                else {
                    lv_vDistanceStep = lv_vBaseDistanceStep;
                }
                CameraSetValue(lv_vPlayer, c_cameraValueDistance, (CameraGetDistance(lv_vPlayer) + lv_vDistanceStep), lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_W)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] += lv_vAngleStep;
                if ((lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] > 90.0)) {
                    lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] = 90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_S)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] -= lv_vAngleStep;
                if ((lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] < -90.0)) {
                    lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer] = -90.0;
                }

                CameraSetValue(lv_vPlayer, c_cameraValuePitch, lib1_gv_uT_Camera_AngleofAttack[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_A)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_Rotation[lv_vPlayer] -= lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, lib1_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

            if ((lib1_gv_uT_Camera_ActiveKeys[(lib1_ge_UT_Camera_Keys_D)][lv_vPlayer] == true)) {
                lib1_gv_uT_Camera_Rotation[lv_vPlayer] += lv_vRotationStep;
                CameraSetValue(lv_vPlayer, c_cameraValueYaw, lib1_gv_uT_Camera_Rotation[lv_vPlayer], lv_vDuration, -1, 10.0);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Camera_PeriodicUpdate_Init () {
    lib1_gt_UT_Camera_PeriodicUpdate = TriggerCreate("lib1_gt_UT_Camera_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Dummy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Dummy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    string auto33D55A0E_val;
    const int auto23AE9E70_ae = 20;
    int auto23AE9E70_var;

    // Variable Initialization
    lv_vPlayer = 3;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto33D55A0E_val = StringWord(EventChatMessage(false), 2);
    if (auto33D55A0E_val == "armored") {
        UnitCreate(1, "DummyArmored", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto33D55A0E_val == "light") {
        UnitCreate(1, "DummyLight", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else if (auto33D55A0E_val == "structure") {
        UnitCreate(1, "DummyStructure", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    else {
        UnitCreate(1, "Dummy", 0, lv_vPlayer, CameraGetTarget(EventPlayer()), 240.0);
    }
    TextTagCreate(StringExternal("Param/Value/lib_1_82CC4C4A"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, PlayerGroupAll());
    TextTagAttachToUnit(TextTagLastCreated(), UnitLastCreated(), 1.0);
    TextTagSetBackgroundImage(TextTagLastCreated(), "Assets\\Textures\\void_pure_black_backgroundcolor_diff.dds", true);
    TextTagShowBackground(TextTagLastCreated(), true);
    lib1_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    auto23AE9E70_var = 1;
    for ( ; auto23AE9E70_var <= auto23AE9E70_ae; auto23AE9E70_var += 1 ) {
        if ((UnitIsAlive(lib1_gv_uT_DummyUnits[auto23AE9E70_var]) == false)) {
            lib1_gv_uT_DummyUnits[auto23AE9E70_var] = UnitLastCreated();
            UnitSetCustomValue(UnitLastCreated(), lib1_gv_uT_DummyCustomValue, auto23AE9E70_var);
            break;
        }

    }
    UnitGroupAdd(lib1_gv_uT_Dummies, UnitLastCreated());
    TriggerEnable(lib1_gt_UT_DummyTakesDamage, true);
    TriggerEnable(lib1_gt_UT_DummyUpdate, true);
    TriggerEnable(lib1_gt_UT_DummyDestroyed, true);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Dummy_Init () {
    lib1_gt_UT_Dummy = TriggerCreate("lib1_gt_UT_Dummy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Dummy, c_playerAny, "-dummy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyTakesDamage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyTakesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vIndex = FixedToInt(UnitGetCustomValue(EventUnit(), lib1_gv_uT_DummyCustomValue));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DummyDamage[lv_vIndex][0] += EventUnitDamageAmount();
    lib1_gv_uT_DummyDamage[lv_vIndex][1] += EventUnitDamageAmount();
    if ((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_vIndex][0]) <= 0.0)) {
        TimerStart(lib1_gv_uT_DummyTimer[lv_vIndex][0], 5.0, false, c_timeGame);
        if ((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_vIndex][1]) <= 0.0)) {
            TimerStart(lib1_gv_uT_DummyTimer[lv_vIndex][1], 524287.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyTakesDamage_Init () {
    lib1_gt_UT_DummyTakesDamage = TriggerCreate("lib1_gt_UT_DummyTakesDamage_Func");
    TriggerEnable(lib1_gt_UT_DummyTakesDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DummyTakesDamage, null, c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Automatic Variable Declarations
    const int auto88756527_ae = 20;
    const int auto88756527_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = 1;
    for ( ; ( (auto88756527_ai >= 0 && lv_index <= auto88756527_ae) || (auto88756527_ai < 0 && lv_index >= auto88756527_ae) ) ; lv_index += auto88756527_ai ) {
        if ((EventTimer() == lib1_gv_uT_DummyTimer[lv_index][0])) {
            if ((lib1_gv_uT_DummyDamage[lv_index][0] <= 0.5)) {
                TextExpressionSetToken("Param/Expression/lib_1_DFDEF41B", "A", FixedToText((lib1_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_DFDEF41B", "B", FixedToText((TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]) - 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_DFDEF41B", "C", FixedToText((lib1_gv_uT_DummyDamage[lv_index][1] / (TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]) - 5.0)), 1));
                TextTagSetText(lib1_gf_TextTagForUnit(lib1_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_1_DFDEF41B"));
                lib1_gv_uT_DummyDamage[lv_index][0] = 0.0;
                lib1_gv_uT_DummyDamage[lv_index][1] = 0.0;
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][1], 524287.0, false, c_timeGame);
                TimerPause(lib1_gv_uT_DummyTimer[lv_index][1], true);
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                TimerPause(lib1_gv_uT_DummyTimer[lv_index][0], true);
                break;
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_2F5731F3", "A", FixedToText((lib1_gv_uT_DummyDamage[lv_index][0] / 5.0), 0));
                TextExpressionSetToken("Param/Expression/lib_1_2F5731F3", "B", FixedToText(TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1]), 0));
                TextExpressionSetToken("Param/Expression/lib_1_2F5731F3", "C", FixedToText((lib1_gv_uT_DummyDamage[lv_index][1] / TimerGetElapsed(lib1_gv_uT_DummyTimer[lv_index][1])), 1));
                TextTagSetText(lib1_gf_TextTagForUnit(lib1_gv_uT_DummyUnits[lv_index], 1), TextExpressionAssemble("Param/Expression/lib_1_2F5731F3"));
                lib1_gv_uT_DummyDamage[lv_index][0] = 0.0;
                TimerStart(lib1_gv_uT_DummyTimer[lv_index][0], 5.0, false, c_timeGame);
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyUpdate_Init () {
    lib1_gt_UT_DummyUpdate = TriggerCreate("lib1_gt_UT_DummyUpdate_Func");
    TriggerEnable(lib1_gt_UT_DummyUpdate, false);
    TriggerAddEventTimer(lib1_gt_UT_DummyUpdate, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DummyDestroyed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DummyDestroyed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_Dummies, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(lib1_gf_TextTagForUnit(EventUnit(), 1), PlayerGroupAll(), false);
    TextTagDestroy(lib1_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DummyDestroyed_Init () {
    lib1_gt_UT_DummyDestroyed = TriggerCreate("lib1_gt_UT_DummyDestroyed_Func");
    TriggerEnable(lib1_gt_UT_DummyDestroyed, false);
    TriggerAddEventUnitDied(lib1_gt_UT_DummyDestroyed, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_vUnit;

    // Automatic Variable Declarations
    const int auto349B2F76_ae = lib1_gv_uT_DPS_MaxUnits;
    const int auto349B2F76_ai = 1;
    unitgroup autoE636E417_g;
    int autoE636E417_u;
    unit autoE636E417_var;
    const int auto474AFDC0_ae = lib1_gv_uT_DPS_MaxUnits;
    const int auto474AFDC0_ai = 1;
    unitgroup auto2550E332_g;
    int auto2550E332_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAddUnitGroup(lib1_gv_uT_DPS_UG, UnitGroupSelected(EventPlayer()));
    lv_i = 1;
    for ( ; ( (auto349B2F76_ai >= 0 && lv_i <= auto349B2F76_ae) || (auto349B2F76_ai < 0 && lv_i >= auto349B2F76_ae) ) ; lv_i += auto349B2F76_ai ) {
        lib1_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        lib1_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][1]);
    }
    autoE636E417_g = UnitGroupSelected(EventPlayer());
    autoE636E417_u = UnitGroupCount(autoE636E417_g, c_unitCountAll);
    for (;; autoE636E417_u -= 1) {
        autoE636E417_var = UnitGroupUnitFromEnd(autoE636E417_g, autoE636E417_u);
        if (autoE636E417_var == null) { break; }
        if ((TextTagVisible(lib1_gf_TextTagForUnit(EventUnit(), 1), EventPlayer()) == false)) {
            lv_i = 1;
            for ( ; ( (auto474AFDC0_ai >= 0 && lv_i <= auto474AFDC0_ae) || (auto474AFDC0_ai < 0 && lv_i >= auto474AFDC0_ae) ) ; lv_i += auto474AFDC0_ai ) {
                if ((lib1_gv_uT_DPS_Units[lv_i] == null)) {
                    lib1_gv_uT_DPS_Units[lv_i] = autoE636E417_var;
                    UnitSetCustomValue(autoE636E417_var, lib1_gv_uT_DPS_CustomValueIndex, lv_i);
                    UnitBehaviorAddPlayer(autoE636E417_var, "DPSTESTBEGH", EventPlayer(), 1);
                    lib1_gf_CopyBehaviorToMagazineAmmos(autoE636E417_var, "DPSTESTBEGH");
                    auto2550E332_g = UnitGroup(null, UnitGetOwner(autoE636E417_var), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
                    auto2550E332_u = UnitGroupCount(auto2550E332_g, c_unitCountAll);
                    for (;; auto2550E332_u -= 1) {
                        lv_vUnit = UnitGroupUnitFromEnd(auto2550E332_g, auto2550E332_u);
                        if (lv_vUnit == null) { break; }
                        if ((UnitHasBehavior2(lv_vUnit, "DPSTESTBEGH") == true)) {
                            UnitSetCustomValue(lv_vUnit, lib1_gv_uT_DPS_CustomValueIndex, lv_i);
                            UnitGroupAdd(lib1_gv_uT_DPS_UG, lv_vUnit);
                            UnitBehaviorRemovePlayer(lv_vUnit, "DPSTESTBEGH", EventPlayer(), 1);
                        }

                    }
                    break;
                }

            }
            TextTagCreate(StringExternal("Param/Value/lib_1_F2AA9007"), 24, UnitGetPosition(autoE636E417_var), 1.0, true, false, PlayerGroupAll());
            TextTagAttachToUnit(TextTagLastCreated(), autoE636E417_var, 1.0);
            TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
            lib1_gf_StoreTextTagForUnit(autoE636E417_var, 1, TextTagLastCreated());
        }

    }
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, true);
    TriggerEnable(lib1_gt_UT_DPS_Summon, true);
    TriggerEnable(lib1_gt_UT_DPS_Dies, true);
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Init () {
    lib1_gt_UT_DPS = TriggerCreate("lib1_gt_UT_DPS_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DPS, c_playerAny, "-dps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Stop
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Stop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    unitgroup autoFA2489F5_g;
    int autoFA2489F5_u;
    unit autoFA2489F5_var;
    const int autoC4B4B211_ae = lib1_gv_uT_DPS_MaxUnits;
    const int autoC4B4B211_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFA2489F5_g = lib1_gv_uT_DPS_UG;
    autoFA2489F5_u = UnitGroupCount(autoFA2489F5_g, c_unitCountAll);
    for (;; autoFA2489F5_u -= 1) {
        autoFA2489F5_var = UnitGroupUnitFromEnd(autoFA2489F5_g, autoFA2489F5_u);
        if (autoFA2489F5_var == null) { break; }
        UnitGroupRemove(lib1_gv_uT_DPS_UG, autoFA2489F5_var);
        TextTagDestroy(lib1_gf_TextTagForUnit(autoFA2489F5_var, 1));
    }
    lv_i = 1;
    for ( ; ( (autoC4B4B211_ai >= 0 && lv_i <= autoC4B4B211_ae) || (autoC4B4B211_ai < 0 && lv_i >= autoC4B4B211_ae) ) ; lv_i += autoC4B4B211_ai ) {
        lib1_gv_uT_DPS_Units[lv_i] = null;
        lib1_gv_uT_DPS_Damage[lv_i][0] = 0.0;
        lib1_gv_uT_DPS_Damage[lv_i][1] = 0.0;
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][0]);
        libNtve_gf_StopTimer(lib1_gv_uT_DPS_Timer[lv_i][1]);
    }
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, false);
    TriggerEnable(lib1_gt_UT_DPS_Summon, false);
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, false);
    TriggerEnable(lib1_gt_UT_DPS_Dies, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Stop_Init () {
    lib1_gt_UT_DPS_Stop = TriggerCreate("lib1_gt_UT_DPS_Stop_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DPS_Stop, c_playerAny, "-dpsstop", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_DealsDamage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_DealsDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vCustomValue;
    fixed lv_vElapsedTime;
    fixed lv_vDPS_Now;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vCustomValue = FixedToInt(UnitGetCustomValue(EventUnitDamageSourceUnit(), lib1_gv_uT_DPS_CustomValueIndex));
    lv_vElapsedTime = TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0]);
    if ((TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]) <= 0.0)) {
        TimerStart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1], 524287.0, false, c_timeGame);
        TimerStart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0], 5.0, false, c_timeGame);
    }
    else {
        if ((TimerIsPaused(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]) == true)) {
            TimerRestart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]);
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] = 0.0;
        }
        else {
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] += EventUnitDamageAmount();
            lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] += EventUnitDamageAmount();
            if ((lv_vElapsedTime >= 2.0)) {
                lv_vDPS_Now = (lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] / lv_vElapsedTime);
                lib1_gv_uT_DPS_Avg[lv_vCustomValue] = (lib1_gv_uT_DPS_Damage[lv_vCustomValue][1] / TimerGetElapsed(lib1_gv_uT_DPS_Timer[lv_vCustomValue][1]));
                TextExpressionSetToken("Param/Expression/lib_1_69F0DD47", "A", FixedToText(lib1_gv_uT_DPS_Avg[lv_vCustomValue], 1));
                TextExpressionSetToken("Param/Expression/lib_1_69F0DD47", "B", FixedToText(lv_vDPS_Now, 1));
                TextTagSetText(lib1_gf_TextTagForUnit(lib1_gv_uT_DPS_Units[lv_vCustomValue], 1), TextExpressionAssemble("Param/Expression/lib_1_69F0DD47"));
                lib1_gv_uT_DPS_Damage[lv_vCustomValue][0] = 0.0;
                TimerRestart(lib1_gv_uT_DPS_Timer[lv_vCustomValue][0]);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_DealsDamage_Init () {
    lib1_gt_UT_DPS_DealsDamage = TriggerCreate("lib1_gt_UT_DPS_DealsDamage_Func");
    TriggerEnable(lib1_gt_UT_DPS_DealsDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DPS_DealsDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Summon
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Summon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(lib1_gv_uT_DPS_UG, EventUnitCreatedUnit());
    UnitSetCustomValue(EventUnitCreatedUnit(), lib1_gv_uT_DPS_CustomValueIndex, UnitGetCustomValue(EventUnit(), lib1_gv_uT_DPS_CustomValueIndex));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Summon_Init () {
    lib1_gt_UT_DPS_Summon = TriggerCreate("lib1_gt_UT_DPS_Summon_Func");
    TriggerEnable(lib1_gt_UT_DPS_Summon, false);
    TriggerAddEventUnitCreated(lib1_gt_UT_DPS_Summon, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_Dies
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_Dies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(lib1_gv_uT_DPS_UG, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(lib1_gf_TextTagForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_Dies_Init () {
    lib1_gt_UT_DPS_Dies = TriggerCreate("lib1_gt_UT_DPS_Dies_Func");
    TriggerEnable(lib1_gt_UT_DPS_Dies, false);
    TriggerAddEventUnitDied(lib1_gt_UT_DPS_Dies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DPS_PauseGlobal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DPS_PauseGlobal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD5D86BFA_ae = lib1_gv_uT_DPS_MaxUnits;
    int autoD5D86BFA_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD5D86BFA_var = 1;
    for ( ; autoD5D86BFA_var <= autoD5D86BFA_ae; autoD5D86BFA_var += 1 ) {
        if ((EventTimer() == lib1_gv_uT_DPS_Timer[autoD5D86BFA_var][0])) {
            TimerPause(lib1_gv_uT_DPS_Timer[autoD5D86BFA_var][1], true);
            TextExpressionSetToken("Param/Expression/lib_1_C75B3850", "A", FixedToText(lib1_gv_uT_DPS_Avg[autoD5D86BFA_var], 1));
            TextTagSetText(lib1_gf_TextTagForUnit(lib1_gv_uT_DPS_Units[autoD5D86BFA_var], 1), TextExpressionAssemble("Param/Expression/lib_1_C75B3850"));
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DPS_PauseGlobal_Init () {
    lib1_gt_UT_DPS_PauseGlobal = TriggerCreate("lib1_gt_UT_DPS_PauseGlobal_Func");
    TriggerEnable(lib1_gt_UT_DPS_PauseGlobal, false);
    TriggerAddEventTimer(lib1_gt_UT_DPS_PauseGlobal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Vision
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_uT_Revealed == false)) {
        VisRevealerCreate(EventPlayer(), RegionEntireMap());
        lib1_gv_uT_Revealer = VisRevealerLastCreated();
        lib1_gv_uT_Revealed = true;
    }
    else {
        VisRevealerDestroy(lib1_gv_uT_Revealer);
        lib1_gv_uT_Revealed = false;
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Vision_Init () {
    lib1_gt_UT_Vision = TriggerCreate("lib1_gt_UT_Vision_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Vision, c_playerAny, "-vision", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers toggle
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Numberstoggle_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((PlayerGroupHasPlayer(lib1_gv_uT_PlayersWithNumbers, EventPlayer()) == false) || (TriggerIsEnabled(lib1_gt_UT_NumbersHeal) == false))) {
        PlayerGroupAdd(lib1_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_3D34AE81"));
        TriggerEnable(lib1_gt_UT_NumbersDamage, true);
        TriggerEnable(lib1_gt_UT_NumbersHeal, true);
    }
    else {
        PlayerGroupRemove(lib1_gv_uT_PlayersWithNumbers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E62EA0AE"));
        if ((PlayerGroupCount(lib1_gv_uT_PlayersWithNumbers) == 0)) {
            TriggerEnable(lib1_gt_UT_NumbersDamage, false);
            TriggerEnable(lib1_gt_UT_NumbersHeal, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Numberstoggle_Init () {
    lib1_gt_UT_Numberstoggle = TriggerCreate("lib1_gt_UT_Numberstoggle_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Numberstoggle, c_playerAny, "-numbers", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Damage
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_NumbersDamage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAmount() >= 0.5))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitDamageAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, lib1_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    if (((EventUnitDamageSourcePlayer() == 1) || (EventUnitDamageSourcePlayer() == 2))) {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 59.22, 18.43));
    }
    else {
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    }
    if ((EventUnitDamageAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        if ((EventUnitDamageAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.5);
        }

    }
    else {
        if ((EventUnitDamageAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 14);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), lib1_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_NumbersDamage_Init () {
    lib1_gt_UT_NumbersDamage = TriggerCreate("lib1_gt_UT_NumbersDamage_Func");
    TriggerEnable(lib1_gt_UT_NumbersDamage, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_NumbersDamage, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Numbers Heal
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_NumbersHeal_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(FixedToText(EventUnitHealAmount(), 0), 24, UnitGetPosition(EventUnit()), 1.0, true, false, lib1_gv_uT_PlayersWithNumbers);
    TextTagSetVelocity(TextTagLastCreated(), 2.0, RandomInt(55, 125));
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 100.00, 0.00));
    if ((EventUnitHealAmount() > 20.0)) {
        TextTagSetFontSize(TextTagLastCreated(), 32);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.5);
        if ((EventUnitHealAmount() > 100.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 50);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        }

    }
    else {
        if ((EventUnitHealAmount() < 5.0)) {
            TextTagSetFontSize(TextTagLastCreated(), 12);
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 1.5);
        }
        else {
            TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 2.0);
        }
    }
    TextTagShow(TextTagLastCreated(), lib1_gv_uT_PlayersWithNumbers, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_NumbersHeal_Init () {
    lib1_gt_UT_NumbersHeal = TriggerCreate("lib1_gt_UT_NumbersHeal_Func");
    TriggerEnable(lib1_gt_UT_NumbersHeal, false);
    TriggerAddEventUnitHealed(lib1_gt_UT_NumbersHeal, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_LogDisplay
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_LogDisplay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__todo_otherPlayer;
    bool lv_vChangeInDataPlayer;

    // Automatic Variable Declarations
    string autoC5707C90_val;

    // Variable Initialization
    lv__todo_otherPlayer = PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), 1);

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1_gt_UT_DL_DamageLogging, true);
    TriggerEnable(lib1_gt_UT_DL_HealLogging, true);
    autoC5707C90_val = StringWord(EventChatMessage(false), 2);
    if (autoC5707C90_val == "2") {
        if ((lib1_gv_uT_DL_PlayerData[EventPlayer()] != lv__todo_otherPlayer)) {
            lib1_gv_uT_DL_PlayerData[EventPlayer()] = lv__todo_otherPlayer;
            lv_vChangeInDataPlayer = true;
        }

    }
    else if (autoC5707C90_val == "clear") {
        lib1_gf_UT_DL_LogClear(EventPlayer());
        return true;
    }
    else if (autoC5707C90_val == "stop") {
        PlayerGroupRemove(lib1_gv_uT_DL_LoggingPlayers, EventPlayer());
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_BE14BC8C"));
        if (((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, 1) == false) || (PlayerStatus(1) != c_playerStatusActive)) && ((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, 2) == false) || (PlayerStatus(2) != c_playerStatusActive))) {
            TriggerEnable(lib1_gt_UT_DL_DamageLogging, false);
            TriggerEnable(lib1_gt_UT_DL_HealLogging, false);
        }

        return true;
    }
    else {
        if ((lib1_gv_uT_DL_PlayerData[EventPlayer()] != EventPlayer())) {
            lib1_gv_uT_DL_PlayerData[EventPlayer()] = EventPlayer();
            lv_vChangeInDataPlayer = true;
        }

    }
    if (((lib1_gv_uT_DL_LogDialog == c_invalidDialogId) || (lv_vChangeInDataPlayer == true) || (DialogIsVisible(lib1_gv_uT_DL_LogDialog, EventPlayer()) == false))) {
        lib1_gf_UT_DL_DialogCreate();
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[EventPlayer()], EventPlayer());
        DialogSetVisible(lib1_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), true);
        TriggerExecute(lib1_gt_UT_DL_PeriodicUpdate, true, false);
    }
    else {
        DialogSetVisible(lib1_gv_uT_DL_LogDialog, PlayerGroupSingle(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_LogDisplay_Init () {
    lib1_gt_UT_DL_LogDisplay = TriggerCreate("lib1_gt_UT_DL_LogDisplay_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DL_LogDisplay, c_playerAny, "-log", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_PeriodicUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_PeriodicUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(1.0, c_timeGame);
    while (((DialogIsVisible(lib1_gv_uT_DL_LogDialog, 1) == true) || (DialogIsVisible(lib1_gv_uT_DL_LogDialog, 2) == true))) {
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[1], 1);
        lib1_gf_UT_DL_DialogUpdate(lib1_gv_uT_DL_PlayerData[2], 2);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_PeriodicUpdate_Init () {
    lib1_gt_UT_DL_PeriodicUpdate = TriggerCreate("lib1_gt_UT_DL_PeriodicUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Damage Logging
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_DamageLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF45712BC_ae = lib1_gv_uT_DL_MaxUnits;
    int autoF45712BC_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, EventUnitDamageSourcePlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != EventUnit()))) {
            return false;
        }

        if (!((EventUnitDamageAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitDamageSourceUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF45712BC_var = 1;
    for ( ; autoF45712BC_var <= autoF45712BC_ae; autoF45712BC_var += 1 ) {
        if (((UnitGetType(EventUnitDamageSourceUnit()) == lib1_gv_uT_DL_Data[autoF45712BC_var][0][EventUnitDamageSourcePlayer()].lv_unitType) || (lib1_gf_UT_AreMorphUnits(UnitGetType(EventUnitDamageSourceUnit()), lib1_gv_uT_DL_Data[autoF45712BC_var][0][EventUnitDamageSourcePlayer()].lv_unitType) == true))) {
            lib1_gf_UT_DL_AddHealingDamage(autoF45712BC_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
            break;
        }
        else {
            if ((lib1_gv_uT_DL_Data[autoF45712BC_var][0][EventUnitDamageSourcePlayer()].lv_unitType == null)) {
                lib1_gv_uT_DL_Data[autoF45712BC_var][0][EventUnitDamageSourcePlayer()].lv_unitType = UnitGetType(EventUnitDamageSourceUnit());
                lib1_gf_UT_DL_AddHealingDamage(autoF45712BC_var, 0, EventUnitDamageSourcePlayer(), EventUnitDamageAmount());
                break;
            }
            else {
                if ((autoF45712BC_var == lib1_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitDamageSourcePlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_3F07C5DB"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_DamageLogging_Init () {
    lib1_gt_UT_DL_DamageLogging = TriggerCreate("lib1_gt_UT_DL_DamageLogging_Func");
    TriggerEnable(lib1_gt_UT_DL_DamageLogging, false);
    TriggerAddEventUnitDamaged(lib1_gt_UT_DL_DamageLogging, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DL_Heal Logging
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DL_HealLogging_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto66210462_ae = lib1_gv_uT_DL_MaxUnits;
    int auto66210462_var;

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(lib1_gv_uT_DL_LoggingPlayers, EventUnitHealLaunchPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitHealAmount() >= 0.1))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto66210462_var = 1;
    for ( ; auto66210462_var <= auto66210462_ae; auto66210462_var += 1 ) {
        if ((UnitGetType(EventUnitHealLaunchUnit()) == lib1_gv_uT_DL_Data[auto66210462_var][1][EventUnitHealLaunchPlayer()].lv_unitType)) {
            lib1_gf_UT_DL_AddHealingDamage(auto66210462_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
            break;
        }
        else {
            if ((lib1_gv_uT_DL_Data[auto66210462_var][1][EventUnitHealLaunchPlayer()].lv_unitType == null)) {
                lib1_gv_uT_DL_Data[auto66210462_var][1][EventUnitHealLaunchPlayer()].lv_unitType = UnitGetType(EventUnitHealLaunchUnit());
                lib1_gf_UT_DL_AddHealingDamage(auto66210462_var, 1, EventUnitHealLaunchPlayer(), EventUnitHealAmount());
                break;
            }
            else {
                if ((auto66210462_var == lib1_gv_uT_DL_MaxUnits)) {
                    UIDisplayMessage(PlayerGroupSingle(EventUnitHealLaunchPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_71325F2C"));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DL_HealLogging_Init () {
    lib1_gt_UT_DL_HealLogging = TriggerCreate("lib1_gt_UT_DL_HealLogging_Func");
    TriggerEnable(lib1_gt_UT_DL_HealLogging, false);
    TriggerAddEventUnitHealed(lib1_gt_UT_DL_HealLogging, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_EnableDev Commands
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_EnableDevCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DevCommands[EventPlayer()] = lib1_ge_UT_DevCommandTypes_Gamealtering;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_EnableDevCommands_Init () {
    lib1_gt_UT_EnableDevCommands = TriggerCreate("lib1_gt_UT_EnableDevCommands_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_EnableDevCommands, c_playerAny, "-dc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DisableDev Commands for ally
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DisableDevCommandsforally_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_uT_DevCommands[2] = lib1_ge_UT_DevCommandTypes_No;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DisableDevCommandsforally_Init () {
    lib1_gt_UT_DisableDevCommandsforally = TriggerCreate("lib1_gt_UT_DisableDevCommandsforally_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DisableDevCommandsforally, c_playerAny, "-jail", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Rad
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Rad_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vRadius;

    // Automatic Variable Declarations
    unitgroup auto8531551B_g;
    int auto8531551B_u;
    unit auto8531551B_var;
    unitgroup auto06F08CD7_g;
    int auto06F08CD7_u;
    unit auto06F08CD7_var;

    // Variable Initialization
    lv_vRadius = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_vRadius >= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_1_C03D0380", "A", FixedToText(lv_vRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_C03D0380"));
        auto06F08CD7_g = UnitGroupSelected(EventPlayer());
        auto06F08CD7_u = UnitGroupCount(auto06F08CD7_g, c_unitCountAll);
        for (;; auto06F08CD7_u -= 1) {
            auto06F08CD7_var = UnitGroupUnitFromEnd(auto06F08CD7_g, auto06F08CD7_u);
            if (auto06F08CD7_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto06F08CD7_var), "Radius", 1, FixedToString(lv_vRadius, 2));
        }
        lib1_gf_UT_Cheat();
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_1455D096"));
        auto8531551B_g = UnitGroupSelected(EventPlayer());
        auto8531551B_u = UnitGroupCount(auto8531551B_g, c_unitCountAll);
        for (;; auto8531551B_u -= 1) {
            auto8531551B_var = UnitGroupUnitFromEnd(auto8531551B_g, auto8531551B_u);
            if (auto8531551B_var == null) { break; }
            CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto8531551B_var), "Radius", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(auto8531551B_var), "Radius", 0));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Rad_Init () {
    lib1_gt_UT_Rad = TriggerCreate("lib1_gt_UT_Rad_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Rad, c_playerAny, "-rad", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_XP
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_XP_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vXPAmount;

    // Automatic Variable Declarations
    unitgroup auto2D4032D7_g;
    int auto2D4032D7_u;
    unit auto2D4032D7_var;

    // Variable Initialization
    lv_vXPAmount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2D4032D7_g = UnitGroupSelected(EventPlayer());
    auto2D4032D7_u = UnitGroupCount(auto2D4032D7_g, c_unitCountAll);
    for (;; auto2D4032D7_u -= 1) {
        auto2D4032D7_var = UnitGroupUnitFromEnd(auto2D4032D7_g, auto2D4032D7_u);
        if (auto2D4032D7_var == null) { break; }
        UnitXPAddXP(auto2D4032D7_var, null, lv_vXPAmount);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_XP_Init () {
    lib1_gt_UT_XP = TriggerCreate("lib1_gt_UT_XP_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_XP, c_playerAny, "-xp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListDead
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListDead_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto8CDD79A3_ae = 15;
    int auto8CDD79A3_var;
    unitgroup autoC02EE38C_g;
    int autoC02EE38C_u;
    unit autoC02EE38C_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_B40BB1C5"), true);
    auto8CDD79A3_var = 0;
    for ( ; auto8CDD79A3_var <= auto8CDD79A3_ae; auto8CDD79A3_var += 1 ) {
        autoC02EE38C_g = UnitGroup(null, auto8CDD79A3_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterDead - 32)), (1 << c_targetFilterMissile), 0), 0);
        autoC02EE38C_u = UnitGroupCount(autoC02EE38C_g, c_unitCountAll);
        for (;; autoC02EE38C_u -= 1) {
            autoC02EE38C_var = UnitGroupUnitFromEnd(autoC02EE38C_g, autoC02EE38C_u);
            if (autoC02EE38C_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_1_51554BD1", "A", UnitGetName(autoC02EE38C_var));
            TextExpressionSetToken("Param/Expression/lib_1_51554BD1", "B", IntToText(UnitGetOwner(autoC02EE38C_var)));
            TextExpressionSetToken("Param/Expression/lib_1_51554BD1", "C", FixedToText(PointGetX(UnitGetPosition(autoC02EE38C_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_51554BD1", "D", FixedToText(PointGetY(UnitGetPosition(autoC02EE38C_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_51554BD1"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListDead_Init () {
    lib1_gt_UT_ListDead = TriggerCreate("lib1_gt_UT_ListDead_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListDead, c_playerAny, "-listdead", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListHidden
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListHidden_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC3F31D81_ae = 15;
    int autoC3F31D81_var;
    unitgroup auto3A14E4DC_g;
    int auto3A14E4DC_u;
    unit auto3A14E4DC_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_1C0FF851"), true);
    autoC3F31D81_var = 0;
    for ( ; autoC3F31D81_var <= autoC3F31D81_ae; autoC3F31D81_var += 1 ) {
        auto3A14E4DC_g = UnitGroup(null, autoC3F31D81_var, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterMissile), 0), 0);
        auto3A14E4DC_u = UnitGroupCount(auto3A14E4DC_g, c_unitCountAll);
        for (;; auto3A14E4DC_u -= 1) {
            auto3A14E4DC_var = UnitGroupUnitFromEnd(auto3A14E4DC_g, auto3A14E4DC_u);
            if (auto3A14E4DC_var == null) { break; }
            if ((libNtve_gf_UnitIsInsideTransport(auto3A14E4DC_var) == true)) {
                TextExpressionSetToken("Param/Expression/lib_1_C9D010B3", "A", UnitGetName(auto3A14E4DC_var));
                TextExpressionSetToken("Param/Expression/lib_1_C9D010B3", "B", IntToText(UnitGetOwner(auto3A14E4DC_var)));
                TextExpressionSetToken("Param/Expression/lib_1_C9D010B3", "C", FixedToText(PointGetX(UnitGetPosition(auto3A14E4DC_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_1_C9D010B3", "D", FixedToText(PointGetY(UnitGetPosition(auto3A14E4DC_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_C9D010B3"), true);
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_1_892687A8", "A", UnitGetName(auto3A14E4DC_var));
                TextExpressionSetToken("Param/Expression/lib_1_892687A8", "B", IntToText(UnitGetOwner(auto3A14E4DC_var)));
                TextExpressionSetToken("Param/Expression/lib_1_892687A8", "C", FixedToText(PointGetX(UnitGetPosition(auto3A14E4DC_var)), 1));
                TextExpressionSetToken("Param/Expression/lib_1_892687A8", "D", FixedToText(PointGetY(UnitGetPosition(auto3A14E4DC_var)), 1));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_892687A8"), true);
            }
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListHidden_Init () {
    lib1_gt_UT_ListHidden = TriggerCreate("lib1_gt_UT_ListHidden_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListHidden, c_playerAny, "-listhidden", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListMissile
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListMissile_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4E683226_ae = 15;
    int auto4E683226_var;
    unitgroup auto7F628066_g;
    int auto7F628066_u;
    unit auto7F628066_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_1_BB060475"), true);
    auto4E683226_var = 0;
    for ( ; auto4E683226_var <= auto4E683226_ae; auto4E683226_var += 1 ) {
        auto7F628066_g = UnitGroup(null, auto4E683226_var, RegionEntireMap(), UnitFilter((1 << c_targetFilterMissile), 0, 0, 0), 0);
        auto7F628066_u = UnitGroupCount(auto7F628066_g, c_unitCountAll);
        for (;; auto7F628066_u -= 1) {
            auto7F628066_var = UnitGroupUnitFromEnd(auto7F628066_g, auto7F628066_u);
            if (auto7F628066_var == null) { break; }
            TextExpressionSetToken("Param/Expression/lib_1_93B1A779", "A", UnitGetName(auto7F628066_var));
            TextExpressionSetToken("Param/Expression/lib_1_93B1A779", "B", IntToText(UnitGetOwner(auto7F628066_var)));
            TextExpressionSetToken("Param/Expression/lib_1_93B1A779", "C", FixedToText(PointGetX(UnitGetPosition(auto7F628066_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_93B1A779", "D", FixedToText(PointGetY(UnitGetPosition(auto7F628066_var)), 1));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_93B1A779"), true);
            Wait(0.001, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListMissile_Init () {
    lib1_gt_UT_ListMissile = TriggerCreate("lib1_gt_UT_ListMissile_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListMissile, c_playerAny, "-listmissile", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_ListAll
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ListAll_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_vText;
    int lv_vA;
    int lv_vB;
    playergroup lv_vPlayerGroup;

    // Automatic Variable Declarations
    playergroup auto61BEDEEA_g;
    int auto61BEDEEA_var;
    unitgroup autoAFA705B8_g;
    int autoAFA705B8_u;
    unit autoAFA705B8_var;
    playergroup auto8A50A7EC_g;
    int auto8A50A7EC_var;
    unitgroup auto9B0F0588_g;
    int auto9B0F0588_u;
    unit auto9B0F0588_var;

    // Variable Initialization
    lv_vB = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_105094A8", "A", IntToText(lv_vB));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_105094A8"));
    if ((StringWord(EventChatMessage(false), 2) != "") && (lv_vB >= 0)) {
        PlayerGroupAdd(lv_vPlayerGroup, lv_vB);
    }
    else {
        libNtve_gf_AddPlayerGroupToPlayerGroup(PlayerGroupAll(), lv_vPlayerGroup);
    }
    auto61BEDEEA_g = lv_vPlayerGroup;
    auto61BEDEEA_var = -1;
    while (true) {
        auto61BEDEEA_var = PlayerGroupNextPlayer(auto61BEDEEA_g, auto61BEDEEA_var);
        if (auto61BEDEEA_var < 0) { break; }
        autoAFA705B8_g = UnitGroup(null, auto61BEDEEA_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        autoAFA705B8_u = UnitGroupCount(autoAFA705B8_g, c_unitCountAll);
        for (;; autoAFA705B8_u -= 1) {
            autoAFA705B8_var = UnitGroupUnitFromEnd(autoAFA705B8_g, autoAFA705B8_u);
            if (autoAFA705B8_var == null) { break; }
            lv_vA += 1;
        }
    }
    TextExpressionSetToken("Param/Expression/lib_1_94C3DB21", "A", IntToText(lv_vA));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_94C3DB21"), true);
    Wait(0.5, c_timeGame);
    auto8A50A7EC_g = lv_vPlayerGroup;
    auto8A50A7EC_var = -1;
    while (true) {
        auto8A50A7EC_var = PlayerGroupNextPlayer(auto8A50A7EC_g, auto8A50A7EC_var);
        if (auto8A50A7EC_var < 0) { break; }
        auto9B0F0588_g = UnitGroup(null, auto8A50A7EC_var, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
        auto9B0F0588_u = UnitGroupCount(auto9B0F0588_g, c_unitCountAll);
        for (;; auto9B0F0588_u -= 1) {
            auto9B0F0588_var = UnitGroupUnitFromEnd(auto9B0F0588_g, auto9B0F0588_u);
            if (auto9B0F0588_var == null) { break; }
            Wait(0.001, c_timeGame);
            lv_vText = StringToText("");
            if ((libNtve_gf_UnitIsHidden(auto9B0F0588_var) == true)) {
                lv_vText = StringExternal("Param/Value/lib_1_3CF6B2EB");
            }

            if ((UnitIsAlive(auto9B0F0588_var) == false)) {
                TextExpressionSetToken("Param/Expression/lib_1_D80199D2", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_1_D80199D2");
            }

            if ((UnitTypeTestFlag(UnitGetType(auto9B0F0588_var), c_unitFlagMissile) == true)) {
                TextExpressionSetToken("Param/Expression/lib_1_F0A3828A", "A", lv_vText);
                lv_vText = TextExpressionAssemble("Param/Expression/lib_1_F0A3828A");
            }

            TextExpressionSetToken("Param/Expression/lib_1_FA672BE2", "A", UnitGetName(auto9B0F0588_var));
            TextExpressionSetToken("Param/Expression/lib_1_FA672BE2", "B", IntToText(auto8A50A7EC_var));
            TextExpressionSetToken("Param/Expression/lib_1_FA672BE2", "C", FixedToText(PointGetX(UnitGetPosition(auto9B0F0588_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_FA672BE2", "D", FixedToText(PointGetY(UnitGetPosition(auto9B0F0588_var)), 1));
            TextExpressionSetToken("Param/Expression/lib_1_FA672BE2", "E", lv_vText);
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_1_FA672BE2"), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ListAll_Init () {
    lib1_gt_UT_ListAll = TriggerCreate("lib1_gt_UT_ListAll_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ListAll, c_playerAny, "-listall", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Teleport
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Teleport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF5E8CDC3_g;
    int autoF5E8CDC3_u;
    unit autoF5E8CDC3_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF5E8CDC3_g = UnitGroupSelected(EventPlayer());
    autoF5E8CDC3_u = UnitGroupCount(autoF5E8CDC3_g, c_unitCountAll);
    for (;; autoF5E8CDC3_u -= 1) {
        autoF5E8CDC3_var = UnitGroupUnitFromEnd(autoF5E8CDC3_g, autoF5E8CDC3_u);
        if (autoF5E8CDC3_var == null) { break; }
        UnitSetPosition(autoF5E8CDC3_var, CameraGetTarget(EventPlayer()), true);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Teleport_Init () {
    lib1_gt_UT_Teleport = TriggerCreate("lib1_gt_UT_Teleport_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Teleport, c_playerAny, "-teleport", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restart
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Restart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RestartGame(PlayerGroupAll());
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Restart_Init () {
    lib1_gt_UT_Restart = TriggerCreate("lib1_gt_UT_Restart_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Restart, c_playerAny, "-restart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_GetID
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_GetID_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8F1CFCC4_g;
    int auto8F1CFCC4_u;
    unit auto8F1CFCC4_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto8F1CFCC4_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
    auto8F1CFCC4_u = UnitGroupCount(auto8F1CFCC4_g, c_unitCountAll);
    for (;; auto8F1CFCC4_u -= 1) {
        auto8F1CFCC4_var = UnitGroupUnitFromEnd(auto8F1CFCC4_g, auto8F1CFCC4_u);
        if (auto8F1CFCC4_var == null) { break; }
        if ((libNtve_gf_UnitIsHidden(auto8F1CFCC4_var) == true)) {
            TextExpressionSetToken("Param/Expression/lib_1_353C5E68", "A", StringToText((UnitGetType(auto8F1CFCC4_var))));
            TextExpressionSetToken("Param/Expression/lib_1_353C5E68", "B", IntToText(UnitGetOwner(auto8F1CFCC4_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_353C5E68"), 24, UnitGetPosition(auto8F1CFCC4_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_1_44D2F784", "A", StringToText((UnitGetType(auto8F1CFCC4_var))));
            TextExpressionSetToken("Param/Expression/lib_1_44D2F784", "B", IntToText(UnitGetOwner(auto8F1CFCC4_var)));
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_44D2F784"), 24, UnitGetPosition(auto8F1CFCC4_var), 1.0, true, false, PlayerGroupSingle(EventPlayer()));
            TextTagAttachToUnit(TextTagLastCreated(), auto8F1CFCC4_var, 1.5);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 20.0);
        TextTagShow(TextTagLastCreated(), PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_GetID_Init () {
    lib1_gt_UT_GetID = TriggerCreate("lib1_gt_UT_GetID_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_GetID, c_playerAny, "-getid", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Restore
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Restore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto318D511A_g;
    int auto318D511A_u;
    unit auto318D511A_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto318D511A_g = UnitGroupSelected(EventPlayer());
    auto318D511A_u = UnitGroupCount(auto318D511A_g, c_unitCountAll);
    for (;; auto318D511A_u -= 1) {
        auto318D511A_var = UnitGroupUnitFromEnd(auto318D511A_g, auto318D511A_u);
        if (auto318D511A_var == null) { break; }
        UnitSetPropertyFixed(auto318D511A_var, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(auto318D511A_var, c_unitPropEnergyPercent, 100.0);
        UnitSetPropertyFixed(auto318D511A_var, c_unitPropShieldsPercent, 100.0);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Restore_Init () {
    lib1_gt_UT_Restore = TriggerCreate("lib1_gt_UT_Restore_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Restore, c_playerAny, "-restore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Pause_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_UnitIsPaused(UnitGroupRandomUnit(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive)) == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F47401FC"));
        UnitPauseAll(false);
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_8E6638DE"));
        UnitPauseAll(true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Pause_Init () {
    lib1_gt_UT_Pause = TriggerCreate("lib1_gt_UT_Pause_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Pause, c_playerAny, "-pause", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Money
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Money_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Money_Init () {
    lib1_gt_UT_Money = TriggerCreate("lib1_gt_UT_Money_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Money, c_playerAny, "-money", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Look
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Look_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoC3D21AE0_g;
    int autoC3D21AE0_u;
    unit autoC3D21AE0_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC3D21AE0_g = UnitGroupSelected(EventPlayer());
    autoC3D21AE0_u = UnitGroupCount(autoC3D21AE0_g, c_unitCountAll);
    for (;; autoC3D21AE0_u -= 1) {
        autoC3D21AE0_var = UnitGroupUnitFromEnd(autoC3D21AE0_g, autoC3D21AE0_u);
        if (autoC3D21AE0_var == null) { break; }
        libNtve_gf_MakeModelFaceAngle(libNtve_gf_MainActorofUnit(autoC3D21AE0_var), StringToFixed(StringWord(EventChatMessage(false), 2)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Look_Init () {
    lib1_gt_UT_Look = TriggerCreate("lib1_gt_UT_Look_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Look, c_playerAny, "-look", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_sight
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_sight_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto6993E779_g;
    int auto6993E779_u;
    unit auto6993E779_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_1_7D51CF5E", "A", StringToText(StringWord(EventChatMessage(false), 1)));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_7D51CF5E"));
    auto6993E779_g = UnitGroupSelected(EventPlayer());
    auto6993E779_u = UnitGroupCount(auto6993E779_g, c_unitCountAll);
    for (;; auto6993E779_u -= 1) {
        auto6993E779_var = UnitGroupUnitFromEnd(auto6993E779_g, auto6993E779_u);
        if (auto6993E779_var == null) { break; }
        CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(auto6993E779_var), "Sight", EventPlayer(), StringWord(EventChatMessage(false), 2));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_sight_Init () {
    lib1_gt_UT_sight = TriggerCreate("lib1_gt_UT_sight_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_sight, c_playerAny, "-sight", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Kill
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Kill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto87381E9B_g;
    int auto87381E9B_u;
    unit auto87381E9B_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != null)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    auto87381E9B_g = UnitGroupSelected(EventPlayer());
    auto87381E9B_u = UnitGroupCount(auto87381E9B_g, c_unitCountAll);
    for (;; auto87381E9B_u -= 1) {
        auto87381E9B_var = UnitGroupUnitFromEnd(auto87381E9B_g, auto87381E9B_u);
        if (auto87381E9B_var == null) { break; }
        PlayerCreateEffectUnit(lv_vPlayer, "Damage", auto87381E9B_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Kill_Init () {
    lib1_gt_UT_Kill = TriggerCreate("lib1_gt_UT_Kill_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Kill, c_playerAny, "-kill", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Remove
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Remove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup autoE10CFD41_g;
    int autoE10CFD41_u;
    unit autoE10CFD41_var;
    const int auto21573614_ae = 10;
    int auto21573614_var;
    unitgroup auto4661E677_g;
    int auto4661E677_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE10CFD41_g = UnitGroupSelected(EventPlayer());
    autoE10CFD41_u = UnitGroupCount(autoE10CFD41_g, c_unitCountAll);
    for (;; autoE10CFD41_u -= 1) {
        autoE10CFD41_var = UnitGroupUnitFromEnd(autoE10CFD41_g, autoE10CFD41_u);
        if (autoE10CFD41_var == null) { break; }
        auto21573614_var = 0;
        for ( ; auto21573614_var <= auto21573614_ae; auto21573614_var += 1 ) {
            if ((lib1_gf_TextTagForUnit(autoE10CFD41_var, auto21573614_var) != c_textTagNone)) {
                TextTagDestroy(lib1_gf_TextTagForUnit(autoE10CFD41_var, auto21573614_var));
            }

        }
        auto4661E677_g = UnitCargoGroup(autoE10CFD41_var);
        auto4661E677_u = UnitGroupCount(auto4661E677_g, c_unitCountAll);
        for (;; auto4661E677_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto4661E677_g, auto4661E677_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(autoE10CFD41_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Remove_Init () {
    lib1_gt_UT_Remove = TriggerCreate("lib1_gt_UT_Remove_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Remove, c_playerAny, "-remove", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Pause AI
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_PauseAI_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((AITimeIsPaused() == false)) {
        AITimePause(true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_42D898F8"));
    }
    else {
        AITimePause(false);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E462AA45"));
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_PauseAI_Init () {
    lib1_gt_UT_PauseAI = TriggerCreate("lib1_gt_UT_PauseAI_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_PauseAI, c_playerAny, "-pai", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Speed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Speed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA8F66466_val;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA8F66466_val = StringWord(EventChatMessage(false), 2);
    if (autoA8F66466_val == "slower") {
        GameSetSpeedValue(c_gameSpeedSlower);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_269CFA73"));
    }
    else if (autoA8F66466_val == "slow") {
        GameSetSpeedValue(c_gameSpeedSlow);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_471EEE6D"));
    }
    else if (autoA8F66466_val == "normal") {
        GameSetSpeedValue(c_gameSpeedNormal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_18212F0E"));
    }
    else if (autoA8F66466_val == "fast") {
        GameSetSpeedValue(c_gameSpeedFast);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_1AEA54A6"));
    }
    else if (autoA8F66466_val == "faster") {
        GameSetSpeedValue(c_gameSpeedFaster);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_F4DAC380"));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Speed_Init () {
    lib1_gt_UT_Speed = TriggerCreate("lib1_gt_UT_Speed_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Speed, c_playerAny, "-speed", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Supply
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Supply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vSupply;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_vSupply = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_vPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringToInt(StringWord(EventChatMessage(false), 3)) >= 2)) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 3));
    }

    PlayerModifyPropertyInt(lv_vPlayer, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv_vSupply);
    TextExpressionSetToken("Param/Expression/lib_1_D122C768", "A", IntToText(lv_vSupply));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_D122C768"));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Supply_Init () {
    lib1_gt_UT_Supply = TriggerCreate("lib1_gt_UT_Supply_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Supply, c_playerAny, "-supply", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Give
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Give_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    libNtve_gf_RescueUnit2(UnitGroupSelected(EventPlayer()), lv_vPlayer, true);
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Give_Init () {
    lib1_gt_UT_Give = TriggerCreate("lib1_gt_UT_Give_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Give, c_playerAny, "-give", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_SwitchOwner
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_SwitchOwner_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;

    // Automatic Variable Declarations
    unitgroup auto60885851_g;
    int auto60885851_u;
    unit auto60885851_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_vPlayer = 3;
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    auto60885851_g = UnitGroupSelected(EventPlayer());
    auto60885851_u = UnitGroupCount(auto60885851_g, c_unitCountAll);
    for (;; auto60885851_u -= 1) {
        auto60885851_var = UnitGroupUnitFromEnd(auto60885851_g, auto60885851_u);
        if (auto60885851_var == null) { break; }
        UnitBehaviorAddPlayer(auto60885851_var, "PXOwnership", lv_vPlayer, 1);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_SwitchOwner_Init () {
    lib1_gt_UT_SwitchOwner = TriggerCreate("lib1_gt_UT_SwitchOwner_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_SwitchOwner, c_playerAny, "-switchowner", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Cost
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Cost_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed[21] lv_vSupply;
    fixed[21] lv_vCost;
    fixed lv_vDistance;
    string lv_vRace;

    // Automatic Variable Declarations
    unitgroup auto96461A30_g;
    int auto96461A30_u;
    unit auto96461A30_var;
    const int auto11CB0F84_ae = 19;
    int auto11CB0F84_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Visual, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vDistance = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_vDistance >= 1)) {
    }
    else {
        lv_vDistance = 12.0;
    }
    auto96461A30_g = UnitGroup(null, c_playerAny, RegionCircle(CameraGetTarget(EventPlayer()), lv_vDistance), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto96461A30_u = UnitGroupCount(auto96461A30_g, c_unitCountAll);
    for (;; auto96461A30_u -= 1) {
        auto96461A30_var = UnitGroupUnitFromEnd(auto96461A30_g, auto96461A30_u);
        if (auto96461A30_var == null) { break; }
        lv_vSupply[UnitGetOwner(auto96461A30_var)] += UnitGetPropertyFixed(auto96461A30_var, c_unitPropSuppliesUsed, c_unitPropCurrent);
        lv_vCost[UnitGetOwner(auto96461A30_var)] += UnitTypeGetCost(UnitGetType(auto96461A30_var), c_unitCostSumMineralsVespene);
        TextExpressionSetToken("Param/Expression/lib_1_92318303", "A", FixedToText(UnitGetPropertyFixed(auto96461A30_var, c_unitPropSuppliesUsed, c_unitPropCurrent), c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_1_92318303", "B", FixedToText(UnitTypeGetCost(UnitGetType(auto96461A30_var), c_unitCostSumMineralsVespene), c_fixedPrecisionAny));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_1_92318303"), 24, UnitGetPosition(auto96461A30_var), 1.0, true, false, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 10.0);
        lv_vRace = lib1_gf_GetUnitRace(auto96461A30_var);
    }
    auto11CB0F84_var = 1;
    for ( ; auto11CB0F84_var <= auto11CB0F84_ae; auto11CB0F84_var += 1 ) {
        if ((lv_vSupply[auto11CB0F84_var] != 0.0) && (lv_vCost[auto11CB0F84_var] != 0.0)) {
            TextExpressionSetToken("Param/Expression/lib_1_80DC79D3", "A", IntToText(auto11CB0F84_var));
            TextExpressionSetToken("Param/Expression/lib_1_80DC79D3", "D", StringToText((lv_vRace)));
            TextExpressionSetToken("Param/Expression/lib_1_80DC79D3", "B", FixedToText(lv_vSupply[auto11CB0F84_var], c_fixedPrecisionAny));
            TextExpressionSetToken("Param/Expression/lib_1_80DC79D3", "C", FixedToText(lv_vCost[auto11CB0F84_var], c_fixedPrecisionAny));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_80DC79D3"));
            lv_vCost[20] += lv_vCost[auto11CB0F84_var];
            lv_vSupply[20] += lv_vSupply[auto11CB0F84_var];
        }

    }
    TextExpressionSetToken("Param/Expression/lib_1_F5006E98", "B", FixedToText(lv_vSupply[20], c_fixedPrecisionAny));
    TextExpressionSetToken("Param/Expression/lib_1_F5006E98", "C", FixedToText(lv_vCost[20], c_fixedPrecisionAny));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_F5006E98"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Cost_Init () {
    lib1_gt_UT_Cost = TriggerCreate("lib1_gt_UT_Cost_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Cost, c_playerAny, "-cost", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_clearscreen
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_clearscreen_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vPlayer;
    unit lv_vInnerUnit;

    // Automatic Variable Declarations
    unitgroup auto17BA0D77_g;
    int auto17BA0D77_u;
    unit auto17BA0D77_var;
    const int autoE7D98333_ae = 10;
    int autoE7D98333_var;
    unitgroup auto299AA7CA_g;
    int auto299AA7CA_u;
    unitgroup auto51AB62B5_g;
    int auto51AB62B5_u;
    unit auto51AB62B5_var;
    const int auto873BA744_ae = 10;
    int auto873BA744_var;
    unitgroup auto33AD72BE_g;
    int auto33AD72BE_u;

    // Variable Initialization
    lv_vPlayer = c_playerAny;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "unsel")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_EC797054"));
        auto17BA0D77_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
        auto17BA0D77_u = UnitGroupCount(auto17BA0D77_g, c_unitCountAll);
        for (;; auto17BA0D77_u -= 1) {
            auto17BA0D77_var = UnitGroupUnitFromEnd(auto17BA0D77_g, auto17BA0D77_u);
            if (auto17BA0D77_var == null) { break; }
            if ((UnitTypeTestFlag(UnitGetType(auto17BA0D77_var), c_unitFlagUnselectable) == true)) {
                autoE7D98333_var = 0;
                for ( ; autoE7D98333_var <= autoE7D98333_ae; autoE7D98333_var += 1 ) {
                    if ((lib1_gf_TextTagForUnit(auto17BA0D77_var, autoE7D98333_var) != c_textTagNone)) {
                        TextTagDestroy(lib1_gf_TextTagForUnit(auto17BA0D77_var, autoE7D98333_var));
                    }

                }
                auto299AA7CA_g = UnitCargoGroup(auto17BA0D77_var);
                auto299AA7CA_u = UnitGroupCount(auto299AA7CA_g, c_unitCountAll);
                for (;; auto299AA7CA_u -= 1) {
                    lv_vInnerUnit = UnitGroupUnitFromEnd(auto299AA7CA_g, auto299AA7CA_u);
                    if (lv_vInnerUnit == null) { break; }
                    UnitRemove(lv_vInnerUnit);
                }
                UnitRemove(auto17BA0D77_var);
            }

        }
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    TextExpressionSetToken("Param/Expression/lib_1_04F7B285", "A", IntToText(lv_vPlayer));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_04F7B285"));
    auto51AB62B5_g = UnitGroup(null, lv_vPlayer, RegionCircle(CameraGetTarget(EventPlayer()), 15.0), UnitFilter(0, 0, 0, 0), 0);
    auto51AB62B5_u = UnitGroupCount(auto51AB62B5_g, c_unitCountAll);
    for (;; auto51AB62B5_u -= 1) {
        auto51AB62B5_var = UnitGroupUnitFromEnd(auto51AB62B5_g, auto51AB62B5_u);
        if (auto51AB62B5_var == null) { break; }
        auto873BA744_var = 0;
        for ( ; auto873BA744_var <= auto873BA744_ae; auto873BA744_var += 1 ) {
            if ((lib1_gf_TextTagForUnit(auto51AB62B5_var, auto873BA744_var) != c_textTagNone)) {
                TextTagDestroy(lib1_gf_TextTagForUnit(auto51AB62B5_var, auto873BA744_var));
            }

        }
        auto33AD72BE_g = UnitCargoGroup(auto51AB62B5_var);
        auto33AD72BE_u = UnitGroupCount(auto33AD72BE_g, c_unitCountAll);
        for (;; auto33AD72BE_u -= 1) {
            lv_vInnerUnit = UnitGroupUnitFromEnd(auto33AD72BE_g, auto33AD72BE_u);
            if (lv_vInnerUnit == null) { break; }
            UnitRemove(lv_vInnerUnit);
        }
        UnitRemove(auto51AB62B5_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_clearscreen_Init () {
    lib1_gt_UT_clearscreen = TriggerCreate("lib1_gt_UT_clearscreen_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_clearscreen, c_playerAny, "-clearscreen", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Clear Enemy
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_ClearEnemy_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto2016032C_g;
    int auto2016032C_u;
    unit auto2016032C_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2016032C_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterUser1) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterMapBoss - 32))), 0);
    auto2016032C_u = UnitGroupCount(auto2016032C_g, c_unitCountAll);
    for (;; auto2016032C_u -= 1) {
        auto2016032C_var = UnitGroupUnitFromEnd(auto2016032C_g, auto2016032C_u);
        if (auto2016032C_var == null) { break; }
        UnitRemove(auto2016032C_var);
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_ClearEnemy_Init () {
    lib1_gt_UT_ClearEnemy = TriggerCreate("lib1_gt_UT_ClearEnemy_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_ClearEnemy, c_playerAny, "-clearenemy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Spawn Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_SpawnUnits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vAmount;
    int lv_vPlayer;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }

        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_vAmount = 1;
    }
    else {
        lv_vAmount = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((StringWord(EventChatMessage(false), 4) == "")) {
        lv_vPlayer = EventPlayer();
    }
    else {
        lv_vPlayer = StringToInt(StringWord(EventChatMessage(false), 4));
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(lv_vAmount, UnitTypeFromString(StringWord(EventChatMessage(false), 2)), 0, lv_vPlayer, CameraGetTarget(EventPlayer()));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_SpawnUnits_Init () {
    lib1_gt_UT_SpawnUnits = TriggerCreate("lib1_gt_UT_SpawnUnits_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_SpawnUnits, c_playerAny, "-spawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Control
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Control_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoBBB0F938_g;
    int autoBBB0F938_var;
    playergroup autoCB5AE665_g;
    int autoCB5AE665_var;
    playergroup auto25496EFA_g;
    int auto25496EFA_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "other")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_3099869C"));
        autoBBB0F938_g = PlayerGroupAll();
        autoBBB0F938_var = -1;
        while (true) {
            autoBBB0F938_var = PlayerGroupNextPlayer(autoBBB0F938_g, autoBBB0F938_var);
            if (autoBBB0F938_var < 0) { break; }
            if ((libNtve_gf_PlayerIsEnemy(autoBBB0F938_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == false)) {
                PlayerSetAlliance(autoBBB0F938_var, c_allianceIdControl, EventPlayer(), true);
            }

        }
    }
    else {
        if ((PlayerGetAlliance(3, c_allianceIdControl, EventPlayer()) == false)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9C9E35D5"));
            auto25496EFA_g = PlayerGroupAll();
            auto25496EFA_var = -1;
            while (true) {
                auto25496EFA_var = PlayerGroupNextPlayer(auto25496EFA_g, auto25496EFA_var);
                if (auto25496EFA_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(auto25496EFA_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(auto25496EFA_var, c_allianceIdControl, EventPlayer(), true);
                }

            }
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_8C3C7AE4"));
            autoCB5AE665_g = PlayerGroupAll();
            autoCB5AE665_var = -1;
            while (true) {
                autoCB5AE665_var = PlayerGroupNextPlayer(autoCB5AE665_g, autoCB5AE665_var);
                if (autoCB5AE665_var < 0) { break; }
                if ((libNtve_gf_PlayerIsEnemy(autoCB5AE665_var, EventPlayer(), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    PlayerSetAlliance(autoCB5AE665_var, c_allianceIdControl, EventPlayer(), false);
                }

            }
        }
    }
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Control_Init () {
    lib1_gt_UT_Control = TriggerCreate("lib1_gt_UT_Control_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Control, c_playerAny, "-control", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Resource
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_Resource_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_UT_DevCommandsActive(lib1_ge_UT_DevCommandTypes_Gamealtering, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 2)));
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperSetTo, StringToInt(StringWord(EventChatMessage(false), 3)));
    lib1_gf_UT_Cheat();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_Resource_Init () {
    lib1_gt_UT_Resource = TriggerCreate("lib1_gt_UT_Resource_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_Resource, c_playerAny, "-resource", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_DebugApplySkin
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DebugApplySkin_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 3)) >= 1)) {
        PlayerApplySkin(StringToInt(StringWord(EventChatMessage(false), 3)), (StringWord(EventChatMessage(false), 2)), true);
    }
    else {
        PlayerApplySkin(EventPlayer(), (StringWord(EventChatMessage(false), 2)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DebugApplySkin_Init () {
    lib1_gt_UT_DebugApplySkin = TriggerCreate("lib1_gt_UT_DebugApplySkin_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DebugApplySkin, c_playerAny, "-skin", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UT_Debug Mode
//--------------------------------------------------------------------------------------------------
bool lib1_gt_UT_DebugMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(lib1_gt_UT_FastBuild, true, false);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, 50000);
    PlayerModifyPropertyInt(EventPlayer(), c_playerPropVespene, c_playerPropOperAdd, 50000);
    VisRevealerCreate(EventPlayer(), RegionEntireMap());
    lib1_gv_uT_Revealer = VisRevealerLastCreated();
    lib1_gv_uT_Revealed = true;
    lib1_gf_UT_Cheat();
    TriggerEnable(lib1_gt_UT_CTRLC, true);
    TriggerEnable(lib1_gt_UT_CTRLV, true);
    PlayerGroupAdd(lib1_gv_uT_PlayersWithNumbers, EventPlayer());
    TriggerEnable(lib1_gt_UT_NumbersDamage, true);
    TriggerEnable(lib1_gt_UT_NumbersHeal, true);
    TriggerEnable(lib1_gt_UT_UI_CtrlH, true);
    TriggerEnable(lib1_gt_UpgradeChanged, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_UT_DebugMode_Init () {
    lib1_gt_UT_DebugMode = TriggerCreate("lib1_gt_UT_DebugMode_Func");
    TriggerAddEventChatMessage(lib1_gt_UT_DebugMode, c_playerAny, "Debug Mode", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewUpdate
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CU_MinimapAllyViewUpdate_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingSetPosition(lib1_gv_cU_MinimapAllyViewPing[EventPlayer()], CameraGetTarget(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CU_MinimapAllyViewUpdate_Init () {
    lib1_gt_CU_MinimapAllyViewUpdate = TriggerCreate("lib1_gt_CU_MinimapAllyViewUpdate_Func");
    TriggerEnable(lib1_gt_CU_MinimapAllyViewUpdate, false);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 0, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 11, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 12, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 13, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 14, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(lib1_gt_CU_MinimapAllyViewUpdate, 15, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyPlayerLeaves
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CU_MinimapAllyPlayerLeaves_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(lib1_gv_cU_MinimapAllyViewPing[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CU_MinimapAllyPlayerLeaves_Init () {
    lib1_gt_CU_MinimapAllyPlayerLeaves = TriggerCreate("lib1_gt_CU_MinimapAllyPlayerLeaves_Func");
    TriggerEnable(lib1_gt_CU_MinimapAllyPlayerLeaves, false);
    TriggerAddEventPlayerLeft(lib1_gt_CU_MinimapAllyPlayerLeaves, c_playerAny, c_gameResultVictory);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CU_MinimapAllyViewCamera
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CU_MinimapAllyViewCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyPlayer;
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup auto3D9FAC71_g;
    int auto3D9FAC71_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D9FAC71_g = PlayerGroupAlliance(c_playerGroupAlly, EventPlayer());
    auto3D9FAC71_var = -1;
    while (true) {
        auto3D9FAC71_var = PlayerGroupNextPlayer(auto3D9FAC71_g, auto3D9FAC71_var);
        if (auto3D9FAC71_var < 0) { break; }
        if ((PlayerType(auto3D9FAC71_var) == c_playerTypeUser) && (PlayerStatus(auto3D9FAC71_var) == c_playerStatusActive)) {
            PlayerGroupAdd(lv_playerGroup, auto3D9FAC71_var);
        }

    }
    if ((EventKeyShift() == true) && (PlayerGroupCount(lv_playerGroup) > 1)) {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 2);
    }
    else {
        lv_allyPlayer = PlayerGroupPlayer(lv_playerGroup, 1);
    }
    CameraPan(EventPlayer(), CameraGetTarget(lv_allyPlayer), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CU_MinimapAllyViewCamera_Init () {
    lib1_gt_CU_MinimapAllyViewCamera = TriggerCreate("lib1_gt_CU_MinimapAllyViewCamera_Func");
    TriggerEnable(lib1_gt_CU_MinimapAllyViewCamera, false);
    TriggerAddEventKeyPressed(lib1_gt_CU_MinimapAllyViewCamera, c_playerAny, c_keyV, true, c_keyModifierStateIgnore, c_keyModifierStateExclude, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: <-all> Setup Unit Tester Faction (All Units)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_allSetupUnitTesterFactionAllUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetupUnitTesterFactionAllUnitsSearch("");
    lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_allSetupUnitTesterFactionAllUnits_Init () {
    lib1_gt_allSetupUnitTesterFactionAllUnits = TriggerCreate("lib1_gt_allSetupUnitTesterFactionAllUnits_Func");
    TriggerAddEventChatMessage(lib1_gt_allSetupUnitTesterFactionAllUnits, c_playerAny, "-all", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: <-search> Setup Unit Tester Faction (Search)
//--------------------------------------------------------------------------------------------------
bool lib1_gt_searchSetupUnitTesterFactionSearch_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetupUnitTesterFactionAllUnitsSearch(StringWord(EventChatMessage(false), 2));
    lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_searchSetupUnitTesterFactionSearch_Init () {
    lib1_gt_searchSetupUnitTesterFactionSearch = TriggerCreate("lib1_gt_searchSetupUnitTesterFactionSearch_Func");
    TriggerAddEventChatMessage(lib1_gt_searchSetupUnitTesterFactionSearch, c_playerAny, "-search ", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: <-available> Setup Unit Tester Faction (Smart) Available
//--------------------------------------------------------------------------------------------------
bool lib1_gt_availableSetupUnitTesterFactionSmartAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetupUnitTesterFactionSmartAllRaces(false);
    lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_availableSetupUnitTesterFactionSmartAvailable_Init () {
    lib1_gt_availableSetupUnitTesterFactionSmartAvailable = TriggerCreate("lib1_gt_availableSetupUnitTesterFactionSmartAvailable_Func");
    TriggerAddEventChatMessage(lib1_gt_availableSetupUnitTesterFactionSmartAvailable, c_playerAny, "-available", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: <-restricted> Setup Unit Tester Faction (Smart) Restricted
//--------------------------------------------------------------------------------------------------
bool lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_SetupUnitTesterFactionSmartAllRaces(true);
    lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted_Init () {
    lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted = TriggerCreate("lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted_Func");
    TriggerAddEventChatMessage(lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted, c_playerAny, "-restricted", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Start Button
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterStartButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto38B64DE5_g;
    int auto38B64DE5_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_attack_mode = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_86582682"));
    CreepSetSpeed(c_creepSpeedGrowth, 100.0);
    CreepSetSpeed(c_creepSpeedDecay, 100.0);
    CreepSetSpeed(c_creepSpeedBlend, 100.0);
    lib1_gf_SaveTesterUnits();
    TriggerEnable(lib1_gt_LeaderboardUnitCreated, false);
    TriggerEnable(lib1_gt_LeaderboardUnitRemoved, false);
    BoardMinimizeSetState(lib1_gv_leaderboard, PlayerGroupActive(), true);
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Enemy);
    auto38B64DE5_g = PlayerGroupActive();
    auto38B64DE5_var = -1;
    while (true) {
        auto38B64DE5_var = PlayerGroupNextPlayer(auto38B64DE5_g, auto38B64DE5_var);
        if (auto38B64DE5_var < 0) { break; }
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), auto38B64DE5_var, false);
    }
    lib1_gf_ResetTesterUnits();
    TimerRestart(lib1_gv_test_timer);
    TimerWindowCreate(lib1_gv_test_timer, StringExternal("UI/VictoryMissionTime_Colon"), true, true);
    lib1_gv_test_timer_window = TimerWindowLastCreated();
    if ((lib1_gf_NoUnitsForSide(0) == false) && (lib1_gf_NoUnitsForSide(1) == false)) {
        TriggerEnable(lib1_gt_TesterResult, true);
    }

    lib1_gf_ShowGameInterface();
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterStartButton_Init () {
    lib1_gt_TesterStartButton = TriggerCreate("lib1_gt_TesterStartButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Stop Button
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterStopButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoA27B97B7_g;
    int autoA27B97B7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_attack_mode = false;
    lib1_gv_pause = false;
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_53B44744"));
    CreepSetSpeed(c_creepSpeedGrowth, 1000.0);
    CreepSetSpeed(c_creepSpeedDecay, 1000.0);
    CreepSetSpeed(c_creepSpeedBlend, 1000.0);
    TimerWindowDestroy(lib1_gv_test_timer_window);
    lib1_gf_ResetTesterUnits();
    libNtve_gf_SetAlliance(9, 10, libNtve_ge_AllianceSetting_Neutral);
    autoA27B97B7_g = PlayerGroupActive();
    autoA27B97B7_var = -1;
    while (true) {
        autoA27B97B7_var = PlayerGroupNextPlayer(autoA27B97B7_g, autoA27B97B7_var);
        if (autoA27B97B7_var < 0) { break; }
        UnitGroupSelect(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0), autoA27B97B7_var, false);
    }
    lib1_gf_MovePlayerCameras();
    BoardMinimizeSetState(lib1_gv_leaderboard, PlayerGroupActive(), false);
    lib1_gf_HideGameInterface();
    TriggerEnable(lib1_gt_TesterResult, false);
    Wait(0.0625, c_timeGame);
    TriggerEnable(lib1_gt_LeaderboardUnitCreated, true);
    TriggerEnable(lib1_gt_LeaderboardUnitRemoved, true);
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterStopButton_Init () {
    lib1_gt_TesterStopButton = TriggerCreate("lib1_gt_TesterStopButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Attack Button
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterAttackButton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_units;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_units = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_data_player[EventPlayer()].lv_ctrl == false) && (lib1_gv_data_player[EventPlayer()].lv_shift == true)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D7138021"));
        PlayerSetDifficulty(9, 7);
        AISetAPM(9, 900);
        AIMeleeStart(9);
    }
    else if ((lib1_gv_data_player[EventPlayer()].lv_ctrl == true) && (lib1_gv_data_player[EventPlayer()].lv_shift == false)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_BD2143A3"));
        PlayerSetDifficulty(10, 7);
        AISetAPM(10, 900);
        AIMeleeStart(10);
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_C0582BBA"));
        PlayerSetDifficulty(9, 7);
        AISetAPM(9, 900);
        AIMeleeStart(9);
        PlayerSetDifficulty(10, 7);
        AISetAPM(10, 900);
        AIMeleeStart(10);
    }
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterAttackButton_Init () {
    lib1_gt_TesterAttackButton = TriggerCreate("lib1_gt_TesterAttackButton_Func");
    TriggerAddEventKeyPressed(lib1_gt_TesterAttackButton, c_playerAny, c_keyPeriod, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Side Button
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterSideButton_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_chosenSide[EventPlayer()] == 0)) {
        lib1_gv_chosenSide[EventPlayer()] = 1;
    }
    else {
        lib1_gv_chosenSide[EventPlayer()] = 0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterSideButton_Init () {
    lib1_gt_TesterSideButton = TriggerCreate("lib1_gt_TesterSideButton_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Clear Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterClearUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D829C31E"));
    lib1_gf_DeleteAllTesterUnits();
    lib1_gf_TesterLeaderboardCreate();
    Wait(1.0, c_timeGame);
    lib1_gf_RestoreMapStructures();
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterClearUnits_Init () {
    lib1_gt_TesterClearUnits = TriggerCreate("lib1_gt_TesterClearUnits_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Delete Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterDeleteUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto3B627018_g;
    int auto3B627018_u;
    unit auto3B627018_var;

    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == false))) {
            return false;
        }

        if (!((lib1_gv_data_player[EventPlayer()].lv_creator_access == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_NavButtonSelect", -1), PlayerGroupActive(), 100.0, 0.0);
    auto3B627018_g = UnitGroupSelected(EventPlayer());
    auto3B627018_u = UnitGroupCount(auto3B627018_g, c_unitCountAll);
    for (;; auto3B627018_u -= 1) {
        auto3B627018_var = UnitGroupUnitFromEnd(auto3B627018_g, auto3B627018_u);
        if (auto3B627018_var == null) { break; }
        if ((libNtve_gf_UnitIsInvulnerable(auto3B627018_var) == false)) {
            UnitKill(auto3B627018_var);
            if ((UnitGetOwner(auto3B627018_var) == lib1_gv_side_player[0])) {
                lib1_gv_data_player[EventPlayer()].lv_creator_side = 0;
            }
            else if ((UnitGetOwner(auto3B627018_var) == lib1_gv_side_player[1])) {
                lib1_gv_data_player[EventPlayer()].lv_creator_side = 1;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterDeleteUnits_Init () {
    lib1_gt_TesterDeleteUnits = TriggerCreate("lib1_gt_TesterDeleteUnits_Func");
    TriggerAddEventKeyPressed(lib1_gt_TesterDeleteUnits, c_playerAny, c_keyBackSpace, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Pause Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterPauseUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib1_gv_pause == false)) {
        TimerPause(lib1_gv_test_timer, true);
        UnitPauseAll(true);
        lib1_gv_pause = true;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/lib_1_4326F1E0"));
        TriggerStop(lib1_gt_TesterPauseUnits);
    }
    else {
        TimerPause(lib1_gv_test_timer, false);
        UnitPauseAll(false);
        lib1_gv_pause = false;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/lib_1_447469C0"));
        Wait(2.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    lib1_gf_RenderTesterUIForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterPauseUnits_Init () {
    lib1_gt_TesterPauseUnits = TriggerCreate("lib1_gt_TesterPauseUnits_Func");
    TriggerAddEventKeyPressed(lib1_gt_TesterPauseUnits, c_playerAny, c_keyMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib1_gt_TesterPauseUnits, c_playerAny, c_keyNumPadMinus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Reset Units
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterResetUnits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_pause = false;
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D98DF3D1"));
    lib1_gf_ResetTesterUnits();
    if ((lib1_gf_NoUnitsForSide(0) == false) && (lib1_gf_NoUnitsForSide(1) == false)) {
        TriggerEnable(lib1_gt_TesterResult, true);
    }

    lib1_gf_RenderTesterUIForAllPlayers();
    Wait(1.0, c_timeGame);
    UIClearMessages(PlayerGroupActive(), c_messageAreaSubtitle);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterResetUnits_Init () {
    lib1_gt_TesterResetUnits = TriggerCreate("lib1_gt_TesterResetUnits_Func");
    TriggerAddEventKeyPressed(lib1_gt_TesterResetUnits, c_playerAny, c_keyEquals, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
    TriggerAddEventKeyPressed(lib1_gt_TesterResetUnits, c_playerAny, c_keyNumPadPlus, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Race Button Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_RaceButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1656063F_ae = lib1_gv_tMAXFACTIONS;
    int auto1656063F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto1656063F_var = 1;
    for ( ; auto1656063F_var <= auto1656063F_ae; auto1656063F_var += 1 ) {
        if ((EventDialogControl() == lib1_gv_creator_racebutton[auto1656063F_var])) {
            lib1_gv_creator_selectedRace[EventPlayer()] = lib1_gf_ListStringGet(lib1_gv_factions, auto1656063F_var);
            lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_RaceButtonClicked_Init () {
    lib1_gt_RaceButtonClicked = TriggerCreate("lib1_gt_RaceButtonClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_RaceButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Arrow Button Clicked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ArrowButtonClicked_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto2729A0FF_ae = 2;
    int auto2729A0FF_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2729A0FF_var = 0;
    for ( ; auto2729A0FF_var <= auto2729A0FF_ae; auto2729A0FF_var += 1 ) {
        if ((EventDialogControl() == lib1_gv_creator_bottomButton[auto2729A0FF_var])) {
            lib1_gv_placementCardOffset[auto2729A0FF_var] += 1;
            lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
        if ((EventDialogControl() == lib1_gv_creator_upButton[auto2729A0FF_var])) {
            lib1_gv_placementCardOffset[auto2729A0FF_var] -= 1;
            lib1_gf_RenderUnitTesterPlacementCard(EventPlayer());
            return true;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ArrowButtonClicked_Init () {
    lib1_gt_ArrowButtonClicked = TriggerCreate("lib1_gt_ArrowButtonClicked_Func");
    TriggerAddEventDialogControl(lib1_gt_ArrowButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Card Button Cliked
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CardButtonCliked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cardlayout;
    string lv_unit;
    string lv_upgrade;

    // Automatic Variable Declarations
    int auto74C90739_ae;
    int auto74C90739_var;
    int autoDE518B72_ae;
    int autoDE518B72_var;
    int auto9D59BB31_ae;
    int auto9D59BB31_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cardlayout = 0;
    auto74C90739_ae = (lib1_gv_placementCardColumns * lib1_gv_placementCardRows);
    auto74C90739_var = 0;
    for ( ; auto74C90739_var <= auto74C90739_ae; auto74C90739_var += 1 ) {
        if ((EventDialogControl() == lib1_gv_creator_itembutton[lv_cardlayout][auto74C90739_var])) {
            lv_unit = (lib1_gv_creator_itemunit[lv_cardlayout][auto74C90739_var]);
            break;
        }
    }
    if ((lv_unit != null)) {
        lib1_gf_CreatorAddUnits(1, lib1_gv_chosenSide[EventPlayer()], lv_unit);
        UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
        return true;
    }
    lv_cardlayout = 1;
    autoDE518B72_ae = (lib1_gv_placementCardColumns * lib1_gv_placementCardRows);
    autoDE518B72_var = 0;
    for ( ; autoDE518B72_var <= autoDE518B72_ae; autoDE518B72_var += 1 ) {
        if ((EventDialogControl() == lib1_gv_creator_itembutton[lv_cardlayout][autoDE518B72_var])) {
            lv_unit = (lib1_gv_creator_itemunit[lv_cardlayout][autoDE518B72_var]);
            break;
        }
    }
    if ((lv_unit != null)) {
        lib1_gf_CreatorAddUnits(1, lib1_gv_chosenSide[EventPlayer()], lv_unit);
        UnitGroupSelect(UnitLastCreatedGroup(), EventPlayer(), true);
        return true;
    }
    lv_cardlayout = 2;
    auto9D59BB31_ae = (lib1_gv_placementCardColumns * lib1_gv_placementCardRows);
    auto9D59BB31_var = 0;
    for ( ; auto9D59BB31_var <= auto9D59BB31_ae; auto9D59BB31_var += 1 ) {
        if ((EventDialogControl() == lib1_gv_creator_itembutton[lv_cardlayout][auto9D59BB31_var])) {
            lv_upgrade = (lib1_gv_creator_itemunit[lv_cardlayout][auto9D59BB31_var]);
            break;
        }
    }
    if ((lv_upgrade != null)) {
        lib1_gf_CreatorAddUpgrade2(lib1_gv_chosenSide[EventPlayer()], lv_upgrade);
        return true;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CardButtonCliked_Init () {
    lib1_gt_CardButtonCliked = TriggerCreate("lib1_gt_CardButtonCliked_Func");
    TriggerAddEventDialogControl(lib1_gt_CardButtonCliked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Unit Created
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeaderboardUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    string lv_unit_name;
    int lv_col;
    int lv_row;
    int lv_unit_count;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(EventUnitCreatedUnit());

    // Conditions
    if (testConds) {
        if (!((lib1_gf_TesterLeaderboardValidUnitType(lv_unit_type) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit_name = (lv_unit_type);
    lv_unit_count = UnitGroupCount(UnitGroup(lv_unit_type, UnitGetOwner(EventUnitCreatedUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_col = (UnitGetOwner(EventUnitCreatedUnit()) - lib1_gv_const_players);
    if ((DataTableValueExists(true, lv_unit_name) == false)) {
        lv_row = lib1_gf_TesterLeaderboardAddRow(lv_unit_name);
    }
    else {
        lv_row = DataTableGetInt(true, lv_unit_name);
    }
    lib1_gv_leaderboard_minerals[lv_col] += UnitTypeGetCost(lv_unit_type, c_unitCostMinerals);
    lib1_gv_leaderboard_gas[lv_col] += UnitTypeGetCost(lv_unit_type, c_unitCostVespene);
    lib1_gf_TesterLeaderboardSpecialUnitCost(EventUnitCreatedUnit(), lv_unit_type, lv_col, false);
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 1, IntToText(lib1_gv_leaderboard_minerals[lv_col]));
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 2, IntToText(lib1_gv_leaderboard_gas[lv_col]));
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 3, IntToText(PlayerGetPropertyInt(UnitGetOwner(EventUnitCreatedUnit()), c_playerPropSuppliesUsed)));
    BoardItemSetText(lib1_gv_leaderboard, lv_col, lv_row, IntToText(lv_unit_count));
    if ((lib1_gv_leaderboard_icon_flag[lv_col][lv_row] == false)) {
        lib1_gf_TesterLeaderboardAddIcon(lv_unit_type, lv_col, lv_row);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeaderboardUnitCreated_Init () {
    lib1_gt_LeaderboardUnitCreated = TriggerCreate("lib1_gt_LeaderboardUnitCreated_Func");
    TriggerAddEventUnitCreated(lib1_gt_LeaderboardUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leaderboard Unit Removed
//--------------------------------------------------------------------------------------------------
bool lib1_gt_LeaderboardUnitRemoved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_unit_type;
    string lv_unit_name;
    int lv_col;
    int lv_row;
    int lv_unitcount;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit_type = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageDeathCheck(c_deathTypeRemove) == false))) {
            return false;
        }

        if (!((lib1_gf_TesterLeaderboardValidUnitType(lv_unit_type) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit_name = (lv_unit_type);
    lv_col = (UnitGetOwner(EventUnit()) - 8);
    lv_row = DataTableGetInt(true, lv_unit_name);
    lib1_gv_leaderboard_minerals[lv_col] -= UnitTypeGetCost(lv_unit_type, c_unitCostMinerals);
    lib1_gv_leaderboard_gas[lv_col] -= UnitTypeGetCost(lv_unit_type, c_unitCostVespene);
    lib1_gf_TesterLeaderboardSpecialUnitCost(EventUnit(), lv_unit_type, lv_col, true);
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 1, IntToText(lib1_gv_leaderboard_minerals[lv_col]));
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 2, IntToText(lib1_gv_leaderboard_gas[lv_col]));
    BoardItemSetText(lib1_gv_leaderboard, lv_col, 3, IntToText(PlayerGetPropertyInt(UnitGetOwner(EventUnit()), c_playerPropSuppliesUsed)));
    lv_unitcount = UnitGroupCount(UnitGroup(lv_unit_type, UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unitcount == 0)) {
        BoardItemSetText(lib1_gv_leaderboard, lv_col, lv_row, StringToText(""));
        BoardItemSetIcon(lib1_gv_leaderboard, lv_col, lv_row, null, true);
        lib1_gv_leaderboard_icon_flag[lv_col][lv_row] = false;
    }
    else {
        BoardItemSetText(lib1_gv_leaderboard, lv_col, lv_row, IntToText(lv_unitcount));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_LeaderboardUnitRemoved_Init () {
    lib1_gt_LeaderboardUnitRemoved = TriggerCreate("lib1_gt_LeaderboardUnitRemoved_Func");
    TriggerAddEventUnitDied(lib1_gt_LeaderboardUnitRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tester Result
//--------------------------------------------------------------------------------------------------
bool lib1_gt_TesterResult_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int[2] lv_unit_count;
    int lv_mineral_count;
    int lv_gas_count;
    int lv_food_count;
    int lv_winning_player;
    text lv_winning_text;
    int lv_winning_count;

    // Automatic Variable Declarations
    unitgroup auto452EC8E8_g;
    int auto452EC8E8_u;
    unit auto452EC8E8_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((lib1_gf_NoUnitsForSide(0) == true) || (lib1_gf_NoUnitsForSide(1) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(lib1_gt_TesterResult, false);
    Wait(1.0, c_timeGame);
    lv_unit_count[0] = UnitGroupCount(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    lv_unit_count[1] = UnitGroupCount(UnitGroup(null, 10, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0), c_unitCountAlive);
    if ((lv_unit_count[0] == 0) && (lv_unit_count[1] == 0)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_E7D041FC"));
        return true;
    }
    else if ((lv_unit_count[0] == 0)) {
        lv_winning_count = lv_unit_count[1];
        lv_winning_player = lib1_gv_side_player[1];
        lv_winning_text = StringExternal("Param/Value/lib_1_FF5DB947");
    }
    else if ((lv_unit_count[1] == 0)) {
        lv_winning_count = lv_unit_count[0];
        lv_winning_player = lib1_gv_side_player[0];
        lv_winning_text = StringExternal("Param/Value/lib_1_EDA6C2D2");
    }
    auto452EC8E8_g = UnitGroup(null, lv_winning_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    auto452EC8E8_u = UnitGroupCount(auto452EC8E8_g, c_unitCountAll);
    for (;; auto452EC8E8_u -= 1) {
        auto452EC8E8_var = UnitGroupUnitFromEnd(auto452EC8E8_g, auto452EC8E8_u);
        if (auto452EC8E8_var == null) { break; }
        lv_mineral_count += UnitTypeGetCost(UnitGetType(auto452EC8E8_var), c_unitCostMinerals);
        lv_gas_count += UnitTypeGetCost(UnitGetType(auto452EC8E8_var), c_unitCostVespene);
    }
    lv_food_count = PlayerGetPropertyInt(lv_winning_player, c_playerPropSuppliesUsed);
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "A", lv_winning_text);
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "B", IntToText(lv_winning_count));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "C", StringExternal("UI/Icon22_Minerals_Terr"));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "D", IntToText(lv_mineral_count));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "E", StringExternal("UI/Icon22_Vespene_Terr"));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "F", IntToText(lv_gas_count));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "G", StringExternal("UI/Icon22_Supply_Terr"));
    TextExpressionSetToken("Param/Expression/lib_1_9C1542A5", "H", IntToText(lv_food_count));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_1_9C1542A5"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_TesterResult_Init () {
    lib1_gt_TesterResult = TriggerCreate("lib1_gt_TesterResult_Func");
    TriggerEnable(lib1_gt_TesterResult, false);
    TriggerAddEventTimePeriodic(lib1_gt_TesterResult, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Instant Build
//--------------------------------------------------------------------------------------------------
bool lib1_gt_InstantBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    UnitSetProgressComplete(EventUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_InstantBuild_Init () {
    lib1_gt_InstantBuild = TriggerCreate("lib1_gt_InstantBuild_Func");
    TriggerEnable(lib1_gt_InstantBuild, false);
    TriggerAddEventUnitArmMagazineProgress(lib1_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitConstructProgress(lib1_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(lib1_gt_InstantBuild, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(lib1_gt_InstantBuild, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Structures
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DisableStructures_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gv_attack_mode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(EventUnitProgressUnit(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DisableStructures_Init () {
    lib1_gt_DisableStructures = TriggerCreate("lib1_gt_DisableStructures_Func");
    TriggerAddEventUnitConstructProgress(lib1_gt_DisableStructures, null, c_unitProgressStageStart);
    TriggerAddEventUnitTrainProgress(lib1_gt_DisableStructures, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Neutral Structure
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CreateNeutralStructure_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((lib1_gf_GetUnitRace(EventUnitCreatedUnit()) == "Neut"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitCreatedUnit(), 0, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CreateNeutralStructure_Init () {
    lib1_gt_CreateNeutralStructure = TriggerCreate("lib1_gt_CreateNeutralStructure_Func");
    TriggerAddEventUnitCreated(lib1_gt_CreateNeutralStructure, null, "CustomBuild", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl Off
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CtrlOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_data_player[EventPlayer()].lv_ctrl = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CtrlOff_Init () {
    lib1_gt_CtrlOff = TriggerCreate("lib1_gt_CtrlOff_Func");
    TriggerAddEventKeyPressed(lib1_gt_CtrlOff, c_playerAny, c_keyControl, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ctrl On
//--------------------------------------------------------------------------------------------------
bool lib1_gt_CtrlOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_data_player[EventPlayer()].lv_ctrl = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_CtrlOn_Init () {
    lib1_gt_CtrlOn = TriggerCreate("lib1_gt_CtrlOn_Func");
    TriggerAddEventKeyPressed(lib1_gt_CtrlOn, c_playerAny, c_keyControl, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift Off
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShiftOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_data_player[EventPlayer()].lv_shift = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShiftOff_Init () {
    lib1_gt_ShiftOff = TriggerCreate("lib1_gt_ShiftOff_Func");
    TriggerAddEventKeyPressed(lib1_gt_ShiftOff, c_playerAny, c_keyShift, false, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shift On
//--------------------------------------------------------------------------------------------------
bool lib1_gt_ShiftOn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_data_player[EventPlayer()].lv_shift = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_ShiftOn_Init () {
    lib1_gt_ShiftOn = TriggerCreate("lib1_gt_ShiftOn_Func");
    TriggerAddEventKeyPressed(lib1_gt_ShiftOn, c_playerAny, c_keyShift, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Item Is Used
//--------------------------------------------------------------------------------------------------
bool lib1_gt_DialogItemIsUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ii;
    int lv_jj;
    int lv_level_ii;
    string lv_unit;
    string lv_commander;

    // Automatic Variable Declarations
    const int autoD76D4EF0_ae = 8;
    int autoD76D4EF0_var;
    const int autoDD3ACD45_ae = 8;
    int autoDD3ACD45_var;
    const int auto48D1AFE1_ae = lib1_gv_const_terrains;
    const int auto48D1AFE1_ai = 1;
    const int auto716A5663_ae = lib1_gv_const_players;
    const int auto716A5663_ai = 1;
    const int autoF8E9C79A_ae = lib1_gv_tMAXFACTIONS;
    int autoF8E9C79A_var;
    const int autoFA7FA56E_ae = 1;
    const int autoFA7FA56E_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventDialogControl() == lib1_gv_menu_mode_settings)) {
        if ((lib1_gv_data_player[EventPlayer()].lv_menu_mode == 1)) {
            lib1_gv_data_player[EventPlayer()].lv_menu_mode = 0;
        }
        else {
            lib1_gv_data_player[EventPlayer()].lv_menu_mode = 1;
        }
        lib1_gf_RenderTesterUIForPlayer(EventPlayer());
        return true;
    }

    if ((EventDialogControl() == lib1_gv_menu_mode_creator)) {
        if ((lib1_gv_data_player[EventPlayer()].lv_menu_mode == 2)) {
            lib1_gv_data_player[EventPlayer()].lv_menu_mode = 0;
        }
        else {
            lib1_gv_data_player[EventPlayer()].lv_menu_mode = 2;
        }
        lib1_gf_RenderTesterUIForPlayer(EventPlayer());
        return true;
    }

    if ((lib1_gv_attack_mode == false)) {
        if ((EventDialogControl() == lib1_gv_menu_side)) {
            TriggerExecute(lib1_gt_TesterSideButton, true, false);
            lib1_gf_RenderTesterUIForPlayer(EventPlayer());
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_creator_mirror)) {
            lib1_gf_MirrorTesterUnitsByPlayer(EventPlayer());
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_creator_clear)) {
            TriggerExecute(lib1_gt_TesterClearUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_start_attack)) {
            TriggerExecute(lib1_gt_TesterStartButton, true, false);
            lib1_gf_RenderTesterUIForAllPlayers();
            return true;
        }

        if ((lib1_gv_data_player[EventPlayer()].lv_menu_mode == 1)) {
            if ((EventDialogControl() == lib1_gv_settings_upgradebutton[0])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_9B83B133"));
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[0], 0);
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[1], 0);
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_upgradebutton[1])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_7ED5D442"));
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[0], 1);
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[1], 1);
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_upgradebutton[2])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_D91352D6"));
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[0], 2);
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[1], 2);
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_upgradebutton[3])) {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_004B2BBF"));
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[0], 3);
                lib1_gf_SetLevelledUpgradesValue(lib1_gv_side_player[1], 3);
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_researchbutton[0])) {
                lib1_gf_AllresearchesONOFF(false);
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_researchbutton[1])) {
                lib1_gf_AllresearchesONOFF(true);
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_visionbutton[0])) {
                autoD76D4EF0_var = 1;
                for ( ; autoD76D4EF0_var <= autoD76D4EF0_ae; autoD76D4EF0_var += 1 ) {
                    VisRevealerEnable(lib1_gv_data_player[autoD76D4EF0_var].lv_revealer, false);
                }
                lib1_gv_vision = false;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_170C04AD"));
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            else if ((EventDialogControl() == lib1_gv_settings_visionbutton[1])) {
                autoDD3ACD45_var = 1;
                for ( ; autoDD3ACD45_var <= autoDD3ACD45_ae; autoDD3ACD45_var += 1 ) {
                    VisRevealerEnable(lib1_gv_data_player[autoDD3ACD45_var].lv_revealer, true);
                }
                lib1_gv_vision = true;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_1_6BCFEC60"));
                lib1_gf_RenderTesterUIForAllPlayers();
                return true;
            }
            lv_ii = 0;
            for ( ; ( (auto48D1AFE1_ai >= 0 && lv_ii <= auto48D1AFE1_ae) || (auto48D1AFE1_ai < 0 && lv_ii >= auto48D1AFE1_ae) ) ; lv_ii += auto48D1AFE1_ai ) {
                if ((EventDialogControl() == lib1_gv_settings_terrainbutton[lv_ii])) {
                    lib1_gv_terrain_index = lv_ii;
                    lib1_gf_LoadTerrainData(lib1_gv_data_terrain[lv_ii]);
                    lib1_gf_RenderTesterUIForAllPlayers();
                    return true;
                }

            }
            lv_ii = 0;
            for ( ; ( (auto716A5663_ai >= 0 && lv_ii <= auto716A5663_ae) || (auto716A5663_ai < 0 && lv_ii >= auto716A5663_ae) ) ; lv_ii += auto716A5663_ai ) {
                if ((EventDialogControl() == lib1_gv_settings_alliancebuttons[lv_ii][0])) {
                    lib1_gv_data_player[lv_ii].lv_player_access[0] = !(lib1_gv_data_player[lv_ii].lv_player_access[0]);
                    lib1_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

                if ((EventDialogControl() == lib1_gv_settings_alliancebuttons[lv_ii][1])) {
                    lib1_gv_data_player[lv_ii].lv_player_access[1] = !(lib1_gv_data_player[lv_ii].lv_player_access[1]);
                    lib1_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

                if ((EventDialogControl() == lib1_gv_settings_alliancebuttons[lv_ii][2])) {
                    lib1_gv_data_player[lv_ii].lv_creator_access = !(lib1_gv_data_player[lv_ii].lv_creator_access);
                    lib1_gf_RenderTesterUIForPlayer(EventPlayer());
                    return true;
                }

            }
        }

        if ((lib1_gv_data_player[EventPlayer()].lv_menu_mode == 2)) {
            autoF8E9C79A_var = 0;
            for ( ; autoF8E9C79A_var <= autoF8E9C79A_ae; autoF8E9C79A_var += 1 ) {
                lv_ii = 0;
                for ( ; ( (autoFA7FA56E_ai >= 0 && lv_ii <= autoFA7FA56E_ae) || (autoFA7FA56E_ai < 0 && lv_ii >= autoFA7FA56E_ae) ) ; lv_ii += autoFA7FA56E_ai ) {
                    if ((EventDialogControl() == lib1_gv_creator_racebutton[lv_ii])) {
                        if ((lib1_gv_data_player[EventPlayer()].lv_creator_race[lv_ii] == autoF8E9C79A_var)) {
                            if ((lib1_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] == 0)) {
                                lib1_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 1;
                            }
                            else {
                                lib1_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 0;
                            }
                        }
                        else {
                            lib1_gv_data_player[EventPlayer()].lv_creator_tech[lv_ii] = 0;
                        }
                        lib1_gv_data_player[EventPlayer()].lv_creator_race[lv_ii] = autoF8E9C79A_var;
                        lib1_gf_RenderTesterUIForPlayer(EventPlayer());
                        return true;
                    }

                }
            }
        }

    }

    if ((lib1_gv_attack_mode == true)) {
        if ((EventDialogControl() == lib1_gv_menu_attack_reset)) {
            TriggerExecute(lib1_gt_TesterResetUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_attack_pause)) {
            TriggerExecute(lib1_gt_TesterPauseUnits, true, false);
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_stop_attack)) {
            TriggerExecute(lib1_gt_TesterStopButton, true, false);
            lib1_gf_RenderTesterUIForAllPlayers();
            return true;
        }

        if ((EventDialogControl() == lib1_gv_menu_attack_attack)) {
            TriggerExecute(lib1_gt_TesterAttackButton, true, false);
            return true;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_DialogItemIsUsed_Init () {
    lib1_gt_DialogItemIsUsed = TriggerCreate("lib1_gt_DialogItemIsUsed_Func");
    TriggerAddEventDialogControl(lib1_gt_DialogItemIsUsed, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

void lib1_InitTriggers () {
    lib1_gt_InitializeUnitTesterInterface_Init();
    lib1_gt_PingUsed_Init();
    lib1_gt_PingResetTimerExprires_Init();
    lib1_gt_PingPanelAutoDisable_Init();
    lib1_gt_MeleeSurrender_Surrender_Init();
    lib1_gt_MeleeSurrender_SurrenderClickedButton_Init();
    lib1_gt_MeleeSurrender_FlashDialog_Init();
    lib1_gt_StarCraftEvents_Init();
    lib1_gt_TransportController_Init();
    lib1_gt_AutoRevealRegionController_Init();
    lib1_gt_UT_InfoSave_Init();
    lib1_gt_UT_Info_Init();
    lib1_gt_UT_InfoButton_Init();
    lib1_gt_UT_InfoCreate_Init();
    lib1_gt_UT_UI_Init();
    lib1_gt_UT_UI_CtrlH_Init();
    lib1_gt_UT_ButtonMonitor_Init();
    lib1_gt_UT_ButtonUsage_Init();
    lib1_gt_UT_HotkeyChange_Init();
    lib1_gt_UT_Godmode_Init();
    lib1_gt_UT_Godmode_unit_created_Init();
    lib1_gt_UT_UnitInfo_Init();
    lib1_gt_UT_UnitInfoUpdate_Init();
    lib1_gt_UT_FastConstruction_Init();
    lib1_gt_UT_FastTrain_Init();
    lib1_gt_UT_FastResearch_Init();
    lib1_gt_UT_FastArrm_Init();
    lib1_gt_UT_FastRevive_Init();
    lib1_gt_UT_FastBuild_Init();
    lib1_gt_UT_ToggleEco_Init();
    lib1_gt_UT_EconomyValue_Init();
    lib1_gt_UT_WorkerSaturation_Init();
    lib1_gt_UT_ListEmotes_Init();
    lib1_gt_UT_Emote_ButtonClicked_Init();
    lib1_gt_UpgradeChanged_Init();
    lib1_gt_UT_Debug_Init();
    lib1_gt_AbilityUsed_Init();
    lib1_gt_UnitCreated_Init();
    lib1_gt_UnitDied_Init();
    lib1_gt_UnitRevived_Init();
    lib1_gt_EffectUsed_Init();
    lib1_gt_BehaviorChanged_Init();
    lib1_gt_EffectDealingDamage_Init();
    lib1_gt_UT_Trace_Init();
    lib1_gt_UT_Tracing_Init();
    lib1_gt_UT_DeTracing_Init();
    lib1_gt_UT_CopyPaste_Init();
    lib1_gt_UT_CTRLC_Init();
    lib1_gt_UT_CTRLV_Init();
    lib1_gt_UT_PathCheck_Init();
    lib1_gt_UT_PathCheckTAB_Init();
    lib1_gt_UT_Light_Init();
    lib1_gt_UT_Plus_Init();
    lib1_gt_UT_Minus_Init();
    lib1_gt_UT_MissileMovers_Init();
    lib1_gt_UT_MissileCreated_Init();
    lib1_gt_UT_Height_Init();
    lib1_gt_UT_AttackSpeed_Init();
    lib1_gt_UT_Life_Init();
    lib1_gt_UT_Energy_Init();
    lib1_gt_UT_MovementSpeed_Init();
    lib1_gt_UT_Acceleration_Init();
    lib1_gt_UT_Range_Init();
    lib1_gt_UT_ARange_Init();
    lib1_gt_UT_Armor_Init();
    lib1_gt_UT_TintColor_Init();
    lib1_gt_UT_Scale_Init();
    lib1_gt_UT_TimeScale_Init();
    lib1_gt_UT_ActorMsg_Init();
    lib1_gt_UT_AirGround_Init();
    lib1_gt_UT_Camera_TurnOnOff_Init();
    lib1_gt_UT_Camera_Reset_Init();
    lib1_gt_UT_Camera_Top_Init();
    lib1_gt_UT_Camera_KeyUp_Init();
    lib1_gt_UT_Camera_KeyDown_Init();
    lib1_gt_UT_Camera_PeriodicUpdate_Init();
    lib1_gt_UT_Dummy_Init();
    lib1_gt_UT_DummyTakesDamage_Init();
    lib1_gt_UT_DummyUpdate_Init();
    lib1_gt_UT_DummyDestroyed_Init();
    lib1_gt_UT_DPS_Init();
    lib1_gt_UT_DPS_Stop_Init();
    lib1_gt_UT_DPS_DealsDamage_Init();
    lib1_gt_UT_DPS_Summon_Init();
    lib1_gt_UT_DPS_Dies_Init();
    lib1_gt_UT_DPS_PauseGlobal_Init();
    lib1_gt_UT_Vision_Init();
    lib1_gt_UT_Numberstoggle_Init();
    lib1_gt_UT_NumbersDamage_Init();
    lib1_gt_UT_NumbersHeal_Init();
    lib1_gt_UT_DL_LogDisplay_Init();
    lib1_gt_UT_DL_PeriodicUpdate_Init();
    lib1_gt_UT_DL_DamageLogging_Init();
    lib1_gt_UT_DL_HealLogging_Init();
    lib1_gt_UT_EnableDevCommands_Init();
    lib1_gt_UT_DisableDevCommandsforally_Init();
    lib1_gt_UT_Rad_Init();
    lib1_gt_UT_XP_Init();
    lib1_gt_UT_ListDead_Init();
    lib1_gt_UT_ListHidden_Init();
    lib1_gt_UT_ListMissile_Init();
    lib1_gt_UT_ListAll_Init();
    lib1_gt_UT_Teleport_Init();
    lib1_gt_UT_Restart_Init();
    lib1_gt_UT_GetID_Init();
    lib1_gt_UT_Restore_Init();
    lib1_gt_UT_Pause_Init();
    lib1_gt_UT_Money_Init();
    lib1_gt_UT_Look_Init();
    lib1_gt_UT_sight_Init();
    lib1_gt_UT_Kill_Init();
    lib1_gt_UT_Remove_Init();
    lib1_gt_UT_PauseAI_Init();
    lib1_gt_UT_Speed_Init();
    lib1_gt_UT_Supply_Init();
    lib1_gt_UT_Give_Init();
    lib1_gt_UT_SwitchOwner_Init();
    lib1_gt_UT_Cost_Init();
    lib1_gt_UT_clearscreen_Init();
    lib1_gt_UT_ClearEnemy_Init();
    lib1_gt_UT_SpawnUnits_Init();
    lib1_gt_UT_Control_Init();
    lib1_gt_UT_Resource_Init();
    lib1_gt_UT_DebugApplySkin_Init();
    lib1_gt_UT_DebugMode_Init();
    lib1_gt_CU_MinimapAllyViewUpdate_Init();
    lib1_gt_CU_MinimapAllyPlayerLeaves_Init();
    lib1_gt_CU_MinimapAllyViewCamera_Init();
    lib1_gt_allSetupUnitTesterFactionAllUnits_Init();
    lib1_gt_searchSetupUnitTesterFactionSearch_Init();
    lib1_gt_availableSetupUnitTesterFactionSmartAvailable_Init();
    lib1_gt_restrictedSetupUnitTesterFactionSmartRestricted_Init();
    lib1_gt_TesterStartButton_Init();
    lib1_gt_TesterStopButton_Init();
    lib1_gt_TesterAttackButton_Init();
    lib1_gt_TesterSideButton_Init();
    lib1_gt_TesterClearUnits_Init();
    lib1_gt_TesterDeleteUnits_Init();
    lib1_gt_TesterPauseUnits_Init();
    lib1_gt_TesterResetUnits_Init();
    lib1_gt_RaceButtonClicked_Init();
    lib1_gt_ArrowButtonClicked_Init();
    lib1_gt_CardButtonCliked_Init();
    lib1_gt_LeaderboardUnitCreated_Init();
    lib1_gt_LeaderboardUnitRemoved_Init();
    lib1_gt_TesterResult_Init();
    lib1_gt_InstantBuild_Init();
    lib1_gt_DisableStructures_Init();
    lib1_gt_CreateNeutralStructure_Init();
    lib1_gt_CtrlOff_Init();
    lib1_gt_CtrlOn_Init();
    lib1_gt_ShiftOff_Init();
    lib1_gt_ShiftOn_Init();
    lib1_gt_DialogItemIsUsed_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
}
